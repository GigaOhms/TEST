
LCD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000070f8  080093e0  080093e0  000193e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080104dc  080104dc  000204dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f0  24000000  080104e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007b4  240000f0  080105d0  000300f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240008a4  080105d0  000308a4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0003011e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001739c  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031c4  00000000  00000000  000474fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001340  00000000  00000000  0004a6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eac  00000000  00000000  0004ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000047f3  00000000  00000000  0004c8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019cd1  00000000  00000000  000510a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167c52  00000000  00000000  0006ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000055e8  00000000  00000000  001d29cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  001d7fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000f0 	.word	0x240000f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080093c8 	.word	0x080093c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000f4 	.word	0x240000f4
 80002dc:	080093c8 	.word	0x080093c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000396:	4b3a      	ldr	r3, [pc, #232]	; (8000480 <MX_GPIO_Init+0x100>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039c:	4a38      	ldr	r2, [pc, #224]	; (8000480 <MX_GPIO_Init+0x100>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <MX_GPIO_Init+0x100>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b32      	ldr	r3, [pc, #200]	; (8000480 <MX_GPIO_Init+0x100>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ba:	4a31      	ldr	r2, [pc, #196]	; (8000480 <MX_GPIO_Init+0x100>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <MX_GPIO_Init+0x100>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ca:	f003 0304 	and.w	r3, r3, #4
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_GPIO_Init+0x100>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d8:	4a29      	ldr	r2, [pc, #164]	; (8000480 <MX_GPIO_Init+0x100>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <MX_GPIO_Init+0x100>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f6:	4a22      	ldr	r2, [pc, #136]	; (8000480 <MX_GPIO_Init+0x100>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <MX_GPIO_Init+0x100>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E3_GPIO_Port, E3_Pin, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	481c      	ldr	r0, [pc, #112]	; (8000484 <MX_GPIO_Init+0x104>)
 8000414:	f003 fa34 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <MX_GPIO_Init+0x104>)
 8000420:	f003 fa2e 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = E3_Pin;
 8000424:	2308      	movs	r3, #8
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E3_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	4619      	mov	r1, r3
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0x104>)
 800043c:	f003 f858 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_GPIO_Init+0x108>)
 8000456:	f003 f84b 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800045a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2301      	movs	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000468:	2303      	movs	r3, #3
 800046a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x104>)
 8000474:	f003 f83c 	bl	80034f0 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	; 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58024400 	.word	0x58024400
 8000484:	58021000 	.word	0x58021000
 8000488:	58020800 	.word	0x58020800

0800048c <MPU_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000492:	463b      	mov	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800049e:	f002 ffab 	bl	80033f8 <HAL_MPU_Disable>
	
	/* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80004a2:	2301      	movs	r3, #1
 80004a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80004aa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80004ae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80004b0:	231b      	movs	r3, #27
 80004b2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004b4:	2300      	movs	r3, #0
 80004b6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004c4:	2301      	movs	r3, #1
 80004c6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80004cc:	2300      	movs	r3, #0
 80004ce:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 ffc8 	bl	8003468 <HAL_MPU_ConfigRegion>
	
  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80004d8:	2301      	movs	r3, #1
 80004da:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 80004dc:	2301      	movs	r3, #1
 80004de:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80004e0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80004e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 80004e6:	2316      	movs	r3, #22
 80004e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 80004ea:	2305      	movs	r3, #5
 80004ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80004fe:	2301      	movs	r3, #1
 8000500:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000506:	463b      	mov	r3, r7
 8000508:	4618      	mov	r0, r3
 800050a:	f002 ffad 	bl	8003468 <HAL_MPU_ConfigRegion>
	
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800050e:	2004      	movs	r0, #4
 8000510:	f002 ff8a 	bl	8003428 <HAL_MPU_Enable>
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000522:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d11b      	bne.n	8000566 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800052e:	f3bf 8f4f 	dsb	sy
}
 8000532:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000534:	f3bf 8f6f 	isb	sy
}
 8000538:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000542:	f3bf 8f4f 	dsb	sy
}
 8000546:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000548:	f3bf 8f6f 	isb	sy
}
 800054c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000560:	f3bf 8f6f 	isb	sy
}
 8000564:	e000      	b.n	8000568 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000566:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d138      	bne.n	80005e6 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 8000584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000588:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	0b5b      	lsrs	r3, r3, #13
 800058e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000592:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	08db      	lsrs	r3, r3, #3
 8000598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800059c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	015a      	lsls	r2, r3, #5
 80005a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ac:	4911      	ldr	r1, [pc, #68]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1ef      	bne.n	800059e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1e5      	bne.n	8000594 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <CPU_CACHE_Enable+0xd8>)
 80005d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005da:	f3bf 8f4f 	dsb	sy
}
 80005de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
}
 80005e4:	e000      	b.n	80005e8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005e6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <LED_Blink>:

static void LED_Blink(uint32_t Hdelay,uint32_t Ldelay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <LED_Blink+0x3c>)
 8000608:	f003 f93a 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fdcf 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2108      	movs	r1, #8
 800061a:	4806      	ldr	r0, [pc, #24]	; (8000634 <LED_Blink+0x3c>)
 800061c:	f003 f930 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay-1);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fdc5 	bl	80031b4 <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	58021000 	.word	0x58021000

08000638 <RTC_CalendarShow>:
  * @brief  Get the current time and date.
  * @param  
  * @retval None
  */
static void RTC_CalendarShow(RTC_DateTypeDef *sdatestructureget,RTC_TimeTypeDef *stimestructureget)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  /* ����ͬʱ��ȡʱ������� ��Ȼ�ᵼ���´�RTC���ܶ�ȡ */
  /* Both time and date must be obtained or RTC cannot be read next time */
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, stimestructureget, RTC_FORMAT_BIN);
 8000642:	2200      	movs	r2, #0
 8000644:	6839      	ldr	r1, [r7, #0]
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <RTC_CalendarShow+0x28>)
 8000648:	f005 fd96 	bl	8006178 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, sdatestructureget, RTC_FORMAT_BIN);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <RTC_CalendarShow+0x28>)
 8000652:	f005 fe75 	bl	8006340 <HAL_RTC_GetDate>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400010c 	.word	0x2400010c
 8000664:	00000000 	.word	0x00000000

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	ed2d 8b04 	vpush	{d8-d9}
 800066e:	b095      	sub	sp, #84	; 0x54
 8000670:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  #ifdef W25Qxx
    SCB->VTOR = QSPI_BASE;
  #endif
  MPU_Config();
 8000672:	f7ff ff0b 	bl	800048c <MPU_Config>
  CPU_CACHE_Enable();
 8000676:	f7ff ff51 	bl	800051c <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f002 fd09 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f899 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff fe7d 	bl	8000380 <MX_GPIO_Init>
  MX_RTC_Init();
 8000686:	f000 f927 	bl	80008d8 <MX_RTC_Init>
  MX_SPI4_Init();
 800068a:	f000 fa07 	bl	8000a9c <MX_SPI4_Init>
  MX_TIM1_Init();
 800068e:	f000 fba5 	bl	8000ddc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
//	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,10);
	LCD_Test();
 8000692:	f000 fcbb 	bl	800100c <LCD_Test>
	HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069a:	f002 fd8b 	bl	80031b4 <HAL_Delay>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800069e:	4b40      	ldr	r3, [pc, #256]	; (80007a0 <main+0x138>)
 80006a0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <main+0x13c>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <main+0x13c>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2100      	movs	r1, #0
 80006ac:	9101      	str	r1, [sp, #4]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	483c      	ldr	r0, [pc, #240]	; (80007a8 <main+0x140>)
 80006b8:	47a0      	blx	r4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t text[20];
	uint8_t sinHigh = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t sinWidth = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	float sinVal = 70.0;
 80006c6:	4b39      	ldr	r3, [pc, #228]	; (80007ac <main+0x144>)
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
	float t = 0.0000;
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 80006d0:	f107 020c 	add.w	r2, r7, #12
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ffac 	bl	8000638 <RTC_CalendarShow>
//		LCD_ShowString(4, 58, 160, 16, 16, text);

//		sprintf((char *)&text,"Tick: %ld ms", HAL_GetTick());
//		LCD_ShowString(4, 58, 160, 16, 16,text);

		sinHigh = (uint8_t)((sinVal + sinVal * sin(2*PI*t))/2.0);
 80006e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80006e4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80006e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80006ec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80006f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80006f4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80007b0 <main+0x148>
 80006f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000700:	eeb0 0b47 	vmov.f64	d0, d7
 8000704:	f008 f874 	bl	80087f0 <sin>
 8000708:	eeb0 7b40 	vmov.f64	d7, d0
 800070c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000710:	ee38 6b07 	vadd.f64	d6, d8, d7
 8000714:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800071c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000720:	edc7 7a01 	vstr	s15, [r7, #4]
 8000724:	793b      	ldrb	r3, [r7, #4]
 8000726:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		ST7735_LCD_Driver.DrawHLine(&st7735_pObj, sinWidth, sinHigh, 1, 0xFFFF);
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <main+0x138>)
 800072c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800072e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000732:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <main+0x140>)
 8000740:	47a0      	blx	r4
//		ST7735_DrawHLine(pObj, Xpos, Ypos, Length, Color
		sinWidth++;
 8000742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000746:	3301      	adds	r3, #1
 8000748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (sinWidth >= 160) {
 800074c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000750:	2b9f      	cmp	r3, #159	; 0x9f
 8000752:	d910      	bls.n	8000776 <main+0x10e>
			sinWidth = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <main+0x138>)
 800075c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <main+0x13c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <main+0x13c>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2100      	movs	r1, #0
 8000768:	9101      	str	r1, [sp, #4]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <main+0x140>)
 8000774:	47a0      	blx	r4
		}
		t += 0.02;
 8000776:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800077a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000798 <main+0x130>
 8000782:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800078a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
//		if (t > 1.0) {
//			t = 0.0;
//			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
//		}
		HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f002 fd10 	bl	80031b4 <HAL_Delay>
		RTC_CalendarShow(&sdatestructureget, &stimestructureget);
 8000794:	e79c      	b.n	80006d0 <main+0x68>
 8000796:	bf00      	nop
 8000798:	47ae147b 	.word	0x47ae147b
 800079c:	3f947ae1 	.word	0x3f947ae1
 80007a0:	2400002c 	.word	0x2400002c
 80007a4:	24000248 	.word	0x24000248
 80007a8:	24000208 	.word	0x24000208
 80007ac:	428c0000 	.word	0x428c0000
 80007b0:	40c90fdb 	.word	0x40c90fdb

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	224c      	movs	r2, #76	; 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f007 fb90 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 fb8a 	bl	8007ee8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f003 f87d 	bl	80038d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <SystemClock_Config+0x104>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a35      	ldr	r2, [pc, #212]	; (80008b8 <SystemClock_Config+0x104>)
 80007e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <SystemClock_Config+0x104>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b31      	ldr	r3, [pc, #196]	; (80008bc <SystemClock_Config+0x108>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	4a30      	ldr	r2, [pc, #192]	; (80008bc <SystemClock_Config+0x108>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <SystemClock_Config+0x108>)
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800080c:	bf00      	nop
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <SystemClock_Config+0x104>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081a:	d1f8      	bne.n	800080e <SystemClock_Config+0x5a>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800081c:	f003 f84a 	bl	80038b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000820:	f002 fcec 	bl	80031fc <HAL_GetREVID>
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <SystemClock_Config+0x10c>)
 8000826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <SystemClock_Config+0x10c>)
 800082a:	f023 0318 	bic.w	r3, r3, #24
 800082e:	6713      	str	r3, [r2, #112]	; 0x70
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000830:	2305      	movs	r3, #5
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	2302      	movs	r3, #2
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000846:	2305      	movs	r3, #5
 8000848:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800084a:	2360      	movs	r3, #96	; 0x60
 800084c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800085a:	2308      	movs	r3, #8
 800085c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085e:	2300      	movs	r3, #0
 8000860:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4618      	mov	r0, r3
 800086c:	f003 f86c 	bl	8003948 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f000 f825 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	233f      	movs	r3, #63	; 0x3f
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000886:	2308      	movs	r3, #8
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2101      	movs	r1, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fcac 	bl	80041fc <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80008aa:	f000 f80b 	bl	80008c4 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3770      	adds	r7, #112	; 0x70
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	58024800 	.word	0x58024800
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024400 	.word	0x58024400

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  LED_Blink(500,500);
 80008c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d0:	f7ff fe92 	bl	80005f8 <LED_Blink>
  /* USER CODE END Error_Handler_Debug */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <MX_RTC_Init+0x150>)
 80008f2:	4a4e      	ldr	r2, [pc, #312]	; (8000a2c <MX_RTC_Init+0x154>)
 80008f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <MX_RTC_Init+0x150>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008fc:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <MX_RTC_Init+0x150>)
 80008fe:	227f      	movs	r2, #127	; 0x7f
 8000900:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <MX_RTC_Init+0x150>)
 8000904:	22ff      	movs	r2, #255	; 0xff
 8000906:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000908:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MX_RTC_Init+0x150>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <MX_RTC_Init+0x150>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <MX_RTC_Init+0x150>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MX_RTC_Init+0x150>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000920:	4841      	ldr	r0, [pc, #260]	; (8000a28 <MX_RTC_Init+0x150>)
 8000922:	f005 fb09 	bl	8005f38 <HAL_RTC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800092c:	f7ff ffca 	bl	80008c4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000930:	2101      	movs	r1, #1
 8000932:	483d      	ldr	r0, [pc, #244]	; (8000a28 <MX_RTC_Init+0x150>)
 8000934:	f005 fe3a 	bl	80065ac <HAL_RTCEx_BKUPRead>
 8000938:	4603      	mov	r3, r0
 800093a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <MX_RTC_Init+0x9e>
  {
    /* Configure RTC Calendar */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000942:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000946:	2101      	movs	r1, #1
 8000948:	4837      	ldr	r0, [pc, #220]	; (8000a28 <MX_RTC_Init+0x150>)
 800094a:	f005 fe17 	bl	800657c <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800094e:	2312      	movs	r3, #18
 8000950:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000956:	2300      	movs	r3, #0
 8000958:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	482f      	ldr	r0, [pc, #188]	; (8000a28 <MX_RTC_Init+0x150>)
 800096a:	f005 fb67 	bl	800603c <HAL_RTC_SetTime>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d043      	beq.n	80009fc <MX_RTC_Init+0x124>
 8000974:	e040      	b.n	80009f8 <MX_RTC_Init+0x120>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <MX_RTC_Init+0x158>)
 8000978:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800097c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00c      	beq.n	800099e <MX_RTC_Init+0xc6>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2108      	movs	r1, #8
 8000988:	482a      	ldr	r0, [pc, #168]	; (8000a34 <MX_RTC_Init+0x15c>)
 800098a:	f002 ff79 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 800098e:	2009      	movs	r0, #9
 8000990:	f002 fc10 	bl	80031b4 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2108      	movs	r1, #8
 8000998:	4826      	ldr	r0, [pc, #152]	; (8000a34 <MX_RTC_Init+0x15c>)
 800099a:	f002 ff71 	bl	8003880 <HAL_GPIO_WritePin>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_RTC_Init+0x158>)
 80009a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80009a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d01c      	beq.n	80009e6 <MX_RTC_Init+0x10e>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <MX_RTC_Init+0x15c>)
 80009b2:	f002 ff65 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 80009b6:	2009      	movs	r0, #9
 80009b8:	f002 fbfc 	bl	80031b4 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <MX_RTC_Init+0x15c>)
 80009c2:	f002 ff5d 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_Delay(100-1);
 80009c6:	2063      	movs	r0, #99	; 0x63
 80009c8:	f002 fbf4 	bl	80031b4 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2108      	movs	r1, #8
 80009d0:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_RTC_Init+0x15c>)
 80009d2:	f002 ff55 	bl	8003880 <HAL_GPIO_WritePin>
		 HAL_Delay(10-1);
 80009d6:	2009      	movs	r0, #9
 80009d8:	f002 fbec 	bl	80031b4 <HAL_Delay>
		 HAL_GPIO_WritePin(E3_GPIO_Port,E3_Pin,GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2108      	movs	r1, #8
 80009e0:	4814      	ldr	r0, [pc, #80]	; (8000a34 <MX_RTC_Init+0x15c>)
 80009e2:	f002 ff4d 	bl	8003880 <HAL_GPIO_WritePin>
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_RTC_Init+0x158>)
 80009e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <MX_RTC_Init+0x158>)
 80009ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
 80009f6:	e014      	b.n	8000a22 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 80009f8:	f7ff ff64 	bl	80008c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009fc:	2301      	movs	r3, #1
 80009fe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8000a00:	2306      	movs	r3, #6
 8000a02:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8000a08:	2320      	movs	r3, #32
 8000a0a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_RTC_Init+0x150>)
 8000a14:	f005 fc0c 	bl	8006230 <HAL_RTC_SetDate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8000a1e:	f7ff ff51 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2400010c 	.word	0x2400010c
 8000a2c:	58004000 	.word	0x58004000
 8000a30:	58024400 	.word	0x58024400
 8000a34:	58021000 	.word	0x58021000

08000a38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0b2      	sub	sp, #200	; 0xc8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	22c0      	movs	r2, #192	; 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f007 fa4d 	bl	8007ee8 <memset>
  if(rtcHandle->Instance==RTC)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_RTC_MspInit+0x5c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d119      	bne.n	8000a8c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 fef3 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000a7c:	f7ff ff22 	bl	80008c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_RTC_MspInit+0x60>)
 8000a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_RTC_MspInit+0x60>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	37c8      	adds	r7, #200	; 0xc8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58004000 	.word	0x58004000
 8000a98:	58024400 	.word	0x58024400

08000a9c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000aa2:	4a29      	ldr	r2, [pc, #164]	; (8000b48 <MX_SPI4_Init+0xac>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000aa8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ab0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000ab4:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000aca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ace:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ad2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_SPI4_Init+0xa8>)
 8000b30:	f005 fd52 	bl	80065d8 <HAL_SPI_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 8000b3a:	f7ff fec3 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000130 	.word	0x24000130
 8000b48:	40013400 	.word	0x40013400

08000b4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ba      	sub	sp, #232	; 0xe8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	22c0      	movs	r2, #192	; 0xc0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f007 f9bb 	bl	8007ee8 <memset>
  if(spiHandle->Instance==SPI4)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <HAL_SPI_MspInit+0xc4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d145      	bne.n	8000c08 <HAL_SPI_MspInit+0xbc>
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fe63 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000b9c:	f7ff fe92 	bl	80008c4 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_SPI_MspInit+0xc8>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000bdc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_SPI_MspInit+0xcc>)
 8000c04:	f002 fc74 	bl	80034f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000c08:	bf00      	nop
 8000c0a:	37e8      	adds	r7, #232	; 0xe8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013400 	.word	0x40013400
 8000c14:	58024400 	.word	0x58024400
 8000c18:	58021000 	.word	0x58021000

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x30>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x30>)
 8000c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	58024400 	.word	0x58024400

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f002 fa66 	bl	8003174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f007 f90c 	bl	8007ef8 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24080000 	.word	0x24080000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	240001b8 	.word	0x240001b8
 8000d14:	240008a8 	.word	0x240008a8

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <SystemInit+0xac>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <SystemInit+0xac>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <SystemInit+0xb0>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <SystemInit+0xb0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <SystemInit+0xb0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <SystemInit+0xb0>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4921      	ldr	r1, [pc, #132]	; (8000dc8 <SystemInit+0xb0>)
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <SystemInit+0xb4>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <SystemInit+0xb0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <SystemInit+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <SystemInit+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <SystemInit+0xb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <SystemInit+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <SystemInit+0xb0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <SystemInit+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SystemInit+0xb0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <SystemInit+0xb0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <SystemInit+0xb0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <SystemInit+0xb0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SystemInit+0xb0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <SystemInit+0xb0>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <SystemInit+0xb0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <SystemInit+0xb8>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SystemInit+0xbc>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000daa:	d202      	bcs.n	8000db2 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <SystemInit+0xc0>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SystemInit+0xac>)
 8000db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd0:	5c001000 	.word	0x5c001000
 8000dd4:	ffff0000 	.word	0xffff0000
 8000dd8:	51008108 	.word	0x51008108

08000ddc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	222c      	movs	r2, #44	; 0x2c
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f007 f86d 	bl	8007ee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e0e:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e10:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <MX_TIM1_Init+0x11c>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e16:	220b      	movs	r2, #11
 8000e18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e20:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3a:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e3c:	f006 f965 	bl	800710a <HAL_TIM_PWM_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f7ff fd3d 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e5e:	f006 fef1 	bl	8007c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e68:	f7ff fd2c 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	; 0x60
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000e92:	f006 f991 	bl	80071b8 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e9c:	f7ff fd12 	bl	80008c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000ed6:	f006 ff43 	bl	8007d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ee0:	f7ff fcf0 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM1_Init+0x118>)
 8000ee6:	f000 f82b 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000eea:	bf00      	nop
 8000eec:	3758      	adds	r7, #88	; 0x58
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	240001bc 	.word	0x240001bc
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10e      	bne.n	8000f2c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_TIM_PWM_MspInit+0x40>)
 8000f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f14:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_TIM_PWM_MspInit+0x40>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_TIM_PWM_MspInit+0x40>)
 8000f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <HAL_TIM_MspPostInit+0x6c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d11f      	bne.n	8000fa2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_TIM_MspPostInit+0x70>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <HAL_TIM_MspPostInit+0x70>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_TIM_MspPostInit+0x70>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE10     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_TIM_MspPostInit+0x74>)
 8000f9e:	f002 faa7 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58021000 	.word	0x58021000

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff feac 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f006 ff8d 	bl	8007f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fb3d 	bl	8000668 <main>
  bx  lr
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff8:	240000f0 	.word	0x240000f0
  ldr r2, =_sidata
 8000ffc:	080104e0 	.word	0x080104e0
  ldr r2, =_sbss
 8001000:	240000f0 	.word	0x240000f0
  ldr r4, =_ebss
 8001004:	240008a4 	.word	0x240008a4

08001008 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC3_IRQHandler>
	...

0800100c <LCD_Test>:

ST7735_Object_t st7735_pObj;
uint32_t st7735_id;

void LCD_Test(void)
{
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af02      	add	r7, sp, #8
	uint8_t text[20];
	
	#ifdef TFT96
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8001012:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <LCD_Test+0x1fc>)
 8001014:	2203      	movs	r2, #3
 8001016:	609a      	str	r2, [r3, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8001018:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <LCD_Test+0x1fc>)
 800101a:	2200      	movs	r2, #0
 800101c:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = ST7735_0_9_inch_screen;
 800101e:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <LCD_Test+0x1fc>)
 8001020:	2201      	movs	r2, #1
 8001022:	735a      	strb	r2, [r3, #13]
	#else
//	error "Unknown Screen"
	
	#endif
	
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8001024:	4979      	ldr	r1, [pc, #484]	; (800120c <LCD_Test+0x200>)
 8001026:	487a      	ldr	r0, [pc, #488]	; (8001210 <LCD_Test+0x204>)
 8001028:	f000 fcfa 	bl	8001a20 <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 800102c:	4b79      	ldr	r3, [pc, #484]	; (8001214 <LCD_Test+0x208>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a75      	ldr	r2, [pc, #468]	; (8001208 <LCD_Test+0x1fc>)
 8001032:	2105      	movs	r1, #5
 8001034:	4876      	ldr	r0, [pc, #472]	; (8001210 <LCD_Test+0x204>)
 8001036:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <LCD_Test+0x208>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4976      	ldr	r1, [pc, #472]	; (8001218 <LCD_Test+0x20c>)
 800103e:	4874      	ldr	r0, [pc, #464]	; (8001210 <LCD_Test+0x204>)
 8001040:	4798      	blx	r3
	
	LCD_SetBrightness(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f8fa 	bl	800123c <LCD_SetBrightness>
	
	#ifdef TFT96
	extern unsigned char WeActStudiologo_160_80[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8001048:	4b72      	ldr	r3, [pc, #456]	; (8001214 <LCD_Test+0x208>)
 800104a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800104c:	4b73      	ldr	r3, [pc, #460]	; (800121c <LCD_Test+0x210>)
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	486f      	ldr	r0, [pc, #444]	; (8001210 <LCD_Test+0x204>)
 8001054:	47a0      	blx	r4
	#elif TFT18
	extern unsigned char WeActStudiologo_128_160[];
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_128_160);
	#endif
	
  uint32_t tick = get_tick();
 8001056:	f002 f8a1 	bl	800319c <HAL_GetTick>
 800105a:	6178      	str	r0, [r7, #20]
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 800105c:	e06a      	b.n	8001134 <LCD_Test+0x128>
	{
		delay_ms(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f002 f8a8 	bl	80031b4 <HAL_Delay>

		if (get_tick() - tick <= 1000)
 8001064:	f002 f89a 	bl	800319c <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001072:	d80f      	bhi.n	8001094 <LCD_Test+0x88>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8001074:	f002 f892 	bl	800319c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	4a66      	ldr	r2, [pc, #408]	; (8001220 <LCD_Test+0x214>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	099b      	lsrs	r3, r3, #6
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f8d5 	bl	800123c <LCD_SetBrightness>
 8001092:	e04f      	b.n	8001134 <LCD_Test+0x128>
		else if (get_tick() - tick <= 3000)
 8001094:	f002 f882 	bl	800319c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d83d      	bhi.n	8001122 <LCD_Test+0x116>
		{
			sprintf((char *)&text, "%03ld", (get_tick() - tick - 1000) / 10);
 80010a6:	f002 f879 	bl	800319c <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80010b4:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <LCD_Test+0x218>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	463b      	mov	r3, r7
 80010be:	495a      	ldr	r1, [pc, #360]	; (8001228 <LCD_Test+0x21c>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 fef1 	bl	8007ea8 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 80010c6:	4b50      	ldr	r3, [pc, #320]	; (8001208 <LCD_Test+0x1fc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b1e      	subs	r3, #30
 80010ce:	b298      	uxth	r0, r3
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <LCD_Test+0x1fc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	463b      	mov	r3, r7
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	2310      	movs	r3, #16
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2310      	movs	r3, #16
 80010e0:	2101      	movs	r1, #1
 80010e2:	f000 fb4f 	bl	8001784 <LCD_ShowString>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <LCD_Test+0x208>)
 80010e8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <LCD_Test+0x1fc>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	1edd      	subs	r5, r3, #3
 80010f0:	f002 f854 	bl	800319c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <LCD_Test+0x1fc>)
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <LCD_Test+0x214>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	09db      	lsrs	r3, r3, #7
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	462a      	mov	r2, r5
 800111a:	2100      	movs	r1, #0
 800111c:	483c      	ldr	r0, [pc, #240]	; (8001210 <LCD_Test+0x204>)
 800111e:	47a0      	blx	r4
 8001120:	e008      	b.n	8001134 <LCD_Test+0x128>
		}
		else if (get_tick() - tick > 3000)
 8001122:	f002 f83b 	bl	800319c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001130:	4293      	cmp	r3, r2
 8001132:	d808      	bhi.n	8001146 <LCD_Test+0x13a>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	483c      	ldr	r0, [pc, #240]	; (800122c <LCD_Test+0x220>)
 800113a:	f002 fb89 	bl	8003850 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d18c      	bne.n	800105e <LCD_Test+0x52>
 8001144:	e004      	b.n	8001150 <LCD_Test+0x144>
			break;
 8001146:	bf00      	nop
	}
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001148:	e002      	b.n	8001150 <LCD_Test+0x144>
	{
		delay_ms(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f002 f832 	bl	80031b4 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4835      	ldr	r0, [pc, #212]	; (800122c <LCD_Test+0x220>)
 8001156:	f002 fb7b 	bl	8003850 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d0f4      	beq.n	800114a <LCD_Test+0x13e>
	}
	LCD_Light(0, 300);
 8001160:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001164:	2000      	movs	r0, #0
 8001166:	f000 f885 	bl	8001274 <LCD_Light>

	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <LCD_Test+0x208>)
 800116c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <LCD_Test+0x1fc>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <LCD_Test+0x1fc>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2100      	movs	r1, #0
 8001178:	9101      	str	r1, [sp, #4]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <LCD_Test+0x204>)
 8001184:	47a0      	blx	r4

	sprintf((char *)&text, "IUHPEAL");
 8001186:	463b      	mov	r3, r7
 8001188:	4929      	ldr	r1, [pc, #164]	; (8001230 <LCD_Test+0x224>)
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fe8c 	bl	8007ea8 <siprintf>
	LCD_ShowString(4, 4, ST7735Ctx.Width, 16, 16, text);
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <LCD_Test+0x1fc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29a      	uxth	r2, r3
 8001196:	463b      	mov	r3, r7
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2310      	movs	r3, #16
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2310      	movs	r3, #16
 80011a0:	2104      	movs	r1, #4
 80011a2:	2004      	movs	r0, #4
 80011a4:	f000 faee 	bl	8001784 <LCD_ShowString>
	sprintf((char *)&text, "STM32H743VIT6 0x%X", HAL_GetDEVID());
 80011a8:	f002 f834 	bl	8003214 <HAL_GetDEVID>
 80011ac:	4602      	mov	r2, r0
 80011ae:	463b      	mov	r3, r7
 80011b0:	4920      	ldr	r1, [pc, #128]	; (8001234 <LCD_Test+0x228>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 fe78 	bl	8007ea8 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <LCD_Test+0x1fc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	463b      	mov	r3, r7
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	2310      	movs	r3, #16
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2310      	movs	r3, #16
 80011c8:	2116      	movs	r1, #22
 80011ca:	2004      	movs	r0, #4
 80011cc:	f000 fada 	bl	8001784 <LCD_ShowString>
	sprintf((char *)&text, "TPHCM, 2023", st7735_id);
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <LCD_Test+0x20c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	463b      	mov	r3, r7
 80011d6:	4918      	ldr	r1, [pc, #96]	; (8001238 <LCD_Test+0x22c>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fe65 	bl	8007ea8 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <LCD_Test+0x1fc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	463b      	mov	r3, r7
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2310      	movs	r3, #16
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2310      	movs	r3, #16
 80011ee:	2128      	movs	r1, #40	; 0x28
 80011f0:	2004      	movs	r0, #4
 80011f2:	f000 fac7 	bl	8001784 <LCD_ShowString>

	LCD_Light(100, 200);
 80011f6:	21c8      	movs	r1, #200	; 0xc8
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f000 f83b 	bl	8001274 <LCD_Light>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	bf00      	nop
 8001208:	24000248 	.word	0x24000248
 800120c:	24000008 	.word	0x24000008
 8001210:	24000208 	.word	0x24000208
 8001214:	2400002c 	.word	0x2400002c
 8001218:	24000240 	.word	0x24000240
 800121c:	08009e84 	.word	0x08009e84
 8001220:	10624dd3 	.word	0x10624dd3
 8001224:	cccccccd 	.word	0xcccccccd
 8001228:	080093e0 	.word	0x080093e0
 800122c:	58020800 	.word	0x58020800
 8001230:	080093e8 	.word	0x080093e8
 8001234:	080093f0 	.word	0x080093f0
 8001238:	08009404 	.word	0x08009404

0800123c <LCD_SetBrightness>:

void LCD_SetBrightness(uint32_t Brightness)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LCD_SetBrightness+0x1c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	240001bc 	.word	0x240001bc

0800125c <LCD_GetBrightness>:

uint32_t LCD_GetBrightness(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <LCD_GetBrightness+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	240001bc 	.word	0x240001bc

08001274 <LCD_Light>:

// ��Ļ�𽥱������߱䰵
// Brightness_Dis: Ŀ��ֵ
// time: �ﵽĿ��ֵ��ʱ��,��λ: ms
void LCD_Light(uint32_t Brightness_Dis,uint32_t time)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	uint32_t Brightness_Now;
	uint32_t time_now;
	float temp1,temp2;
	float k,set;
	
	Brightness_Now = LCD_GetBrightness();
 800127e:	f7ff ffed 	bl	800125c <LCD_GetBrightness>
 8001282:	6278      	str	r0, [r7, #36]	; 0x24
	time_now = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
	if(Brightness_Now == Brightness_Dis)
 8001288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d05e      	beq.n	800134e <LCD_Light+0xda>
		return;
	
	if(time == time_now)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	429a      	cmp	r2, r3
 8001296:	d05c      	beq.n	8001352 <LCD_Light+0xde>
		return;
	
	temp1 = Brightness_Now;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	edc7 7a07 	vstr	s15, [r7, #28]
	temp1 = temp1 - Brightness_Dis;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	edc7 7a07 	vstr	s15, [r7, #28]
	temp2 = time_now;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	edc7 7a06 	vstr	s15, [r7, #24]
	temp2 = temp2 - time;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80012d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012dc:	edc7 7a06 	vstr	s15, [r7, #24]
	
	k = temp1 / temp2;
 80012e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80012e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	edc7 7a05 	vstr	s15, [r7, #20]
	
	uint32_t tick=get_tick();
 80012f0:	f001 ff54 	bl	800319c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]
	while(1)
	{
		delay_ms(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 ff5c 	bl	80031b4 <HAL_Delay>
		
		time_now = get_tick()-tick;
 80012fc:	f001 ff4e 	bl	800319c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	623b      	str	r3, [r7, #32]
		
		temp2 = time_now - 0;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	edc7 7a06 	vstr	s15, [r7, #24]
		
		set = temp2*k + Brightness_Now;
 8001316:	ed97 7a06 	vldr	s14, [r7, #24]
 800131a:	edd7 7a05 	vldr	s15, [r7, #20]
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	edc7 7a03 	vstr	s15, [r7, #12]
		
		LCD_SetBrightness((uint32_t)set);
 8001334:	edd7 7a03 	vldr	s15, [r7, #12]
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 0a90 	vmov	r0, s15
 8001340:	f7ff ff7c 	bl	800123c <LCD_SetBrightness>
		
		if(time_now >= time) break;
 8001344:	6a3a      	ldr	r2, [r7, #32]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d204      	bcs.n	8001356 <LCD_Light+0xe2>
		delay_ms(1);
 800134c:	e7d3      	b.n	80012f6 <LCD_Light+0x82>
		return;
 800134e:	bf00      	nop
 8001350:	e002      	b.n	8001358 <LCD_Light+0xe4>
		return;
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <LCD_Light+0xe4>
		if(time_now >= time) break;
 8001356:	bf00      	nop
		
	}
}
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <LCD_ShowChar>:
//num:Ҫ��ʾ���ַ�:" "--->"~"
//size:�����С 12/16
//mode:���ӷ�ʽ(1)���Ƿǵ��ӷ�ʽ(0)  

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{  							  
 8001360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001364:	b097      	sub	sp, #92	; 0x5c
 8001366:	af02      	add	r7, sp, #8
 8001368:	461e      	mov	r6, r3
 800136a:	4603      	mov	r3, r0
 800136c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800136e:	460b      	mov	r3, r1
 8001370:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001372:	4613      	mov	r3, r2
 8001374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001378:	4633      	mov	r3, r6
 800137a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800137e:	466b      	mov	r3, sp
 8001380:	607b      	str	r3, [r7, #4]
  uint8_t temp,t1,t;
	uint16_t y0=y;
 8001382:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001384:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t x0=x;
 8001388:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800138a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t colortemp=POINT_COLOR; 
 800138e:	4baf      	ldr	r3, [pc, #700]	; (800164c <LCD_ShowChar+0x2ec>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint32_t h,w;
	
	uint16_t write[size][size==12?6:8];
 8001396:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d101      	bne.n	80013a2 <LCD_ShowChar+0x42>
 800139e:	2106      	movs	r1, #6
 80013a0:	e000      	b.n	80013a4 <LCD_ShowChar+0x44>
 80013a2:	2108      	movs	r1, #8
 80013a4:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 80013a8:	1e4b      	subs	r3, r1, #1
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
 80013ac:	460a      	mov	r2, r1
 80013ae:	2300      	movs	r3, #0
 80013b0:	4692      	mov	sl, r2
 80013b2:	469b      	mov	fp, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80013c0:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80013c4:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80013c8:	460b      	mov	r3, r1
 80013ca:	005e      	lsls	r6, r3, #1
 80013cc:	4603      	mov	r3, r0
 80013ce:	3b01      	subs	r3, #1
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013d2:	460a      	mov	r2, r1
 80013d4:	2300      	movs	r3, #0
 80013d6:	61ba      	str	r2, [r7, #24]
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	b2c3      	uxtb	r3, r0
 80013dc:	2200      	movs	r2, #0
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	627a      	str	r2, [r7, #36]	; 0x24
 80013e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80013e6:	465b      	mov	r3, fp
 80013e8:	6a3a      	ldr	r2, [r7, #32]
 80013ea:	fb02 fc03 	mul.w	ip, r2, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	4652      	mov	r2, sl
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	449c      	add	ip, r3
 80013f8:	4652      	mov	r2, sl
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	fba2 8903 	umull	r8, r9, r2, r3
 8001400:	eb0c 0309 	add.w	r3, ip, r9
 8001404:	4699      	mov	r9, r3
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001412:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001416:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800141a:	460a      	mov	r2, r1
 800141c:	2300      	movs	r3, #0
 800141e:	613a      	str	r2, [r7, #16]
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	b2c3      	uxtb	r3, r0
 8001424:	2200      	movs	r2, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	60fa      	str	r2, [r7, #12]
 800142a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800142e:	464b      	mov	r3, r9
 8001430:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001434:	4652      	mov	r2, sl
 8001436:	fb02 fc03 	mul.w	ip, r2, r3
 800143a:	465b      	mov	r3, fp
 800143c:	4642      	mov	r2, r8
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	449c      	add	ip, r3
 8001444:	4642      	mov	r2, r8
 8001446:	4653      	mov	r3, sl
 8001448:	fba2 4503 	umull	r4, r5, r2, r3
 800144c:	eb0c 0305 	add.w	r3, ip, r5
 8001450:	461d      	mov	r5, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	012b      	lsls	r3, r5, #4
 800145c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001460:	0122      	lsls	r2, r4, #4
 8001462:	460b      	mov	r3, r1
 8001464:	4602      	mov	r2, r0
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	3307      	adds	r3, #7
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	ebad 0d03 	sub.w	sp, sp, r3
 8001476:	ab02      	add	r3, sp, #8
 8001478:	3301      	adds	r3, #1
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t count;
	
  ST7735_GetXSize(&st7735_pObj,&w);
 8001480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001484:	4619      	mov	r1, r3
 8001486:	4872      	ldr	r0, [pc, #456]	; (8001650 <LCD_ShowChar+0x2f0>)
 8001488:	f001 fc26 	bl	8002cd8 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800148c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001490:	4619      	mov	r1, r3
 8001492:	486f      	ldr	r0, [pc, #444]	; (8001650 <LCD_ShowChar+0x2f0>)
 8001494:	f001 fc32 	bl	8002cfc <ST7735_GetYSize>
	
	//���ô���		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800149c:	3b20      	subs	r3, #32
 800149e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	count = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	if(!mode) //�ǵ��ӷ�ʽ
 80014a8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80a7 	bne.w	8001600 <LCD_ShowChar+0x2a0>
	{
		for(t=0;t<size;t++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80014b8:	e09a      	b.n	80015f0 <LCD_ShowChar+0x290>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 80014ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d10e      	bne.n	80014e0 <LCD_ShowChar+0x180>
 80014c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80014c6:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 80014ca:	4862      	ldr	r0, [pc, #392]	; (8001654 <LCD_ShowChar+0x2f4>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4403      	add	r3, r0
 80014d6:	440b      	add	r3, r1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80014de:	e00a      	b.n	80014f6 <LCD_ShowChar+0x196>
			else temp=asc2_1608[num][t];		 //����1608����
 80014e0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80014e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014e8:	495b      	ldr	r1, [pc, #364]	; (8001658 <LCD_ShowChar+0x2f8>)
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	440a      	add	r2, r1
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			
			for(t1=0;t1<8;t1++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80014fc:	e06d      	b.n	80015da <LCD_ShowChar+0x27a>
			{			    
				if(temp&0x80)
 80014fe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001502:	2b00      	cmp	r3, #0
 8001504:	da0e      	bge.n	8001524 <LCD_ShowChar+0x1c4>
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b4b      	ldr	r3, [pc, #300]	; (800164c <LCD_ShowChar+0x2ec>)
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e00d      	b.n	8001540 <LCD_ShowChar+0x1e0>
				else 
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <LCD_ShowChar+0x2fc>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b4b      	ldr	r3, [pc, #300]	; (800165c <LCD_ShowChar+0x2fc>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <LCD_ShowChar+0x2ec>)
 800153e:	801a      	strh	r2, [r3, #0]
				
				write[count][t/2]=POINT_COLOR;
 8001540:	0872      	lsrs	r2, r6, #1
 8001542:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8001546:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461c      	mov	r4, r3
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <LCD_ShowChar+0x2ec>)
 8001552:	8818      	ldrh	r0, [r3, #0]
 8001554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001556:	fb01 f202 	mul.w	r2, r1, r2
 800155a:	4422      	add	r2, r4
 800155c:	4601      	mov	r1, r0
 800155e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 8001562:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001566:	3301      	adds	r3, #1
 8001568:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 800156c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001576:	429a      	cmp	r2, r3
 8001578:	d302      	bcc.n	8001580 <LCD_ShowChar+0x220>
 800157a:	2300      	movs	r3, #0
 800157c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 8001580:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 800158a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800158c:	3301      	adds	r3, #1
 800158e:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001590:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	429a      	cmp	r2, r3
 8001596:	d304      	bcc.n	80015a2 <LCD_ShowChar+0x242>
 8001598:	4a2c      	ldr	r2, [pc, #176]	; (800164c <LCD_ShowChar+0x2ec>)
 800159a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800159e:	8013      	strh	r3, [r2, #0]
 80015a0:	e0e6      	b.n	8001770 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 80015a2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d10e      	bne.n	80015d0 <LCD_ShowChar+0x270>
				{
					y=y0;
 80015b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 80015b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ba:	3301      	adds	r3, #1
 80015bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80015be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d30e      	bcc.n	80015e4 <LCD_ShowChar+0x284>
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <LCD_ShowChar+0x2ec>)
 80015c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015cc:	8013      	strh	r3, [r2, #0]
 80015ce:	e0cf      	b.n	8001770 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 80015d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80015da:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d98d      	bls.n	80014fe <LCD_ShowChar+0x19e>
 80015e2:	e000      	b.n	80015e6 <LCD_ShowChar+0x286>
					break;
 80015e4:	bf00      	nop
		for(t=0;t<size;t++)
 80015e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015ea:	3301      	adds	r3, #1
 80015ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80015f0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80015f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f4ff af5e 	bcc.w	80014ba <LCD_ShowChar+0x15a>
 80015fe:	e09c      	b.n	800173a <LCD_ShowChar+0x3da>
			}
		}
	}
	else//���ӷ�ʽ
	{
		for(t=0;t<size;t++)
 8001600:	2300      	movs	r3, #0
 8001602:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001606:	e091      	b.n	800172c <LCD_ShowChar+0x3cc>
		{   
			if(size==12)temp=asc2_1206[num][t];  //����1206����
 8001608:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d10e      	bne.n	800162e <LCD_ShowChar+0x2ce>
 8001610:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001614:	f897 104d 	ldrb.w	r1, [r7, #77]	; 0x4d
 8001618:	480e      	ldr	r0, [pc, #56]	; (8001654 <LCD_ShowChar+0x2f4>)
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4403      	add	r3, r0
 8001624:	440b      	add	r3, r1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800162c:	e00a      	b.n	8001644 <LCD_ShowChar+0x2e4>
			else temp=asc2_1608[num][t];		 //����1608���� 	                          
 800162e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001632:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <LCD_ShowChar+0x2f8>)
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	440a      	add	r2, r1
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			for(t1=0;t1<8;t1++)
 8001644:	2300      	movs	r3, #0
 8001646:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800164a:	e064      	b.n	8001716 <LCD_ShowChar+0x3b6>
 800164c:	24000028 	.word	0x24000028
 8001650:	24000208 	.word	0x24000208
 8001654:	08009420 	.word	0x08009420
 8001658:	08009894 	.word	0x08009894
 800165c:	24000244 	.word	0x24000244
			{			    
				if(temp&0x80)
 8001660:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001664:	2b00      	cmp	r3, #0
 8001666:	da1a      	bge.n	800169e <LCD_ShowChar+0x33e>
					write[count][t/2]=(POINT_COLOR&0xFF)<<8|POINT_COLOR>>8;
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <LCD_ShowChar+0x41c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <LCD_ShowChar+0x41c>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b218      	sxth	r0, r3
 800167e:	0872      	lsrs	r2, r6, #1
 8001680:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8001684:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461c      	mov	r4, r3
 800168e:	b280      	uxth	r0, r0
 8001690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001692:	fb01 f202 	mul.w	r2, r1, r2
 8001696:	4422      	add	r2, r4
 8001698:	4601      	mov	r1, r0
 800169a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				count ++;
 800169e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016a2:	3301      	adds	r3, #1
 80016a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				if(count >= size) count =0;
 80016a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d302      	bcc.n	80016bc <LCD_ShowChar+0x35c>
 80016b6:	2300      	movs	r3, #0
 80016b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				
				temp<<=1;
 80016bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				y++;
 80016c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016c8:	3301      	adds	r3, #1
 80016ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80016cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d304      	bcc.n	80016de <LCD_ShowChar+0x37e>
 80016d4:	4a29      	ldr	r2, [pc, #164]	; (800177c <LCD_ShowChar+0x41c>)
 80016d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016da:	8013      	strh	r3, [r2, #0]
 80016dc:	e048      	b.n	8001770 <LCD_ShowChar+0x410>
				if((y-y0)==size)
 80016de:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016e4:	1ad2      	subs	r2, r2, r3
 80016e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d10e      	bne.n	800170c <LCD_ShowChar+0x3ac>
				{
					y=y0;
 80016ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
					x++;
 80016f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f6:	3301      	adds	r3, #1
 80016f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80016fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fe:	429a      	cmp	r2, r3
 8001700:	d30e      	bcc.n	8001720 <LCD_ShowChar+0x3c0>
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <LCD_ShowChar+0x41c>)
 8001704:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001708:	8013      	strh	r3, [r2, #0]
 800170a:	e031      	b.n	8001770 <LCD_ShowChar+0x410>
			for(t1=0;t1<8;t1++)
 800170c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001710:	3301      	adds	r3, #1
 8001712:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001716:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800171a:	2b07      	cmp	r3, #7
 800171c:	d9a0      	bls.n	8001660 <LCD_ShowChar+0x300>
 800171e:	e000      	b.n	8001722 <LCD_ShowChar+0x3c2>
					break;
 8001720:	bf00      	nop
		for(t=0;t<size;t++)
 8001722:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001726:	3301      	adds	r3, #1
 8001728:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800172c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001730:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001734:	429a      	cmp	r2, r3
 8001736:	f4ff af67 	bcc.w	8001608 <LCD_ShowChar+0x2a8>
				}
			}  	 
		}     
	}
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 800173a:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800173e:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
 8001742:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d101      	bne.n	800174e <LCD_ShowChar+0x3ee>
 800174a:	2306      	movs	r3, #6
 800174c:	e000      	b.n	8001750 <LCD_ShowChar+0x3f0>
 800174e:	2308      	movs	r3, #8
 8001750:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175a:	4602      	mov	r2, r0
 800175c:	4808      	ldr	r0, [pc, #32]	; (8001780 <LCD_ShowChar+0x420>)
 800175e:	f001 f90d 	bl	800297c <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <LCD_ShowChar+0x41c>)
 8001764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001768:	8013      	strh	r3, [r2, #0]
 800176a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 800176e:	e001      	b.n	8001774 <LCD_ShowChar+0x414>
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001770:	f8d7 d004 	ldr.w	sp, [r7, #4]
}   
 8001774:	3754      	adds	r7, #84	; 0x54
 8001776:	46bd      	mov	sp, r7
 8001778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177c:	24000028 	.word	0x24000028
 8001780:	24000208 	.word	0x24000208

08001784 <LCD_ShowString>:
//x,y:�������
//width,height:�����С  
//size:�����С
//*p:�ַ�����ʼ��ַ
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{         
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b087      	sub	sp, #28
 8001788:	af02      	add	r7, sp, #8
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	4603      	mov	r3, r0
 8001798:	80bb      	strh	r3, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]
 800179e:	4613      	mov	r3, r2
 80017a0:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	4413      	add	r3, r2
 80017ac:	807b      	strh	r3, [r7, #2]
	height+=y;
 80017ae:	883a      	ldrh	r2, [r7, #0]
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80017b6:	e024      	b.n	8001802 <LCD_ShowString+0x7e>
    {       
        if(x>=width){x=x0;y+=size;}
 80017b8:	88fa      	ldrh	r2, [r7, #6]
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d307      	bcc.n	80017d0 <LCD_ShowString+0x4c>
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//�˳�
 80017d0:	88ba      	ldrh	r2, [r7, #4]
 80017d2:	883b      	ldrh	r3, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d21d      	bcs.n	8001814 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017e0:	88b9      	ldrh	r1, [r7, #4]
 80017e2:	88f8      	ldrh	r0, [r7, #6]
 80017e4:	2400      	movs	r4, #0
 80017e6:	9400      	str	r4, [sp, #0]
 80017e8:	f7ff fdba 	bl	8001360 <LCD_ShowChar>
        x+=size/2;
 80017ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4413      	add	r3, r2
 80017fa:	80fb      	strh	r3, [r7, #6]
        p++;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	3301      	adds	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b7e      	cmp	r3, #126	; 0x7e
 8001808:	d805      	bhi.n	8001816 <LCD_ShowString+0x92>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b1f      	cmp	r3, #31
 8001810:	d8d2      	bhi.n	80017b8 <LCD_ShowString+0x34>
    }  
}
 8001812:	e000      	b.n	8001816 <LCD_ShowString+0x92>
        if(y>=height)break;//�˳�
 8001814:	bf00      	nop
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
	...

08001820 <lcd_init>:

static int32_t lcd_init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	int32_t result = ST7735_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800182a:	2104      	movs	r1, #4
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <lcd_init+0x1c>)
 800182e:	f006 f947 	bl	8007ac0 <HAL_TIMEx_PWMN_Start>
	return result;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	240001bc 	.word	0x240001bc

08001840 <lcd_gettick>:

static int32_t lcd_gettick(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001844:	f001 fcaa 	bl	800319c <HAL_GetTick>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <lcd_writereg>:

static int32_t lcd_writereg(uint8_t reg,uint8_t* pdata,uint32_t length)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	73fb      	strb	r3, [r7, #15]
	int32_t result;
	LCD_CS_RESET;
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001864:	481d      	ldr	r0, [pc, #116]	; (80018dc <lcd_writereg+0x8c>)
 8001866:	f002 f80b 	bl	8003880 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001870:	481a      	ldr	r0, [pc, #104]	; (80018dc <lcd_writereg+0x8c>)
 8001872:	f002 f805 	bl	8003880 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001876:	f107 010f 	add.w	r1, r7, #15
 800187a:	2364      	movs	r3, #100	; 0x64
 800187c:	2201      	movs	r2, #1
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <lcd_writereg+0x90>)
 8001880:	f004 ffce 	bl	8006820 <HAL_SPI_Transmit>
 8001884:	4603      	mov	r3, r0
 8001886:	617b      	str	r3, [r7, #20]
	LCD_RS_SET;
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188e:	4813      	ldr	r0, [pc, #76]	; (80018dc <lcd_writereg+0x8c>)
 8001890:	f001 fff6 	bl	8003880 <HAL_GPIO_WritePin>
	if(length > 0)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <lcd_writereg+0x64>
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <lcd_writereg+0x90>)
 80018a6:	f004 ffbb 	bl	8006820 <HAL_SPI_Transmit>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
	LCD_CS_SET;
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <lcd_writereg+0x8c>)
 80018bc:	f001 ffe0 	bl	8003880 <HAL_GPIO_WritePin>
	if(result>0){
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dd03      	ble.n	80018ce <lcd_writereg+0x7e>
		result = -1;}
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e001      	b.n	80018d2 <lcd_writereg+0x82>
	else{
		result = 0;}
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
	return result;
 80018d2:	697b      	ldr	r3, [r7, #20]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	58021000 	.word	0x58021000
 80018e0:	24000130 	.word	0x24000130

080018e4 <lcd_readreg>:

static int32_t lcd_readreg(uint8_t reg,uint8_t* pdata)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
	int32_t result;
	LCD_CS_RESET;
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f6:	481b      	ldr	r0, [pc, #108]	; (8001964 <lcd_readreg+0x80>)
 80018f8:	f001 ffc2 	bl	8003880 <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001902:	4818      	ldr	r0, [pc, #96]	; (8001964 <lcd_readreg+0x80>)
 8001904:	f001 ffbc 	bl	8003880 <HAL_GPIO_WritePin>
	
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 8001908:	1df9      	adds	r1, r7, #7
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	2201      	movs	r2, #1
 800190e:	4816      	ldr	r0, [pc, #88]	; (8001968 <lcd_readreg+0x84>)
 8001910:	f004 ff86 	bl	8006820 <HAL_SPI_Transmit>
 8001914:	4603      	mov	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]
	LCD_RS_SET;
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <lcd_readreg+0x80>)
 8001920:	f001 ffae 	bl	8003880 <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8001924:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001928:	2201      	movs	r2, #1
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	480e      	ldr	r0, [pc, #56]	; (8001968 <lcd_readreg+0x84>)
 800192e:	f005 f973 	bl	8006c18 <HAL_SPI_Receive>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001942:	4808      	ldr	r0, [pc, #32]	; (8001964 <lcd_readreg+0x80>)
 8001944:	f001 ff9c 	bl	8003880 <HAL_GPIO_WritePin>
	if(result>0){
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd03      	ble.n	8001956 <lcd_readreg+0x72>
		result = -1;}
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e001      	b.n	800195a <lcd_readreg+0x76>
	else{
		result = 0;}
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
	return result;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	58021000 	.word	0x58021000
 8001968:	24000130 	.word	0x24000130

0800196c <lcd_senddata>:

static int32_t lcd_senddata(uint8_t* pdata,uint32_t length)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <lcd_senddata+0x50>)
 800197e:	f001 ff7f 	bl	8003880 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <lcd_senddata+0x54>)
 800198c:	f004 ff48 	bl	8006820 <HAL_SPI_Transmit>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <lcd_senddata+0x50>)
 800199c:	f001 ff70 	bl	8003880 <HAL_GPIO_WritePin>
	if(result>0){
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dd03      	ble.n	80019ae <lcd_senddata+0x42>
		result = -1;}
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e001      	b.n	80019b2 <lcd_senddata+0x46>
	else{
		result = 0;}
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
	return result;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58021000 	.word	0x58021000
 80019c0:	24000130 	.word	0x24000130

080019c4 <lcd_recvdata>:

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
	int32_t result;
	LCD_CS_RESET;
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d4:	4810      	ldr	r0, [pc, #64]	; (8001a18 <lcd_recvdata+0x54>)
 80019d6:	f001 ff53 	bl	8003880 <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <lcd_recvdata+0x58>)
 80019e6:	f005 f917 	bl	8006c18 <HAL_SPI_Receive>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]
	LCD_CS_SET;
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <lcd_recvdata+0x54>)
 80019f6:	f001 ff43 	bl	8003880 <HAL_GPIO_WritePin>
	if(result>0){
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd03      	ble.n	8001a08 <lcd_recvdata+0x44>
		result = -1;}
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e001      	b.n	8001a0c <lcd_recvdata+0x48>
	else{
		result = 0;}
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
	return result;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58021000 	.word	0x58021000
 8001a1c:	24000130 	.word	0x24000130

08001a20 <ST7735_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7735_RegisterBusIO (ST7735_Object_t *pObj, ST7735_IO_t *pIO)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d103      	bne.n	8001a38 <ST7735_RegisterBusIO+0x18>
  {
    ret = ST7735_ERROR;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e03a      	b.n	8001aae <ST7735_RegisterBusIO+0x8e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	891a      	ldrh	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData  = pIO->SendData;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvData  = pIO->RecvData;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	61da      	str	r2, [r3, #28]

    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <ST7735_RegisterBusIO+0x98>)
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <ST7735_RegisterBusIO+0x9c>)
 8001a82:	621a      	str	r2, [r3, #32]
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <ST7735_RegisterBusIO+0xa0>)
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <ST7735_RegisterBusIO+0xa4>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.handle    = pObj;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30

    if(pObj->IO.Init != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <ST7735_RegisterBusIO+0x88>
    {
      ret = pObj->IO.Init();
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4798      	blx	r3
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	e002      	b.n	8001aae <ST7735_RegisterBusIO+0x8e>
    }
    else
    {
      ret = ST7735_ERROR;
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	08002f29 	.word	0x08002f29
 8001abc:	08002f51 	.word	0x08002f51
 8001ac0:	08002f7b 	.word	0x08002f7b
 8001ac4:	08002f9f 	.word	0x08002f9f

08001ac8 <ST7735_Init>:
  * @param  ColorCoding RGB mode
  * @param  Orientation Display orientation
  * @retval Component status
  */
int32_t ST7735_Init(ST7735_Object_t *pObj, uint32_t ColorCoding, ST7735_Ctx_t *pDriver)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  if(pObj == NULL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <ST7735_Init+0x1a>
  {
    ret = ST7735_ERROR;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e3a6      	b.n	8002230 <ST7735_Init+0x768>
  }
  else
  {
		/* Out of sleep mode, 0 args, delay 120ms */
    tmp = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f103 0020 	add.w	r0, r3, #32
 8001aec:	f107 0213 	add.w	r2, r7, #19
 8001af0:	2300      	movs	r3, #0
 8001af2:	2101      	movs	r1, #1
 8001af4:	f001 fa92 	bl	800301c <st7735_write_reg>
 8001af8:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001afa:	2178      	movs	r1, #120	; 0x78
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f001 fa60 	bl	8002fc2 <ST7735_IO_Delay>
		
		tmp = 0x00U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	74fb      	strb	r3, [r7, #19]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f103 0020 	add.w	r0, r3, #32
 8001b0c:	f107 0213 	add.w	r2, r7, #19
 8001b10:	2300      	movs	r3, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	f001 fa82 	bl	800301c <st7735_write_reg>
 8001b18:	6178      	str	r0, [r7, #20]
		(void)ST7735_IO_Delay(pObj, 120);
 8001b1a:	2178      	movs	r1, #120	; 0x78
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f001 fa50 	bl	8002fc2 <ST7735_IO_Delay>
		
    /* Out of sleep mode, 0 args, no delay */
    tmp = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f103 0020 	add.w	r0, r3, #32
 8001b2c:	f107 0213 	add.w	r2, r7, #19
 8001b30:	2301      	movs	r3, #1
 8001b32:	2111      	movs	r1, #17
 8001b34:	f001 fa72 	bl	800301c <st7735_write_reg>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
    
		/* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f103 0020 	add.w	r0, r3, #32
 8001b46:	f107 0213 	add.w	r2, r7, #19
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	21b1      	movs	r1, #177	; 0xb1
 8001b4e:	f001 fa65 	bl	800301c <st7735_write_reg>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	4413      	add	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3320      	adds	r3, #32
 8001b62:	f107 0113 	add.w	r1, r7, #19
 8001b66:	2201      	movs	r2, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 fa6c 	bl	8003046 <st7735_send_data>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001b76:	232c      	movs	r3, #44	; 0x2c
 8001b78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3320      	adds	r3, #32
 8001b7e:	f107 0113 	add.w	r1, r7, #19
 8001b82:	2201      	movs	r2, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fa5e 	bl	8003046 <st7735_send_data>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	4413      	add	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001b92:	232d      	movs	r3, #45	; 0x2d
 8001b94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3320      	adds	r3, #32
 8001b9a:	f107 0113 	add.w	r1, r7, #19
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fa50 	bl	8003046 <st7735_send_data>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	4413      	add	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]

    /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */
    tmp = 0x01U;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f103 0020 	add.w	r0, r3, #32
 8001bb8:	f107 0213 	add.w	r2, r7, #19
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	21b2      	movs	r1, #178	; 0xb2
 8001bc0:	f001 fa2c 	bl	800301c <st7735_write_reg>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001bcc:	232c      	movs	r3, #44	; 0x2c
 8001bce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	f107 0113 	add.w	r1, r7, #19
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fa33 	bl	8003046 <st7735_send_data>
 8001be0:	4602      	mov	r2, r0
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001be8:	232d      	movs	r3, #45	; 0x2d
 8001bea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3320      	adds	r3, #32
 8001bf0:	f107 0113 	add.w	r1, r7, #19
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 fa25 	bl	8003046 <st7735_send_data>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

    /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */
    tmp = 0x01U;
 8001c04:	2301      	movs	r3, #1
 8001c06:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f103 0020 	add.w	r0, r3, #32
 8001c0e:	f107 0213 	add.w	r2, r7, #19
 8001c12:	2301      	movs	r3, #1
 8001c14:	21b3      	movs	r1, #179	; 0xb3
 8001c16:	f001 fa01 	bl	800301c <st7735_write_reg>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	4413      	add	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c22:	232c      	movs	r3, #44	; 0x2c
 8001c24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3320      	adds	r3, #32
 8001c2a:	f107 0113 	add.w	r1, r7, #19
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f001 fa08 	bl	8003046 <st7735_send_data>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c3e:	232d      	movs	r3, #45	; 0x2d
 8001c40:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3320      	adds	r3, #32
 8001c46:	f107 0113 	add.w	r1, r7, #19
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 f9fa 	bl	8003046 <st7735_send_data>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3320      	adds	r3, #32
 8001c62:	f107 0113 	add.w	r1, r7, #19
 8001c66:	2201      	movs	r2, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f9ec 	bl	8003046 <st7735_send_data>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	4413      	add	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 8001c76:	232c      	movs	r3, #44	; 0x2c
 8001c78:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3320      	adds	r3, #32
 8001c7e:	f107 0113 	add.w	r1, r7, #19
 8001c82:	2201      	movs	r2, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f9de 	bl	8003046 <st7735_send_data>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4413      	add	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001c92:	232d      	movs	r3, #45	; 0x2d
 8001c94:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3320      	adds	r3, #32
 8001c9a:	f107 0113 	add.w	r1, r7, #19
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 f9d0 	bl	8003046 <st7735_send_data>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

    /* Display inversion ctrl, 1 arg, no delay: No inversion */
    tmp = 0x07U;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f103 0020 	add.w	r0, r3, #32
 8001cb8:	f107 0213 	add.w	r2, r7, #19
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	21b4      	movs	r1, #180	; 0xb4
 8001cc0:	f001 f9ac 	bl	800301c <st7735_write_reg>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

    /* Power control, 3 args, no delay: -4.6V , AUTO mode */
    tmp = 0xA2U;
 8001ccc:	23a2      	movs	r3, #162	; 0xa2
 8001cce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f103 0020 	add.w	r0, r3, #32
 8001cd6:	f107 0213 	add.w	r2, r7, #19
 8001cda:	2301      	movs	r3, #1
 8001cdc:	21c0      	movs	r1, #192	; 0xc0
 8001cde:	f001 f99d 	bl	800301c <st7735_write_reg>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 8001cea:	2302      	movs	r3, #2
 8001cec:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3320      	adds	r3, #32
 8001cf2:	f107 0113 	add.w	r1, r7, #19
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f9a4 	bl	8003046 <st7735_send_data>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
    tmp = 0x84U;
 8001d06:	2384      	movs	r3, #132	; 0x84
 8001d08:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3320      	adds	r3, #32
 8001d0e:	f107 0113 	add.w	r1, r7, #19
 8001d12:	2201      	movs	r2, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 f996 	bl	8003046 <st7735_send_data>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4413      	add	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
    tmp = 0xC5U;
 8001d22:	23c5      	movs	r3, #197	; 0xc5
 8001d24:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f103 0020 	add.w	r0, r3, #32
 8001d2c:	f107 0213 	add.w	r2, r7, #19
 8001d30:	2301      	movs	r3, #1
 8001d32:	21c1      	movs	r1, #193	; 0xc1
 8001d34:	f001 f972 	bl	800301c <st7735_write_reg>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: Opamp current small, Boost frequency */
    tmp = 0x0AU;
 8001d40:	230a      	movs	r3, #10
 8001d42:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f103 0020 	add.w	r0, r3, #32
 8001d4a:	f107 0213 	add.w	r2, r7, #19
 8001d4e:	2301      	movs	r3, #1
 8001d50:	21c2      	movs	r1, #194	; 0xc2
 8001d52:	f001 f963 	bl	800301c <st7735_write_reg>
 8001d56:	4602      	mov	r2, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3320      	adds	r3, #32
 8001d66:	f107 0113 	add.w	r1, r7, #19
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 f96a 	bl	8003046 <st7735_send_data>
 8001d72:	4602      	mov	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4413      	add	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */
    tmp = 0x8AU;
 8001d7a:	238a      	movs	r3, #138	; 0x8a
 8001d7c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f103 0020 	add.w	r0, r3, #32
 8001d84:	f107 0213 	add.w	r2, r7, #19
 8001d88:	2301      	movs	r3, #1
 8001d8a:	21c3      	movs	r1, #195	; 0xc3
 8001d8c:	f001 f946 	bl	800301c <st7735_write_reg>
 8001d90:	4602      	mov	r2, r0
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4413      	add	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
    tmp = 0x2AU;
 8001d98:	232a      	movs	r3, #42	; 0x2a
 8001d9a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3320      	adds	r3, #32
 8001da0:	f107 0113 	add.w	r1, r7, #19
 8001da4:	2201      	movs	r2, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 f94d 	bl	8003046 <st7735_send_data>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

    /* Power control, 2 args, no delay */
    tmp = 0x8AU;
 8001db4:	238a      	movs	r3, #138	; 0x8a
 8001db6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f103 0020 	add.w	r0, r3, #32
 8001dbe:	f107 0213 	add.w	r2, r7, #19
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	21c4      	movs	r1, #196	; 0xc4
 8001dc6:	f001 f929 	bl	800301c <st7735_write_reg>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
    tmp = 0xEEU;
 8001dd2:	23ee      	movs	r3, #238	; 0xee
 8001dd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3320      	adds	r3, #32
 8001dda:	f107 0113 	add.w	r1, r7, #19
 8001dde:	2201      	movs	r2, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 f930 	bl	8003046 <st7735_send_data>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4413      	add	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

    /* Power control, 1 arg, no delay */
    tmp = 0x0EU;
 8001dee:	230e      	movs	r3, #14
 8001df0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f103 0020 	add.w	r0, r3, #32
 8001df8:	f107 0213 	add.w	r2, r7, #19
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	21c5      	movs	r1, #197	; 0xc5
 8001e00:	f001 f90c 	bl	800301c <st7735_write_reg>
 8001e04:	4602      	mov	r2, r0
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

		/* choose panel*/
		if (pDriver->Panel == HannStar_Panel) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <ST7735_Init+0x368>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f103 0020 	add.w	r0, r3, #32
 8001e1a:	f107 0213 	add.w	r2, r7, #19
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2121      	movs	r1, #33	; 0x21
 8001e22:	f001 f8fb 	bl	800301c <st7735_write_reg>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e00c      	b.n	8001e4a <ST7735_Init+0x382>
		} else {
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f103 0020 	add.w	r0, r3, #32
 8001e36:	f107 0213 	add.w	r2, r7, #19
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	f001 f8ed 	bl	800301c <st7735_write_reg>
 8001e42:	4602      	mov	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
		}
    /* Set color mode, 1 arg, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f103 0020 	add.w	r0, r3, #32
 8001e50:	f107 0208 	add.w	r2, r7, #8
 8001e54:	2301      	movs	r3, #1
 8001e56:	213a      	movs	r1, #58	; 0x3a
 8001e58:	f001 f8e0 	bl	800301c <st7735_write_reg>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	4413      	add	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]

    /* Magical unicorn dust, 16 args, no delay */
    tmp = 0x02U;
 8001e64:	2302      	movs	r3, #2
 8001e66:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f103 0020 	add.w	r0, r3, #32
 8001e6e:	f107 0213 	add.w	r2, r7, #19
 8001e72:	2301      	movs	r3, #1
 8001e74:	21e0      	movs	r1, #224	; 0xe0
 8001e76:	f001 f8d1 	bl	800301c <st7735_write_reg>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
    tmp = 0x1CU;
 8001e82:	231c      	movs	r3, #28
 8001e84:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3320      	adds	r3, #32
 8001e8a:	f107 0113 	add.w	r1, r7, #19
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 f8d8 	bl	8003046 <st7735_send_data>
 8001e96:	4602      	mov	r2, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3320      	adds	r3, #32
 8001ea6:	f107 0113 	add.w	r1, r7, #19
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 f8ca 	bl	8003046 <st7735_send_data>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
    tmp = 0x12U;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	f107 0113 	add.w	r1, r7, #19
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 f8bc 	bl	8003046 <st7735_send_data>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8001ed6:	2337      	movs	r3, #55	; 0x37
 8001ed8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3320      	adds	r3, #32
 8001ede:	f107 0113 	add.w	r1, r7, #19
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 f8ae 	bl	8003046 <st7735_send_data>
 8001eea:	4602      	mov	r2, r0
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4413      	add	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
    tmp = 0x32U;
 8001ef2:	2332      	movs	r3, #50	; 0x32
 8001ef4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3320      	adds	r3, #32
 8001efa:	f107 0113 	add.w	r1, r7, #19
 8001efe:	2201      	movs	r2, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 f8a0 	bl	8003046 <st7735_send_data>
 8001f06:	4602      	mov	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001f0e:	2329      	movs	r3, #41	; 0x29
 8001f10:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3320      	adds	r3, #32
 8001f16:	f107 0113 	add.w	r1, r7, #19
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f892 	bl	8003046 <st7735_send_data>
 8001f22:	4602      	mov	r2, r0
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 8001f2a:	232d      	movs	r3, #45	; 0x2d
 8001f2c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3320      	adds	r3, #32
 8001f32:	f107 0113 	add.w	r1, r7, #19
 8001f36:	2201      	movs	r2, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 f884 	bl	8003046 <st7735_send_data>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 8001f46:	2329      	movs	r3, #41	; 0x29
 8001f48:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	f107 0113 	add.w	r1, r7, #19
 8001f52:	2201      	movs	r2, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f876 	bl	8003046 <st7735_send_data>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
    tmp = 0x25U;
 8001f62:	2325      	movs	r3, #37	; 0x25
 8001f64:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3320      	adds	r3, #32
 8001f6a:	f107 0113 	add.w	r1, r7, #19
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 f868 	bl	8003046 <st7735_send_data>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]
    tmp = 0x2BU;
 8001f7e:	232b      	movs	r3, #43	; 0x2b
 8001f80:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3320      	adds	r3, #32
 8001f86:	f107 0113 	add.w	r1, r7, #19
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f001 f85a 	bl	8003046 <st7735_send_data>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
    tmp = 0x39U;
 8001f9a:	2339      	movs	r3, #57	; 0x39
 8001f9c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3320      	adds	r3, #32
 8001fa2:	f107 0113 	add.w	r1, r7, #19
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f84c 	bl	8003046 <st7735_send_data>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3320      	adds	r3, #32
 8001fbe:	f107 0113 	add.w	r1, r7, #19
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f001 f83e 	bl	8003046 <st7735_send_data>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
    tmp = 0x01U;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3320      	adds	r3, #32
 8001fda:	f107 0113 	add.w	r1, r7, #19
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 f830 	bl	8003046 <st7735_send_data>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4413      	add	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
    tmp = 0x03U;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	f107 0113 	add.w	r1, r7, #19
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 f822 	bl	8003046 <st7735_send_data>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4413      	add	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 800200a:	2310      	movs	r3, #16
 800200c:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3320      	adds	r3, #32
 8002012:	f107 0113 	add.w	r1, r7, #19
 8002016:	2201      	movs	r2, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f001 f814 	bl	8003046 <st7735_send_data>
 800201e:	4602      	mov	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]

    /* Sparkles and rainbows, 16 args, no delay */
    tmp = 0x03U;
 8002026:	2303      	movs	r3, #3
 8002028:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f103 0020 	add.w	r0, r3, #32
 8002030:	f107 0213 	add.w	r2, r7, #19
 8002034:	2301      	movs	r3, #1
 8002036:	21e1      	movs	r1, #225	; 0xe1
 8002038:	f000 fff0 	bl	800301c <st7735_write_reg>
 800203c:	4602      	mov	r2, r0
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4413      	add	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
    tmp = 0x1DU;
 8002044:	231d      	movs	r3, #29
 8002046:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3320      	adds	r3, #32
 800204c:	f107 0113 	add.w	r1, r7, #19
 8002050:	2201      	movs	r2, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fff7 	bl	8003046 <st7735_send_data>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
    tmp = 0x07U;
 8002060:	2307      	movs	r3, #7
 8002062:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3320      	adds	r3, #32
 8002068:	f107 0113 	add.w	r1, r7, #19
 800206c:	2201      	movs	r2, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f000 ffe9 	bl	8003046 <st7735_send_data>
 8002074:	4602      	mov	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	4413      	add	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
    tmp = 0x06U;
 800207c:	2306      	movs	r3, #6
 800207e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3320      	adds	r3, #32
 8002084:	f107 0113 	add.w	r1, r7, #19
 8002088:	2201      	movs	r2, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f000 ffdb 	bl	8003046 <st7735_send_data>
 8002090:	4602      	mov	r2, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4413      	add	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002098:	232e      	movs	r3, #46	; 0x2e
 800209a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3320      	adds	r3, #32
 80020a0:	f107 0113 	add.w	r1, r7, #19
 80020a4:	2201      	movs	r2, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 ffcd 	bl	8003046 <st7735_send_data>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4413      	add	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
    tmp = 0x2CU;
 80020b4:	232c      	movs	r3, #44	; 0x2c
 80020b6:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3320      	adds	r3, #32
 80020bc:	f107 0113 	add.w	r1, r7, #19
 80020c0:	2201      	movs	r2, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 ffbf 	bl	8003046 <st7735_send_data>
 80020c8:	4602      	mov	r2, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4413      	add	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
    tmp = 0x29U;
 80020d0:	2329      	movs	r3, #41	; 0x29
 80020d2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3320      	adds	r3, #32
 80020d8:	f107 0113 	add.w	r1, r7, #19
 80020dc:	2201      	movs	r2, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ffb1 	bl	8003046 <st7735_send_data>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4413      	add	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    tmp = 0x2DU;
 80020ec:	232d      	movs	r3, #45	; 0x2d
 80020ee:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3320      	adds	r3, #32
 80020f4:	f107 0113 	add.w	r1, r7, #19
 80020f8:	2201      	movs	r2, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 ffa3 	bl	8003046 <st7735_send_data>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002108:	232e      	movs	r3, #46	; 0x2e
 800210a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3320      	adds	r3, #32
 8002110:	f107 0113 	add.w	r1, r7, #19
 8002114:	2201      	movs	r2, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f000 ff95 	bl	8003046 <st7735_send_data>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
    tmp = 0x2EU;
 8002124:	232e      	movs	r3, #46	; 0x2e
 8002126:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3320      	adds	r3, #32
 800212c:	f107 0113 	add.w	r1, r7, #19
 8002130:	2201      	movs	r2, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f000 ff87 	bl	8003046 <st7735_send_data>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	4413      	add	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    tmp = 0x37U;
 8002140:	2337      	movs	r3, #55	; 0x37
 8002142:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3320      	adds	r3, #32
 8002148:	f107 0113 	add.w	r1, r7, #19
 800214c:	2201      	movs	r2, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f000 ff79 	bl	8003046 <st7735_send_data>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
    tmp = 0x3FU;
 800215c:	233f      	movs	r3, #63	; 0x3f
 800215e:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3320      	adds	r3, #32
 8002164:	f107 0113 	add.w	r1, r7, #19
 8002168:	2201      	movs	r2, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f000 ff6b 	bl	8003046 <st7735_send_data>
 8002170:	4602      	mov	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3320      	adds	r3, #32
 8002180:	f107 0113 	add.w	r1, r7, #19
 8002184:	2201      	movs	r2, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f000 ff5d 	bl	8003046 <st7735_send_data>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4413      	add	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    tmp = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3320      	adds	r3, #32
 800219c:	f107 0113 	add.w	r1, r7, #19
 80021a0:	2201      	movs	r2, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 ff4f 	bl	8003046 <st7735_send_data>
 80021a8:	4602      	mov	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4413      	add	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
    tmp = 0x02U;
 80021b0:	2302      	movs	r3, #2
 80021b2:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3320      	adds	r3, #32
 80021b8:	f107 0113 	add.w	r1, r7, #19
 80021bc:	2201      	movs	r2, #1
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 ff41 	bl	8003046 <st7735_send_data>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4413      	add	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    tmp = 0x10U;
 80021cc:	2310      	movs	r3, #16
 80021ce:	74fb      	strb	r3, [r7, #19]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3320      	adds	r3, #32
 80021d4:	f107 0113 	add.w	r1, r7, #19
 80021d8:	2201      	movs	r2, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 ff33 	bl	8003046 <st7735_send_data>
 80021e0:	4602      	mov	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

    /* Normal display on, no args, no delay */
    tmp  = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	74fb      	strb	r3, [r7, #19]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f103 0020 	add.w	r0, r3, #32
 80021f2:	f107 0213 	add.w	r2, r7, #19
 80021f6:	2301      	movs	r3, #1
 80021f8:	2113      	movs	r1, #19
 80021fa:	f000 ff0f 	bl	800301c <st7735_write_reg>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4413      	add	r3, r2
 8002204:	617b      	str	r3, [r7, #20]

    /* Main screen turn on, no delay */
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f103 0020 	add.w	r0, r3, #32
 800220c:	f107 0213 	add.w	r2, r7, #19
 8002210:	2301      	movs	r3, #1
 8002212:	2129      	movs	r1, #41	; 0x29
 8002214:	f000 ff02 	bl	800301c <st7735_write_reg>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

    /* Set the display Orientation and the default display window */
    ret += ST7735_SetOrientation(pObj, pDriver);
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f944 	bl	80024b0 <ST7735_SetOrientation>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  }

  if(ret != ST7735_OK)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <ST7735_Init+0x774>
  {
    ret = ST7735_ERROR;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800223c:	697b      	ldr	r3, [r7, #20]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <ST7735_DeInit>:
  * @brief  De-Initialize the st7735 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)(pObj);

  return ST7735_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <ST7735_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7735_ReadID(ST7735_Object_t *pObj, uint32_t *Id)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp[3];

  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3320      	adds	r3, #32
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	21da      	movs	r1, #218	; 0xda
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fec0 	bl	8002ff6 <st7735_read_reg>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <ST7735_ReadID+0x28>
  {
    ret = ST7735_ERROR;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e02d      	b.n	80022e0 <ST7735_ReadID+0x84>
  }
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0020 	add.w	r0, r3, #32
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	3301      	adds	r3, #1
 8002290:	461a      	mov	r2, r3
 8002292:	21db      	movs	r1, #219	; 0xdb
 8002294:	f000 feaf 	bl	8002ff6 <st7735_read_reg>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <ST7735_ReadID+0x4a>
  {
    ret = ST7735_ERROR;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e01c      	b.n	80022e0 <ST7735_ReadID+0x84>
  }	
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0020 	add.w	r0, r3, #32
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	3302      	adds	r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	21dc      	movs	r1, #220	; 0xdc
 80022b6:	f000 fe9e 	bl	8002ff6 <st7735_read_reg>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <ST7735_ReadID+0x6c>
  {
    ret = ST7735_ERROR;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e00b      	b.n	80022e0 <ST7735_ReadID+0x84>
  }	
  else
  {
		
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 80022c8:	7abb      	ldrb	r3, [r7, #10]
 80022ca:	461a      	mov	r2, r3
 80022cc:	7a7b      	ldrb	r3, [r7, #9]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	431a      	orrs	r2, r3
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	601a      	str	r2, [r3, #0]
		//*Id = __rbit(*Id);
    ret = ST7735_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <ST7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOn(ST7735_Object_t *pObj)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0020 	add.w	r0, r3, #32
 80022fe:	f107 020b 	add.w	r2, r7, #11
 8002302:	2300      	movs	r3, #0
 8002304:	2113      	movs	r1, #19
 8002306:	f000 fe89 	bl	800301c <st7735_write_reg>
 800230a:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800230c:	210a      	movs	r1, #10
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fe57 	bl	8002fc2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0020 	add.w	r0, r3, #32
 800231a:	f107 020b 	add.w	r2, r7, #11
 800231e:	2300      	movs	r3, #0
 8002320:	2129      	movs	r1, #41	; 0x29
 8002322:	f000 fe7b 	bl	800301c <st7735_write_reg>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 800232e:	210a      	movs	r1, #10
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fe46 	bl	8002fc2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0020 	add.w	r0, r3, #32
 800233c:	f107 020b 	add.w	r2, r7, #11
 8002340:	2300      	movs	r3, #0
 8002342:	2136      	movs	r1, #54	; 0x36
 8002344:	f000 fe6a 	bl	800301c <st7735_write_reg>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <ST7735_DisplayOn+0xc0>)
 8002352:	7b1b      	ldrb	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <ST7735_DisplayOn+0x82>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <ST7735_DisplayOn+0xc0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <ST7735_DisplayOn+0xc4>)
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	b2db      	uxtb	r3, r3
 800236c:	e006      	b.n	800237c <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <ST7735_DisplayOn+0xc0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <ST7735_DisplayOn+0xc4>)
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800237a:	b2db      	uxtb	r3, r3
 800237c:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3320      	adds	r3, #32
 8002382:	f107 010b 	add.w	r1, r7, #11
 8002386:	2201      	movs	r2, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe5c 	bl	8003046 <st7735_send_data>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <ST7735_DisplayOn+0xb6>
  {
    ret = ST7735_ERROR;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	24000248 	.word	0x24000248
 80023b0:	24000078 	.word	0x24000078

080023b4 <ST7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7735_DisplayOff(ST7735_Object_t *pObj)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t tmp = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	72fb      	strb	r3, [r7, #11]

  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0020 	add.w	r0, r3, #32
 80023c6:	f107 020b 	add.w	r2, r7, #11
 80023ca:	2300      	movs	r3, #0
 80023cc:	2113      	movs	r1, #19
 80023ce:	f000 fe25 	bl	800301c <st7735_write_reg>
 80023d2:	60f8      	str	r0, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023d4:	210a      	movs	r1, #10
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fdf3 	bl	8002fc2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0020 	add.w	r0, r3, #32
 80023e2:	f107 020b 	add.w	r2, r7, #11
 80023e6:	2300      	movs	r3, #0
 80023e8:	2128      	movs	r1, #40	; 0x28
 80023ea:	f000 fe17 	bl	800301c <st7735_write_reg>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  (void)ST7735_IO_Delay(pObj, 10);
 80023f6:	210a      	movs	r1, #10
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fde2 	bl	8002fc2 <ST7735_IO_Delay>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f103 0020 	add.w	r0, r3, #32
 8002404:	f107 020b 	add.w	r2, r7, #11
 8002408:	2300      	movs	r3, #0
 800240a:	2136      	movs	r1, #54	; 0x36
 800240c:	f000 fe06 	bl	800301c <st7735_write_reg>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <ST7735_DisplayOff+0xc0>)
 800241a:	7b1b      	ldrb	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <ST7735_DisplayOff+0x82>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <ST7735_DisplayOff+0xc0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <ST7735_DisplayOff+0xc4>)
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	b2db      	uxtb	r3, r3
 8002434:	e006      	b.n	8002444 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <ST7735_DisplayOff+0xc0>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <ST7735_DisplayOff+0xc4>)
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002442:	b2db      	uxtb	r3, r3
 8002444:	72fb      	strb	r3, [r7, #11]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3320      	adds	r3, #32
 800244a:	f107 010b 	add.w	r1, r7, #11
 800244e:	2201      	movs	r2, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fdf8 	bl	8003046 <st7735_send_data>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  if(ret != ST7735_OK)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <ST7735_DisplayOff+0xb6>
  {
    ret = ST7735_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	24000248 	.word	0x24000248
 8002478:	24000078 	.word	0x24000078

0800247c <ST7735_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t ST7735_SetBrightness(ST7735_Object_t *pObj, uint32_t Brightness)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <ST7735_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t ST7735_GetBrightness(ST7735_Object_t *pObj, uint32_t *Brightness)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <ST7735_SetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_PORTRAIT_ROT180
  *                     ST7735_ORIENTATION_LANDSCAPE or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_SetOrientation(ST7735_Object_t *pObj, ST7735_Ctx_t *pDriver)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <ST7735_SetOrientation+0x1a>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d119      	bne.n	80024fe <ST7735_SetOrientation+0x4e>
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	7b5b      	ldrb	r3, [r3, #13]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d106      	bne.n	80024e0 <ST7735_SetOrientation+0x30>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <ST7735_SetOrientation+0x114>)
 80024d4:	2250      	movs	r2, #80	; 0x50
 80024d6:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_HEIGHT;
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <ST7735_SetOrientation+0x114>)
 80024da:	22a0      	movs	r2, #160	; 0xa0
 80024dc:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80024de:	e028      	b.n	8002532 <ST7735_SetOrientation+0x82>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	7b5b      	ldrb	r3, [r3, #13]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <ST7735_SetOrientation+0x40>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7b5b      	ldrb	r3, [r3, #13]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d120      	bne.n	8002532 <ST7735_SetOrientation+0x82>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <ST7735_SetOrientation+0x114>)
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_HEIGHT;
 80024f6:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <ST7735_SetOrientation+0x114>)
 80024f8:	22a0      	movs	r2, #160	; 0xa0
 80024fa:	605a      	str	r2, [r3, #4]
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80024fc:	e019      	b.n	8002532 <ST7735_SetOrientation+0x82>
		}
  }
  else
  {
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7b5b      	ldrb	r3, [r3, #13]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <ST7735_SetOrientation+0x64>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002508:	22a0      	movs	r2, #160	; 0xa0
 800250a:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_0_9_WIDTH;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800250e:	2250      	movs	r2, #80	; 0x50
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e00f      	b.n	8002534 <ST7735_SetOrientation+0x84>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7b5b      	ldrb	r3, [r3, #13]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <ST7735_SetOrientation+0x74>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	7b5b      	ldrb	r3, [r3, #13]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d107      	bne.n	8002534 <ST7735_SetOrientation+0x84>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002526:	22a0      	movs	r2, #160	; 0xa0
 8002528:	601a      	str	r2, [r3, #0]
			ST7735Ctx.Height = ST7735_1_8_WIDTH;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	e000      	b.n	8002534 <ST7735_SetOrientation+0x84>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8002532:	bf00      	nop
		}
  }
	
	ST7735Ctx.Orientation = pDriver->Orientation;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800253a:	6093      	str	r3, [r2, #8]
	ST7735Ctx.Panel = pDriver->Panel;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7b1a      	ldrb	r2, [r3, #12]
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002542:	731a      	strb	r2, [r3, #12]
	ST7735Ctx.Type = pDriver->Type;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7b5a      	ldrb	r2, [r3, #13]
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800254a:	735a      	strb	r2, [r3, #13]
	
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4613      	mov	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fbdf 	bl	8002d20 <ST7735_SetDisplayWindow>
 8002562:	60f8      	str	r0, [r7, #12]

	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10a      	bne.n	8002582 <ST7735_SetOrientation+0xd2>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <ST7735_SetOrientation+0x114>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <ST7735_SetOrientation+0x118>)
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	b2db      	uxtb	r3, r3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	b2db      	uxtb	r3, r3
 8002580:	e006      	b.n	8002590 <ST7735_SetOrientation+0xe0>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <ST7735_SetOrientation+0x114>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <ST7735_SetOrientation+0x118>)
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	685b      	ldr	r3, [r3, #4]
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800258e:	b2db      	uxtb	r3, r3
 8002590:	72fb      	strb	r3, [r7, #11]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f103 0020 	add.w	r0, r3, #32
 8002598:	f107 020b 	add.w	r2, r7, #11
 800259c:	2301      	movs	r3, #1
 800259e:	2136      	movs	r1, #54	; 0x36
 80025a0:	f000 fd3c 	bl	800301c <st7735_write_reg>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  

  if(ret != ST7735_OK)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <ST7735_SetOrientation+0x108>
  {
    ret = ST7735_ERROR;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	24000248 	.word	0x24000248
 80025c8:	24000078 	.word	0x24000078

080025cc <ST7735_GetOrientation>:
  * @param  Orientation ST7735_ORIENTATION_PORTRAIT, ST7735_ORIENTATION_LANDSCAPE
  *                      or ST7735_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]

  *Orientation = ST7735Ctx.Orientation;
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <ST7735_GetOrientation+0x20>)
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	24000248 	.word	0x24000248

080025f0 <ST7735_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status
  */
int32_t ST7735_SetCursor(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  int32_t ret;
  uint8_t tmp;
	
	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <ST7735_SetCursor+0x174>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d821      	bhi.n	8002648 <ST7735_SetCursor+0x58>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <ST7735_SetCursor+0x174>)
 8002606:	7b5b      	ldrb	r3, [r3, #13]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10e      	bne.n	800262a <ST7735_SetCursor+0x3a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <ST7735_SetCursor+0x174>)
 800260e:	7b1b      	ldrb	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <ST7735_SetCursor+0x32>
				Xpos += 26;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	331a      	adds	r3, #26
 8002618:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3301      	adds	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	e033      	b.n	800268a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 24;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3318      	adds	r3, #24
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	e02f      	b.n	800268a <ST7735_SetCursor+0x9a>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <ST7735_SetCursor+0x174>)
 800262c:	7b5b      	ldrb	r3, [r3, #13]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d12b      	bne.n	800268a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002632:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <ST7735_SetCursor+0x174>)
 8002634:	7b1b      	ldrb	r3, [r3, #12]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d127      	bne.n	800268a <ST7735_SetCursor+0x9a>
				Xpos += 2;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3302      	adds	r3, #2
 800263e:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3301      	adds	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	e020      	b.n	800268a <ST7735_SetCursor+0x9a>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <ST7735_SetCursor+0x174>)
 800264a:	7b5b      	ldrb	r3, [r3, #13]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10e      	bne.n	800266e <ST7735_SetCursor+0x7e>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002650:	4b44      	ldr	r3, [pc, #272]	; (8002764 <ST7735_SetCursor+0x174>)
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <ST7735_SetCursor+0x76>
				Xpos += 1;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3301      	adds	r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	331a      	adds	r3, #26
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	e011      	b.n	800268a <ST7735_SetCursor+0x9a>
			} else {		//BOE Panel
				Xpos += 0;
				Ypos += 24;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3318      	adds	r3, #24
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	e00d      	b.n	800268a <ST7735_SetCursor+0x9a>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <ST7735_SetCursor+0x174>)
 8002670:	7b5b      	ldrb	r3, [r3, #13]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d109      	bne.n	800268a <ST7735_SetCursor+0x9a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <ST7735_SetCursor+0x174>)
 8002678:	7b1b      	ldrb	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <ST7735_SetCursor+0x9a>
				Xpos += 1;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3302      	adds	r3, #2
 8002688:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f103 0020 	add.w	r0, r3, #32
 8002690:	f107 0213 	add.w	r2, r7, #19
 8002694:	2300      	movs	r3, #0
 8002696:	212a      	movs	r1, #42	; 0x2a
 8002698:	f000 fcc0 	bl	800301c <st7735_write_reg>
 800269c:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3320      	adds	r3, #32
 80026aa:	f107 0113 	add.w	r1, r7, #19
 80026ae:	2201      	movs	r2, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fcc8 	bl	8003046 <st7735_send_data>
 80026b6:	4602      	mov	r2, r0
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3320      	adds	r3, #32
 80026c8:	f107 0113 	add.w	r1, r7, #19
 80026cc:	2201      	movs	r2, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fcb9 	bl	8003046 <st7735_send_data>
 80026d4:	4602      	mov	r2, r0
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4413      	add	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f103 0020 	add.w	r0, r3, #32
 80026e2:	f107 0213 	add.w	r2, r7, #19
 80026e6:	2300      	movs	r3, #0
 80026e8:	212b      	movs	r1, #43	; 0x2b
 80026ea:	f000 fc97 	bl	800301c <st7735_write_reg>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4413      	add	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3320      	adds	r3, #32
 8002702:	f107 0113 	add.w	r1, r7, #19
 8002706:	2201      	movs	r2, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fc9c 	bl	8003046 <st7735_send_data>
 800270e:	4602      	mov	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4413      	add	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3320      	adds	r3, #32
 8002720:	f107 0113 	add.w	r1, r7, #19
 8002724:	2201      	movs	r2, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fc8d 	bl	8003046 <st7735_send_data>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f103 0020 	add.w	r0, r3, #32
 800273a:	f107 0213 	add.w	r2, r7, #19
 800273e:	2300      	movs	r3, #0
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	f000 fc6b 	bl	800301c <st7735_write_reg>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <ST7735_SetCursor+0x16a>
  {
    ret = ST7735_ERROR;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800275a:	697b      	ldr	r3, [r7, #20]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	24000248 	.word	0x24000248

08002768 <ST7735_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Bmp picture address.
  * @retval The component status
  */
int32_t ST7735_DrawBitmap(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b090      	sub	sp, #64	; 0x40
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t index, size, width, height, y_pos;
  uint8_t pixel_val[2], tmp;
  uint8_t *pbmp;
  uint32_t counter = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	330a      	adds	r3, #10
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	330b      	adds	r3, #11
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	441a      	add	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	441a      	add	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	330d      	adds	r3, #13
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4413      	add	r3, r2
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3312      	adds	r3, #18
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3313      	adds	r3, #19
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	441a      	add	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	041b      	lsls	r3, r3, #16
 80027c0:	441a      	add	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	3315      	adds	r3, #21
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4413      	add	r3, r2
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3316      	adds	r3, #22
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3317      	adds	r3, #23
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	441a      	add	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3318      	adds	r3, #24
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	041b      	lsls	r3, r3, #16
 80027e8:	441a      	add	r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3319      	adds	r3, #25
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4413      	add	r3, r2
 80027f4:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3302      	adds	r3, #2
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3303      	adds	r3, #3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	441a      	add	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	3304      	adds	r3, #4
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	041b      	lsls	r3, r3, #16
 8002810:	441a      	add	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3305      	adds	r3, #5
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4413      	add	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
  size = size - index;
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	61fb      	str	r3, [r7, #28]

  pbmp = pBmp + index;
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	4413      	add	r3, r2
 800282c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  y_pos = ST7735Ctx.Height - Ypos - height;
 800282e:	4b51      	ldr	r3, [pc, #324]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	61bb      	str	r3, [r7, #24]

  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa6a 	bl	8002d20 <ST7735_SetDisplayWindow>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <ST7735_DrawBitmap+0xf2>
  {
    ret = ST7735_ERROR;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	637b      	str	r3, [r7, #52]	; 0x34
 8002858:	e087      	b.n	800296a <ST7735_DrawBitmap+0x202>
  }
  else
  {
    /* Set GRAM write direction and BGR = 0 */
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 800285c:	7b1b      	ldrb	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <ST7735_DrawBitmap+0x10e>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8002862:	4b44      	ldr	r3, [pc, #272]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a44      	ldr	r2, [pc, #272]	; (8002978 <ST7735_DrawBitmap+0x210>)
 8002868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800286c:	b2db      	uxtb	r3, r3
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e005      	b.n	8002882 <ST7735_DrawBitmap+0x11a>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_RGB;
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4a3f      	ldr	r2, [pc, #252]	; (8002978 <ST7735_DrawBitmap+0x210>)
 800287c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002880:	b2db      	uxtb	r3, r3
 8002882:	74fb      	strb	r3, [r7, #19]

    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f103 0020 	add.w	r0, r3, #32
 800288a:	f107 0213 	add.w	r2, r7, #19
 800288e:	2301      	movs	r3, #1
 8002890:	2136      	movs	r1, #54	; 0x36
 8002892:	f000 fbc3 	bl	800301c <st7735_write_reg>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <ST7735_DrawBitmap+0x13c>
    {
      ret = ST7735_ERROR;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e062      	b.n	800296a <ST7735_DrawBitmap+0x202>
    }/* Set Cursor */
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f7ff fea1 	bl	80025f0 <ST7735_SetCursor>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <ST7735_DrawBitmap+0x154>
    {
      ret = ST7735_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e056      	b.n	800296a <ST7735_DrawBitmap+0x202>
    }
    else
    {
      do
      {
        pixel_val[0] = *(pbmp + 1);
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	753b      	strb	r3, [r7, #20]
        pixel_val[1] = *(pbmp);
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	757b      	strb	r3, [r7, #21]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3320      	adds	r3, #32
 80028cc:	f107 0114 	add.w	r1, r7, #20
 80028d0:	2202      	movs	r2, #2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fbb7 	bl	8003046 <st7735_send_data>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <ST7735_DrawBitmap+0x17e>
        {
          ret = ST7735_ERROR;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80028e4:	e009      	b.n	80028fa <ST7735_DrawBitmap+0x192>
        }
        counter +=2U;
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	3302      	adds	r3, #2
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pbmp += 2;
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	3302      	adds	r3, #2
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
      }while(counter < size);
 80028f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3e0      	bcc.n	80028bc <ST7735_DrawBitmap+0x154>

			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 80028fc:	7b1b      	ldrb	r3, [r3, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <ST7735_DrawBitmap+0x1b0>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <ST7735_DrawBitmap+0x210>)
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b2db      	uxtb	r3, r3
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002910:	f043 0308 	orr.w	r3, r3, #8
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e006      	b.n	8002926 <ST7735_DrawBitmap+0x1be>
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <ST7735_DrawBitmap+0x210>)
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	685b      	ldr	r3, [r3, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8002924:	b2db      	uxtb	r3, r3
 8002926:	74fb      	strb	r3, [r7, #19]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f103 0020 	add.w	r0, r3, #32
 800292e:	f107 0213 	add.w	r2, r7, #19
 8002932:	2301      	movs	r3, #1
 8002934:	2136      	movs	r1, #54	; 0x36
 8002936:	f000 fb71 	bl	800301c <st7735_write_reg>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <ST7735_DrawBitmap+0x1e0>
      {
        ret = ST7735_ERROR;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
 8002946:	e010      	b.n	800296a <ST7735_DrawBitmap+0x202>
      }
      else
      {
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <ST7735_DrawBitmap+0x20c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f9e1 	bl	8002d20 <ST7735_SetDisplayWindow>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <ST7735_DrawBitmap+0x202>
        {
          ret = ST7735_ERROR;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
  }

  return ret;
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800296c:	4618      	mov	r0, r3
 800296e:	3738      	adds	r7, #56	; 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	24000248 	.word	0x24000248
 8002978:	24000078 	.word	0x24000078

0800297c <ST7735_FillRGBRect>:
  * @param  Width  specifies the rectangle width.
  * @param  Height Specifies the rectangle height
  * @retval The component status
  */
int32_t ST7735_FillRGBRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  static uint8_t pdata[640];
  uint8_t *rgb_data = pData;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	61bb      	str	r3, [r7, #24]
  uint32_t i, j;

  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	441a      	add	r2, r3
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <ST7735_FillRGBRect+0xcc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d806      	bhi.n	80029ae <ST7735_FillRGBRect+0x32>
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	441a      	add	r2, r3
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <ST7735_FillRGBRect+0xcc>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d903      	bls.n	80029b6 <ST7735_FillRGBRect+0x3a>
  {
    ret = ST7735_ERROR;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	e042      	b.n	8002a3c <ST7735_FillRGBRect+0xc0>
  }/* Set Cursor */
  else
  {
    for(j = 0; j < Height; j++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e03b      	b.n	8002a34 <ST7735_FillRGBRect+0xb8>
    {
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fe12 	bl	80025f0 <ST7735_SetCursor>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <ST7735_FillRGBRect+0x5e>
      {
        ret = ST7735_ERROR;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	e029      	b.n	8002a2e <ST7735_FillRGBRect+0xb2>
      }
      else
      {
        for(i = 0; i < Width; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e013      	b.n	8002a08 <ST7735_FillRGBRect+0x8c>
        {
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	7811      	ldrb	r1, [r2, #0]
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <ST7735_FillRGBRect+0xd0>)
 80029ea:	54d1      	strb	r1, [r2, r3]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	3301      	adds	r3, #1
 80029f6:	7811      	ldrb	r1, [r2, #0]
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <ST7735_FillRGBRect+0xd0>)
 80029fa:	54d1      	strb	r1, [r2, r3]
          rgb_data +=2;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	3302      	adds	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
        for(i = 0; i < Width; i++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3e7      	bcc.n	80029e0 <ST7735_FillRGBRect+0x64>
        }
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f103 0020 	add.w	r0, r3, #32
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	490b      	ldr	r1, [pc, #44]	; (8002a4c <ST7735_FillRGBRect+0xd0>)
 8002a1e:	f000 fb12 	bl	8003046 <st7735_send_data>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <ST7735_FillRGBRect+0xb2>
        {
          ret = ST7735_ERROR;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	61fb      	str	r3, [r7, #28]
    for(j = 0; j < Height; j++)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	3301      	adds	r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3bf      	bcc.n	80029bc <ST7735_FillRGBRect+0x40>
        }
      }
    }
  }

  return ret;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	24000248 	.word	0x24000248
 8002a4c:	24000258 	.word	0x24000258

08002a50 <ST7735_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color  Specifies the RGB color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_DrawHLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t i;
  static uint8_t pdata[640];
	
  if((Xpos + Length) > ST7735Ctx.Width)
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	441a      	add	r2, r3
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <ST7735_DrawHLine+0x98>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d903      	bls.n	8002a78 <ST7735_DrawHLine+0x28>
  {
    ret = ST7735_ERROR;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e032      	b.n	8002ade <ST7735_DrawHLine+0x8e>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fdb7 	bl	80025f0 <ST7735_SetCursor>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <ST7735_DrawHLine+0x40>
  {
    ret = ST7735_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e026      	b.n	8002ade <ST7735_DrawHLine+0x8e>
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e010      	b.n	8002ab8 <ST7735_DrawHLine+0x68>
    {
      /* Exchange LSB and MSB to fit LCD specification */
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0a1a      	lsrs	r2, r3, #8
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	b2d1      	uxtb	r1, r2
 8002aa0:	4a12      	ldr	r2, [pc, #72]	; (8002aec <ST7735_DrawHLine+0x9c>)
 8002aa2:	54d1      	strb	r1, [r2, r3]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	b2d1      	uxtb	r1, r2
 8002aae:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <ST7735_DrawHLine+0x9c>)
 8002ab0:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < Length; i++)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d3ea      	bcc.n	8002a96 <ST7735_DrawHLine+0x46>
			
//      pdata[(2U*i) + 1U] = (uint8_t)(Color >> 8);
//      pdata[2U*i] = (uint8_t)(Color);			
    }
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f103 0020 	add.w	r0, r3, #32
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	461a      	mov	r2, r3
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <ST7735_DrawHLine+0x9c>)
 8002ace:	f000 faba 	bl	8003046 <st7735_send_data>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <ST7735_DrawHLine+0x8e>
    {
      ret = ST7735_ERROR;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002ade:	697b      	ldr	r3, [r7, #20]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	24000248 	.word	0x24000248
 8002aec:	240004d8 	.word	0x240004d8

08002af0 <ST7735_DrawVLine>:
  * @param  Ypos     specifies the Y position.
  * @param  Length   specifies the Line length.
  * @retval The component status
  */
int32_t ST7735_DrawVLine(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t counter;

  if((Ypos + Length) > ST7735Ctx.Height)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	441a      	add	r2, r3
 8002b08:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <ST7735_DrawVLine+0x64>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d903      	bls.n	8002b18 <ST7735_DrawVLine+0x28>
  {
    ret = ST7735_ERROR;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e018      	b.n	8002b4a <ST7735_DrawVLine+0x5a>
  }
  else
  {
    for(counter = 0; counter < Length; counter++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e011      	b.n	8002b42 <ST7735_DrawVLine+0x52>
    {
      if(ST7735_SetPixel(pObj, Xpos, Ypos + counter, Color) != ST7735_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	441a      	add	r2, r3
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f841 	bl	8002bb0 <ST7735_SetPixel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <ST7735_DrawVLine+0x4c>
      {
        ret = ST7735_ERROR;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	e006      	b.n	8002b4a <ST7735_DrawVLine+0x5a>
    for(counter = 0; counter < Length; counter++)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3e9      	bcc.n	8002b1e <ST7735_DrawVLine+0x2e>
      }
    }
  }

  return ret;
 8002b4a:	697b      	ldr	r3, [r7, #20]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	24000248 	.word	0x24000248

08002b58 <ST7735_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t ST7735_FillRect(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  uint32_t i, y_pos = Ypos;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	617b      	str	r3, [r7, #20]

  for(i = 0; i < Height; i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e014      	b.n	8002b9e <ST7735_FillRect+0x46>
  {
    if(ST7735_DrawHLine(pObj, Xpos, y_pos, Width, Color) != ST7735_OK)
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff ff66 	bl	8002a50 <ST7735_DrawHLine>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <ST7735_FillRect+0x3a>
    {
      ret = ST7735_ERROR;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	61fb      	str	r3, [r7, #28]
      break;
 8002b90:	e009      	b.n	8002ba6 <ST7735_FillRect+0x4e>
    }
    y_pos++;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
  for(i = 0; i < Height; i++)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3e6      	bcc.n	8002b74 <ST7735_FillRect+0x1c>
  }

  return ret;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ST7735_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_SetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  int32_t ret = ST7735_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint16_t color;

  /* Exchange LSB and MSB to fit LCD specification */
  color = (uint16_t)((uint16_t)Color << 8);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	827b      	strh	r3, [r7, #18]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	827b      	strh	r3, [r7, #18]

  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <ST7735_SetPixel+0x84>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d204      	bcs.n	8002bee <ST7735_SetPixel+0x3e>
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <ST7735_SetPixel+0x84>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d303      	bcc.n	8002bf6 <ST7735_SetPixel+0x46>
  {
    ret = ST7735_ERROR;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e019      	b.n	8002c2a <ST7735_SetPixel+0x7a>
  }/* Set Cursor */
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fcf8 	bl	80025f0 <ST7735_SetCursor>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <ST7735_SetPixel+0x5e>
  {
    ret = ST7735_ERROR;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e00d      	b.n	8002c2a <ST7735_SetPixel+0x7a>
  }
  else
  {
    /* Write RAM data */
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3320      	adds	r3, #32
 8002c12:	f107 0112 	add.w	r1, r7, #18
 8002c16:	2202      	movs	r2, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fa14 	bl	8003046 <st7735_send_data>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <ST7735_SetPixel+0x7a>
    {
      ret = ST7735_ERROR;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
 8002c28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002c2a:	697b      	ldr	r3, [r7, #20]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	24000248 	.word	0x24000248

08002c38 <ST7735_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color in RGB565 format
  * @retval The component status
  */
int32_t ST7735_GetPixel(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  uint8_t pixel_lsb, pixel_msb;
  uint8_t tmp;


  /* Set Cursor */
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fcd0 	bl	80025f0 <ST7735_SetCursor>
 8002c50:	6178      	str	r0, [r7, #20]

  /* Prepare to read LCD RAM */
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3320      	adds	r3, #32
 8002c56:	f107 0211 	add.w	r2, r7, #17
 8002c5a:	212e      	movs	r1, #46	; 0x2e
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f9ca 	bl	8002ff6 <st7735_read_reg>
 8002c62:	4602      	mov	r2, r0
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	4413      	add	r3, r2
 8002c68:	617b      	str	r3, [r7, #20]

  /* Dummy read */
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3320      	adds	r3, #32
 8002c6e:	f107 0111 	add.w	r1, r7, #17
 8002c72:	2201      	movs	r2, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f9f8 	bl	800306a <st7735_recv_data>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4413      	add	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3320      	adds	r3, #32
 8002c86:	f107 0113 	add.w	r1, r7, #19
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f9ec 	bl	800306a <st7735_recv_data>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  /* Read first part of the RGB888 data */
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3320      	adds	r3, #32
 8002c9e:	f107 0112 	add.w	r1, r7, #18
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f9e0 	bl	800306a <st7735_recv_data>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	7cbb      	ldrb	r3, [r7, #18]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	441a      	add	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	601a      	str	r2, [r3, #0]

  if(ret != ST7735_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <ST7735_GetPixel+0x94>
  {
    ret = ST7735_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002ccc:	697b      	ldr	r3, [r7, #20]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <ST7735_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <ST7735_GetXSize+0x20>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	24000248 	.word	0x24000248

08002cfc <ST7735_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <ST7735_GetYSize+0x20>)
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	601a      	str	r2, [r3, #0]

  return ST7735_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	24000248 	.word	0x24000248

08002d20 <ST7735_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
static int32_t ST7735_SetDisplayWindow(ST7735_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t tmp;

	/* Cursor calibration */
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8002d2e:	4b7d      	ldr	r3, [pc, #500]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d821      	bhi.n	8002d7a <ST7735_SetDisplayWindow+0x5a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d38:	7b5b      	ldrb	r3, [r3, #13]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10e      	bne.n	8002d5c <ST7735_SetDisplayWindow+0x3c>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8002d3e:	4b79      	ldr	r3, [pc, #484]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d40:	7b1b      	ldrb	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <ST7735_SetDisplayWindow+0x34>
				Xpos += 26;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	331a      	adds	r3, #26
 8002d4a:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	e036      	b.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 24;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3318      	adds	r3, #24
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	e032      	b.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
				Ypos += 0;
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002d5c:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d5e:	7b5b      	ldrb	r3, [r3, #13]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d12e      	bne.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d12a      	bne.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 2;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
				Ypos += 1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3301      	adds	r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	e023      	b.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
			}
    }
	} else {
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d7c:	7b5b      	ldrb	r3, [r3, #13]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d111      	bne.n	8002da6 <ST7735_SetDisplayWindow+0x86>
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002d84:	7b1b      	ldrb	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <ST7735_SetDisplayWindow+0x78>
				Xpos += 1;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
				Ypos += 26;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	331a      	adds	r3, #26
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	e014      	b.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
			} else {		//BOE Panel
				Xpos += 1;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
				Ypos += 24;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3318      	adds	r3, #24
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	e00d      	b.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
			}
		}
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8002da6:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002da8:	7b5b      	ldrb	r3, [r3, #13]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d109      	bne.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8002dae:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <ST7735_SetDisplayWindow+0x204>)
 8002db0:	7b1b      	ldrb	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <ST7735_SetDisplayWindow+0xa2>
				Xpos += 1;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3301      	adds	r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
				Ypos += 2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	607b      	str	r3, [r7, #4]
			}
    }
	}
	
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f103 0020 	add.w	r0, r3, #32
 8002dc8:	f107 0213 	add.w	r2, r7, #19
 8002dcc:	2300      	movs	r3, #0
 8002dce:	212a      	movs	r1, #42	; 0x2a
 8002dd0:	f000 f924 	bl	800301c <st7735_write_reg>
 8002dd4:	6178      	str	r0, [r7, #20]
  tmp = (uint8_t)(Xpos >> 8U);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3320      	adds	r3, #32
 8002de2:	f107 0113 	add.w	r1, r7, #19
 8002de6:	2201      	movs	r2, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f92c 	bl	8003046 <st7735_send_data>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4413      	add	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Xpos & 0xFFU);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3320      	adds	r3, #32
 8002e00:	f107 0113 	add.w	r1, r7, #19
 8002e04:	2201      	movs	r2, #1
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f91d 	bl	8003046 <st7735_send_data>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4413      	add	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3320      	adds	r3, #32
 8002e26:	f107 0113 	add.w	r1, r7, #19
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f90a 	bl	8003046 <st7735_send_data>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3320      	adds	r3, #32
 8002e50:	f107 0113 	add.w	r1, r7, #19
 8002e54:	2201      	movs	r2, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f8f5 	bl	8003046 <st7735_send_data>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4413      	add	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f103 0020 	add.w	r0, r3, #32
 8002e6a:	f107 0213 	add.w	r2, r7, #19
 8002e6e:	2300      	movs	r3, #0
 8002e70:	212b      	movs	r1, #43	; 0x2b
 8002e72:	f000 f8d3 	bl	800301c <st7735_write_reg>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos >> 8U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3320      	adds	r3, #32
 8002e8a:	f107 0113 	add.w	r1, r7, #19
 8002e8e:	2201      	movs	r2, #1
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f8d8 	bl	8003046 <st7735_send_data>
 8002e96:	4602      	mov	r2, r0
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)(Ypos & 0xFFU);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	f107 0113 	add.w	r1, r7, #19
 8002eac:	2201      	movs	r2, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f8c9 	bl	8003046 <st7735_send_data>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3320      	adds	r3, #32
 8002ece:	f107 0113 	add.w	r1, r7, #19
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f8b6 	bl	8003046 <st7735_send_data>
 8002eda:	4602      	mov	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	74fb      	strb	r3, [r7, #19]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3320      	adds	r3, #32
 8002ef8:	f107 0113 	add.w	r1, r7, #19
 8002efc:	2201      	movs	r2, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f8a1 	bl	8003046 <st7735_send_data>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	4413      	add	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  if(ret != ST7735_OK)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <ST7735_SetDisplayWindow+0x1f8>
  {
    ret = ST7735_ERROR;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002f18:	697b      	ldr	r3, [r7, #20]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	24000248 	.word	0x24000248

08002f28 <ST7735_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	460b      	mov	r3, r1
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	7afa      	ldrb	r2, [r7, #11]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4610      	mov	r0, r2
 8002f44:	4798      	blx	r3
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	72fb      	strb	r3, [r7, #11]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	7af8      	ldrb	r0, [r7, #11]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <ST7735_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	4798      	blx	r3
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <ST7735_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68b8      	ldr	r0, [r7, #8]
 8002fb6:	4798      	blx	r3
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <ST7735_IO_Delay>:
  * @brief  ST7735 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4798      	blx	r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002fd6:	bf00      	nop
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4798      	blx	r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f5      	bhi.n	8002fd8 <ST7735_IO_Delay+0x16>
  {
  }
  return ST7735_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <st7735_read_reg>:
  * @param  reg   Register to read
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	460b      	mov	r3, r1
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	72fb      	strb	r3, [r7, #11]
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	6910      	ldr	r0, [r2, #16]
 800300c:	7af9      	ldrb	r1, [r7, #11]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	72fb      	strb	r3, [r7, #11]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681c      	ldr	r4, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6918      	ldr	r0, [r3, #16]
 8003034:	7af9      	ldrb	r1, [r7, #11]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	47a0      	blx	r4
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <st7735_send_data>:
  * @param  pdata  data to write
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	6910      	ldr	r0, [r2, #16]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4798      	blx	r3
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <st7735_recv_data>:
  * @param  pdata  data to read
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	6910      	ldr	r0, [r2, #16]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	4798      	blx	r3
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003096:	2003      	movs	r0, #3
 8003098:	f000 f97c 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800309c:	f001 fa64 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_Init+0x68>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4913      	ldr	r1, [pc, #76]	; (80030fc <HAL_Init+0x6c>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_Init+0x68>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_Init+0x6c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_Init+0x70>)
 80030d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <HAL_Init+0x74>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f814 	bl	8003108 <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e002      	b.n	80030f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030ea:	f7fd fd97 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	08009410 	.word	0x08009410
 8003100:	24000004 	.word	0x24000004
 8003104:	24000000 	.word	0x24000000

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_InitTick+0x60>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e021      	b.n	8003160 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_InitTick+0x64>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_InitTick+0x60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800312a:	fbb3 f3f1 	udiv	r3, r3, r1
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f953 	bl	80033de <HAL_SYSTICK_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00e      	b.n	8003160 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d80a      	bhi.n	800315e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003148:	2200      	movs	r2, #0
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f000 f92b 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003154:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_InitTick+0x68>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2400009c 	.word	0x2400009c
 800316c:	24000000 	.word	0x24000000
 8003170:	24000098 	.word	0x24000098

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2400009c 	.word	0x2400009c
 8003198:	24000758 	.word	0x24000758

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	24000758 	.word	0x24000758

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff ffee 	bl	800319c <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d005      	beq.n	80031da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_Delay+0x44>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031da:	bf00      	nop
 80031dc:	f7ff ffde 	bl	800319c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8f7      	bhi.n	80031dc <HAL_Delay+0x28>
  {
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2400009c 	.word	0x2400009c

080031fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_GetREVID+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0c1b      	lsrs	r3, r3, #16
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	5c001000 	.word	0x5c001000

08003214 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_GetDEVID+0x18>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	5c001000 	.word	0x5c001000

08003230 <__NVIC_SetPriorityGrouping>:
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	4313      	orrs	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00
 8003274:	05fa0000 	.word	0x05fa0000

08003278 <__NVIC_GetPriorityGrouping>:
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_SetPriority>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	; (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	; (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <NVIC_EncodePriority>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	bf28      	it	cs
 8003306:	2304      	movcs	r3, #4
 8003308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3304      	adds	r3, #4
 800330e:	2b06      	cmp	r3, #6
 8003310:	d902      	bls.n	8003318 <NVIC_EncodePriority+0x30>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3b03      	subs	r3, #3
 8003316:	e000      	b.n	800331a <NVIC_EncodePriority+0x32>
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003330:	f04f 31ff 	mov.w	r1, #4294967295
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43d9      	mvns	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	4313      	orrs	r3, r2
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff8e 	bl	8003294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff47 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b8:	f7ff ff5e 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff ff90 	bl	80032e8 <NVIC_EncodePriority>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff5f 	bl	8003294 <__NVIC_SetPriority>
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffb2 	bl	8003350 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80033fc:	f3bf 8f5f 	dmb	sy
}
 8003400:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_MPU_Disable+0x28>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_MPU_Disable+0x28>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_MPU_Disable+0x2c>)
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
}
 8003414:	bf00      	nop
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000ed00 	.word	0xe000ed00
 8003424:	e000ed90 	.word	0xe000ed90

08003428 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003430:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <HAL_MPU_Enable+0x38>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <HAL_MPU_Enable+0x3c>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_MPU_Enable+0x3c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003446:	f3bf 8f4f 	dsb	sy
}
 800344a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800344c:	f3bf 8f6f 	isb	sy
}
 8003450:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000ed90 	.word	0xe000ed90
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	785a      	ldrb	r2, [r3, #1]
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_MPU_ConfigRegion+0x84>)
 8003476:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d029      	beq.n	80034d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_MPU_ConfigRegion+0x84>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7b1b      	ldrb	r3, [r3, #12]
 800348c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7adb      	ldrb	r3, [r3, #11]
 8003492:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003494:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a9b      	ldrb	r3, [r3, #10]
 800349a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800349c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7b5b      	ldrb	r3, [r3, #13]
 80034a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7b9b      	ldrb	r3, [r3, #14]
 80034aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7bdb      	ldrb	r3, [r3, #15]
 80034b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7a5b      	ldrb	r3, [r3, #9]
 80034ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7a1b      	ldrb	r3, [r3, #8]
 80034c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80034ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80034d2:	e005      	b.n	80034e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_MPU_ConfigRegion+0x84>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_MPU_ConfigRegion+0x84>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed90 	.word	0xe000ed90

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <HAL_GPIO_Init+0x234>)
 8003500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003502:	e194      	b.n	800382e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8186 	beq.w	8003828 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d005      	beq.n	8003534 <HAL_GPIO_Init+0x44>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d130      	bne.n	8003596 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356a:	2201      	movs	r2, #1
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0201 	and.w	r2, r3, #1
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d017      	beq.n	80035d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2203      	movs	r2, #3
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d123      	bne.n	8003626 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80e0 	beq.w	8003828 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_GPIO_Init+0x238>)
 800366a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800366e:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_GPIO_Init+0x238>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_GPIO_Init+0x238>)
 800367a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003686:	4a29      	ldr	r2, [pc, #164]	; (800372c <HAL_GPIO_Init+0x23c>)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_GPIO_Init+0x240>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d052      	beq.n	8003758 <HAL_GPIO_Init+0x268>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_GPIO_Init+0x244>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d031      	beq.n	800371e <HAL_GPIO_Init+0x22e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_GPIO_Init+0x248>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <HAL_GPIO_Init+0x22a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_GPIO_Init+0x24c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d025      	beq.n	8003716 <HAL_GPIO_Init+0x226>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <HAL_GPIO_Init+0x250>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01f      	beq.n	8003712 <HAL_GPIO_Init+0x222>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_GPIO_Init+0x254>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d019      	beq.n	800370e <HAL_GPIO_Init+0x21e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_GPIO_Init+0x258>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0x21a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_GPIO_Init+0x25c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00d      	beq.n	8003706 <HAL_GPIO_Init+0x216>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a18      	ldr	r2, [pc, #96]	; (8003750 <HAL_GPIO_Init+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <HAL_GPIO_Init+0x212>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_GPIO_Init+0x264>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_GPIO_Init+0x20e>
 80036fa:	2309      	movs	r3, #9
 80036fc:	e02d      	b.n	800375a <HAL_GPIO_Init+0x26a>
 80036fe:	230a      	movs	r3, #10
 8003700:	e02b      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003702:	2308      	movs	r3, #8
 8003704:	e029      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003706:	2307      	movs	r3, #7
 8003708:	e027      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800370a:	2306      	movs	r3, #6
 800370c:	e025      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800370e:	2305      	movs	r3, #5
 8003710:	e023      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003712:	2304      	movs	r3, #4
 8003714:	e021      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003716:	2303      	movs	r3, #3
 8003718:	e01f      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800371a:	2302      	movs	r3, #2
 800371c:	e01d      	b.n	800375a <HAL_GPIO_Init+0x26a>
 800371e:	2301      	movs	r3, #1
 8003720:	e01b      	b.n	800375a <HAL_GPIO_Init+0x26a>
 8003722:	bf00      	nop
 8003724:	58000080 	.word	0x58000080
 8003728:	58024400 	.word	0x58024400
 800372c:	58000400 	.word	0x58000400
 8003730:	58020000 	.word	0x58020000
 8003734:	58020400 	.word	0x58020400
 8003738:	58020800 	.word	0x58020800
 800373c:	58020c00 	.word	0x58020c00
 8003740:	58021000 	.word	0x58021000
 8003744:	58021400 	.word	0x58021400
 8003748:	58021800 	.word	0x58021800
 800374c:	58021c00 	.word	0x58021c00
 8003750:	58022000 	.word	0x58022000
 8003754:	58022400 	.word	0x58022400
 8003758:	2300      	movs	r3, #0
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376a:	4938      	ldr	r1, [pc, #224]	; (800384c <HAL_GPIO_Init+0x35c>)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800379e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80037cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f ae63 	bne.w	8003504 <HAL_GPIO_Init+0x14>
  }
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	; 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	58000400 	.word	0x58000400

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	58024800 	.word	0x58024800

080038d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00a      	beq.n	80038fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e01f      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e01d      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	490f      	ldr	r1, [pc, #60]	; (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800390e:	f7ff fc45 	bl	800319c <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003914:	e009      	b.n	800392a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003916:	f7ff fc41 	bl	800319c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003924:	d901      	bls.n	800392a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e007      	b.n	800393a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_PWREx_ConfigSupply+0x70>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d1ee      	bne.n	8003916 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	58024800 	.word	0x58024800

08003948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f000 bc48 	b.w	80041ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8088 	beq.w	8003a7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	4b99      	ldr	r3, [pc, #612]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003974:	4b96      	ldr	r3, [pc, #600]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	2b10      	cmp	r3, #16
 800397e:	d007      	beq.n	8003990 <HAL_RCC_OscConfig+0x48>
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	2b18      	cmp	r3, #24
 8003984:	d111      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d06d      	beq.n	8003a78 <HAL_RCC_OscConfig+0x130>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d169      	bne.n	8003a78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f000 bc21 	b.w	80041ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x7a>
 80039b4:	4b86      	ldr	r3, [pc, #536]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a85      	ldr	r2, [pc, #532]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e02e      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x9c>
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a80      	ldr	r2, [pc, #512]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a74      	ldr	r2, [pc, #464]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 8003a08:	4b71      	ldr	r3, [pc, #452]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a70      	ldr	r2, [pc, #448]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6d      	ldr	r2, [pc, #436]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7ff fbb8 	bl	800319c <HAL_GetTick>
 8003a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7ff fbb4 	bl	800319c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e3d4      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a42:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7ff fba4 	bl	800319c <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7ff fba0 	bl	800319c <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e3c0      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a6a:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x110>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80ca 	beq.w	8003c1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a88:	4b51      	ldr	r3, [pc, #324]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a92:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_RCC_OscConfig+0x166>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	2b18      	cmp	r3, #24
 8003aa2:	d156      	bne.n	8003b52 <HAL_RCC_OscConfig+0x20a>
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d151      	bne.n	8003b52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aae:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e392      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ac6:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0219 	bic.w	r2, r3, #25
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	493f      	ldr	r1, [pc, #252]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7ff fb60 	bl	800319c <HAL_GetTick>
 8003adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae0:	f7ff fb5c 	bl	800319c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e37c      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afe:	f7ff fb7d 	bl	80031fc <HAL_GetREVID>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d817      	bhi.n	8003b3c <HAL_RCC_OscConfig+0x1f4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d108      	bne.n	8003b26 <HAL_RCC_OscConfig+0x1de>
 8003b14:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b24:	e07a      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	031b      	lsls	r3, r3, #12
 8003b34:	4926      	ldr	r1, [pc, #152]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3a:	e06f      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	4921      	ldr	r1, [pc, #132]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b50:	e064      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d047      	beq.n	8003bea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0219 	bic.w	r2, r3, #25
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	491a      	ldr	r1, [pc, #104]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7ff fb16 	bl	800319c <HAL_GetTick>
 8003b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b74:	f7ff fb12 	bl	800319c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e332      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	f7ff fb33 	bl	80031fc <HAL_GetREVID>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d819      	bhi.n	8003bd4 <HAL_RCC_OscConfig+0x28c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d108      	bne.n	8003bba <HAL_RCC_OscConfig+0x272>
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bb0:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb6:	6053      	str	r3, [r2, #4]
 8003bb8:	e030      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	031b      	lsls	r3, r3, #12
 8003bc8:	4901      	ldr	r1, [pc, #4]	; (8003bd0 <HAL_RCC_OscConfig+0x288>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]
 8003bce:	e025      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	4b9a      	ldr	r3, [pc, #616]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4997      	ldr	r1, [pc, #604]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
 8003be8:	e018      	b.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bea:	4b95      	ldr	r3, [pc, #596]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a94      	ldr	r2, [pc, #592]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7ff fad1 	bl	800319c <HAL_GetTick>
 8003bfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7ff facd 	bl	800319c <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e2ed      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c10:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f0      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a9 	beq.w	8003d7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c34:	4b82      	ldr	r3, [pc, #520]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d007      	beq.n	8003c50 <HAL_RCC_OscConfig+0x308>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b18      	cmp	r3, #24
 8003c44:	d13a      	bne.n	8003cbc <HAL_RCC_OscConfig+0x374>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d135      	bne.n	8003cbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c50:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x320>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e2c1      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c68:	f7ff fac8 	bl	80031fc <HAL_GetREVID>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d817      	bhi.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCC_OscConfig+0x348>
 8003c7e:	4b70      	ldr	r3, [pc, #448]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c86:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c8e:	e075      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c90:	4b6b      	ldr	r3, [pc, #428]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	069b      	lsls	r3, r3, #26
 8003c9e:	4968      	ldr	r1, [pc, #416]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca4:	e06a      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ca6:	4b66      	ldr	r3, [pc, #408]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	4962      	ldr	r1, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cba:	e05f      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d042      	beq.n	8003d4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5d      	ldr	r2, [pc, #372]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7ff fa64 	bl	800319c <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cd8:	f7ff fa60 	bl	800319c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e280      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf6:	f7ff fa81 	bl	80031fc <HAL_GetREVID>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d817      	bhi.n	8003d34 <HAL_RCC_OscConfig+0x3ec>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d108      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3d6>
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d14:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d1a:	6053      	str	r3, [r2, #4]
 8003d1c:	e02e      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
 8003d1e:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	069b      	lsls	r3, r3, #26
 8003d2c:	4944      	ldr	r1, [pc, #272]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
 8003d32:	e023      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
 8003d34:	4b42      	ldr	r3, [pc, #264]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	493f      	ldr	r1, [pc, #252]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
 8003d48:	e018      	b.n	8003d7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7ff fa21 	bl	800319c <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d5e:	f7ff fa1d 	bl	800319c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e23d      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d036      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7ff f9fe 	bl	800319c <HAL_GetTick>
 8003da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da4:	f7ff f9fa 	bl	800319c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e21a      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x45c>
 8003dc2:	e018      	b.n	8003df6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7ff f9e4 	bl	800319c <HAL_GetTick>
 8003dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7ff f9e0 	bl	800319c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e200      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d039      	beq.n	8003e76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e16:	f7ff f9c1 	bl	800319c <HAL_GetTick>
 8003e1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1e:	f7ff f9bd 	bl	800319c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e1dd      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_RCC_OscConfig+0x4f8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x4d6>
 8003e3c:	e01b      	b.n	8003e76 <HAL_RCC_OscConfig+0x52e>
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e44:	4b9b      	ldr	r3, [pc, #620]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a9a      	ldr	r2, [pc, #616]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e50:	f7ff f9a4 	bl	800319c <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e58:	f7ff f9a0 	bl	800319c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1c0      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e6a:	4b92      	ldr	r3, [pc, #584]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8081 	beq.w	8003f86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e84:	4b8c      	ldr	r3, [pc, #560]	; (80040b8 <HAL_RCC_OscConfig+0x770>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8b      	ldr	r2, [pc, #556]	; (80040b8 <HAL_RCC_OscConfig+0x770>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e90:	f7ff f984 	bl	800319c <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7ff f980 	bl	800319c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1a0      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eaa:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <HAL_RCC_OscConfig+0x770>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x584>
 8003ebe:	4b7d      	ldr	r3, [pc, #500]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eca:	e02d      	b.n	8003f28 <HAL_RCC_OscConfig+0x5e0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCC_OscConfig+0x5a6>
 8003ed4:	4b77      	ldr	r3, [pc, #476]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a76      	ldr	r2, [pc, #472]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a73      	ldr	r2, [pc, #460]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	e01c      	b.n	8003f28 <HAL_RCC_OscConfig+0x5e0>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5c8>
 8003ef6:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f043 0304 	orr.w	r3, r3, #4
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0x5e0>
 8003f10:	4b68      	ldr	r3, [pc, #416]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a67      	ldr	r2, [pc, #412]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b65      	ldr	r3, [pc, #404]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a64      	ldr	r2, [pc, #400]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f22:	f023 0304 	bic.w	r3, r3, #4
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d015      	beq.n	8003f5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7ff f934 	bl	800319c <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7ff f930 	bl	800319c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e14e      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4e:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RCC_OscConfig+0x5f0>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7ff f91e 	bl	800319c <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7ff f91a 	bl	800319c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e138      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f7a:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1ee      	bne.n	8003f64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 812d 	beq.w	80041ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f90:	4b48      	ldr	r3, [pc, #288]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f98:	2b18      	cmp	r3, #24
 8003f9a:	f000 80bd 	beq.w	8004118 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	f040 809e 	bne.w	80040e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7ff f8f2 	bl	800319c <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7ff f8ee 	bl	800319c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e10e      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fce:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fda:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_OscConfig+0x774>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4931      	ldr	r1, [pc, #196]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	3b01      	subs	r3, #1
 8004004:	025b      	lsls	r3, r3, #9
 8004006:	b29b      	uxth	r3, r3
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	3b01      	subs	r3, #1
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401c:	3b01      	subs	r3, #1
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004024:	4923      	ldr	r1, [pc, #140]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800402a:	4b22      	ldr	r3, [pc, #136]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_RCC_OscConfig+0x778>)
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004042:	00d2      	lsls	r2, r2, #3
 8004044:	491b      	ldr	r1, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800404a:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	f023 020c 	bic.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4917      	ldr	r1, [pc, #92]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800405c:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	f023 0202 	bic.w	r2, r3, #2
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4912      	ldr	r1, [pc, #72]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 800408c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCC_OscConfig+0x76c>)
 80040a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7ff f877 	bl	800319c <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040b0:	e011      	b.n	80040d6 <HAL_RCC_OscConfig+0x78e>
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
 80040b8:	58024800 	.word	0x58024800
 80040bc:	fffffc0c 	.word	0xfffffc0c
 80040c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7ff f86a 	bl	800319c <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e08a      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x77c>
 80040e2:	e082      	b.n	80041ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7ff f854 	bl	800319c <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7ff f850 	bl	800319c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e070      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800410a:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x7b0>
 8004116:	e068      	b.n	80041ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2b01      	cmp	r3, #1
 800412a:	d031      	beq.n	8004190 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 0203 	and.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d12a      	bne.n	8004190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d122      	bne.n	8004190 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0a5b      	lsrs	r3, r3, #9
 800415e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d111      	bne.n	8004190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d108      	bne.n	8004190 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e02b      	b.n	80041ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004194:	4b17      	ldr	r3, [pc, #92]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800419e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d01f      	beq.n	80041ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b6:	f7fe fff1 	bl	800319c <HAL_GetTick>
 80041ba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041bc:	bf00      	nop
 80041be:	f7fe ffed 	bl	800319c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d0f9      	beq.n	80041be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_OscConfig+0x8b0>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041d6:	00d2      	lsls	r2, r2, #3
 80041d8:	4906      	ldr	r1, [pc, #24]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <HAL_RCC_OscConfig+0x8ac>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58024400 	.word	0x58024400
 80041f8:	ffff0007 	.word	0xffff0007

080041fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e19c      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b8a      	ldr	r3, [pc, #552]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d910      	bls.n	8004240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b87      	ldr	r3, [pc, #540]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 020f 	bic.w	r2, r3, #15
 8004226:	4985      	ldr	r1, [pc, #532]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b83      	ldr	r3, [pc, #524]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e184      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004258:	429a      	cmp	r2, r3
 800425a:	d908      	bls.n	800426e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800425c:	4b78      	ldr	r3, [pc, #480]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4975      	ldr	r1, [pc, #468]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800426a:	4313      	orrs	r3, r2
 800426c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d010      	beq.n	800429c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004286:	429a      	cmp	r2, r3
 8004288:	d908      	bls.n	800429c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800428a:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	496a      	ldr	r1, [pc, #424]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004298:	4313      	orrs	r3, r2
 800429a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	4b64      	ldr	r3, [pc, #400]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d908      	bls.n	80042ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	495e      	ldr	r1, [pc, #376]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d908      	bls.n	80042f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4953      	ldr	r1, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	429a      	cmp	r2, r3
 8004312:	d908      	bls.n	8004326 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004314:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f023 020f 	bic.w	r2, r3, #15
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4947      	ldr	r1, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004322:	4313      	orrs	r3, r2
 8004324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d055      	beq.n	80043de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004332:	4b43      	ldr	r3, [pc, #268]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	4940      	ldr	r1, [pc, #256]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004340:	4313      	orrs	r3, r2
 8004342:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d107      	bne.n	800435c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800434c:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d121      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0f6      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d107      	bne.n	8004374 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d115      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ea      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800437c:	4b30      	ldr	r3, [pc, #192]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0de      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0d6      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439c:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f023 0207 	bic.w	r2, r3, #7
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4925      	ldr	r1, [pc, #148]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fe fef5 	bl	800319c <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b6:	f7fe fef1 	bl	800319c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0be      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	429a      	cmp	r2, r3
 80043dc:	d1eb      	bne.n	80043b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d208      	bcs.n	800440c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f023 020f 	bic.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x244>)
 8004408:	4313      	orrs	r3, r2
 800440a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d214      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 020f 	bic.w	r2, r3, #15
 8004422:	4906      	ldr	r1, [pc, #24]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <HAL_RCC_ClockConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e086      	b.n	800454a <HAL_RCC_ClockConfig+0x34e>
 800443c:	52002000 	.word	0x52002000
 8004440:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445c:	429a      	cmp	r2, r3
 800445e:	d208      	bcs.n	8004472 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	4939      	ldr	r1, [pc, #228]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 800446e:	4313      	orrs	r3, r2
 8004470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	4b34      	ldr	r3, [pc, #208]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800448a:	429a      	cmp	r2, r3
 800448c:	d208      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	492e      	ldr	r1, [pc, #184]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 800449c:	4313      	orrs	r3, r2
 800449e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d010      	beq.n	80044ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d208      	bcs.n	80044ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	4922      	ldr	r1, [pc, #136]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d010      	beq.n	80044fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d208      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	4917      	ldr	r1, [pc, #92]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044fc:	f000 f834 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	4912      	ldr	r1, [pc, #72]	; (8004558 <HAL_RCC_ClockConfig+0x35c>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <HAL_RCC_ClockConfig+0x358>)
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <HAL_RCC_ClockConfig+0x35c>)
 8004524:	5cd3      	ldrb	r3, [r2, r3]
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <HAL_RCC_ClockConfig+0x360>)
 8004532:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004534:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x364>)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_ClockConfig+0x368>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fde2 	bl	8003108 <HAL_InitTick>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
 8004558:	08009410 	.word	0x08009410
 800455c:	24000004 	.word	0x24000004
 8004560:	24000000 	.word	0x24000000
 8004564:	24000098 	.word	0x24000098

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456e:	4bb3      	ldr	r3, [pc, #716]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004576:	2b18      	cmp	r3, #24
 8004578:	f200 8155 	bhi.w	8004826 <HAL_RCC_GetSysClockFreq+0x2be>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <HAL_RCC_GetSysClockFreq+0x1c>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045e9 	.word	0x080045e9
 8004588:	08004827 	.word	0x08004827
 800458c:	08004827 	.word	0x08004827
 8004590:	08004827 	.word	0x08004827
 8004594:	08004827 	.word	0x08004827
 8004598:	08004827 	.word	0x08004827
 800459c:	08004827 	.word	0x08004827
 80045a0:	08004827 	.word	0x08004827
 80045a4:	0800460f 	.word	0x0800460f
 80045a8:	08004827 	.word	0x08004827
 80045ac:	08004827 	.word	0x08004827
 80045b0:	08004827 	.word	0x08004827
 80045b4:	08004827 	.word	0x08004827
 80045b8:	08004827 	.word	0x08004827
 80045bc:	08004827 	.word	0x08004827
 80045c0:	08004827 	.word	0x08004827
 80045c4:	08004615 	.word	0x08004615
 80045c8:	08004827 	.word	0x08004827
 80045cc:	08004827 	.word	0x08004827
 80045d0:	08004827 	.word	0x08004827
 80045d4:	08004827 	.word	0x08004827
 80045d8:	08004827 	.word	0x08004827
 80045dc:	08004827 	.word	0x08004827
 80045e0:	08004827 	.word	0x08004827
 80045e4:	0800461b 	.word	0x0800461b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e8:	4b94      	ldr	r3, [pc, #592]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045f4:	4b91      	ldr	r3, [pc, #580]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	4a90      	ldr	r2, [pc, #576]	; (8004840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004606:	e111      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004608:	4b8d      	ldr	r3, [pc, #564]	; (8004840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800460a:	61bb      	str	r3, [r7, #24]
      break;
 800460c:	e10e      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800460e:	4b8d      	ldr	r3, [pc, #564]	; (8004844 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004610:	61bb      	str	r3, [r7, #24]
      break;
 8004612:	e10b      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004614:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004616:	61bb      	str	r3, [r7, #24]
      break;
 8004618:	e108      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800461a:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004624:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800462e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004630:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800463a:	4b80      	ldr	r3, [pc, #512]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80e1 	beq.w	8004820 <HAL_RCC_GetSysClockFreq+0x2b8>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f000 8083 	beq.w	800476c <HAL_RCC_GetSysClockFreq+0x204>
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f200 80a1 	bhi.w	80047b0 <HAL_RCC_GetSysClockFreq+0x248>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x114>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d056      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x1c0>
 800467a:	e099      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02d      	beq.n	80046e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004688:	4b6c      	ldr	r3, [pc, #432]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a6b      	ldr	r2, [pc, #428]	; (8004840 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800484c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80046e2:	e087      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004850 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a02 	vldr	s12, [r7, #8]
 800470a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800484c <HAL_RCC_GetSysClockFreq+0x2e4>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004726:	e065      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004854 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a02 	vldr	s12, [r7, #8]
 800474e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800484c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800476a:	e043      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004858 <HAL_RCC_GetSysClockFreq+0x2f0>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004792:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800484c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ae:	e021      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004854 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800484c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	0a5b      	lsrs	r3, r3, #9
 80047fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fe:	3301      	adds	r3, #1
 8004800:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800480c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004818:	ee17 3a90 	vmov	r3, s15
 800481c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800481e:	e005      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
      break;
 8004824:	e002      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004828:	61bb      	str	r3, [r7, #24]
      break;
 800482a:	bf00      	nop
  }

  return sysclockfreq;
 800482c:	69bb      	ldr	r3, [r7, #24]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	03d09000 	.word	0x03d09000
 8004844:	003d0900 	.word	0x003d0900
 8004848:	017d7840 	.word	0x017d7840
 800484c:	46000000 	.word	0x46000000
 8004850:	4c742400 	.word	0x4c742400
 8004854:	4a742400 	.word	0x4a742400
 8004858:	4bbebc20 	.word	0x4bbebc20

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b0ca      	sub	sp, #296	; 0x128
 8004862:	af00      	add	r7, sp, #0
 8004864:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004868:	2300      	movs	r3, #0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004880:	2500      	movs	r5, #0
 8004882:	ea54 0305 	orrs.w	r3, r4, r5
 8004886:	d049      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800488c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004892:	d02f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004898:	d828      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800489a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800489e:	d01a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048a4:	d822      	bhi.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ae:	d007      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048b0:	e01c      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b2:	4bb8      	ldr	r3, [pc, #736]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	4ab7      	ldr	r2, [pc, #732]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048be:	e01a      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c4:	3308      	adds	r3, #8
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 f9d1 	bl	8005c70 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d4:	e00f      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048da:	3328      	adds	r3, #40	; 0x28
 80048dc:	2102      	movs	r1, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 fa78 	bl	8005dd4 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80048fe:	4ba5      	ldr	r3, [pc, #660]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800490c:	4aa1      	ldr	r2, [pc, #644]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800490e:	430b      	orrs	r3, r1
 8004910:	6513      	str	r3, [r2, #80]	; 0x50
 8004912:	e003      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800491c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004928:	f04f 0900 	mov.w	r9, #0
 800492c:	ea58 0309 	orrs.w	r3, r8, r9
 8004930:	d047      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	2b04      	cmp	r3, #4
 800493a:	d82a      	bhi.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004959 	.word	0x08004959
 8004948:	08004967 	.word	0x08004967
 800494c:	0800497d 	.word	0x0800497d
 8004950:	0800499b 	.word	0x0800499b
 8004954:	0800499b 	.word	0x0800499b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004958:	4b8e      	ldr	r3, [pc, #568]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	4a8d      	ldr	r2, [pc, #564]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800495e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004964:	e01a      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800496a:	3308      	adds	r3, #8
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f97e 	bl	8005c70 <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497a:	e00f      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004980:	3328      	adds	r3, #40	; 0x28
 8004982:	2100      	movs	r1, #0
 8004984:	4618      	mov	r0, r3
 8004986:	f001 fa25 	bl	8005dd4 <RCCEx_PLL3_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004990:	e004      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a4:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	f023 0107 	bic.w	r1, r3, #7
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b2:	4a78      	ldr	r2, [pc, #480]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6513      	str	r3, [r2, #80]	; 0x50
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80049ce:	f04f 0b00 	mov.w	fp, #0
 80049d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049d6:	d04c      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e2:	d030      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e8:	d829      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049ea:	2bc0      	cmp	r3, #192	; 0xc0
 80049ec:	d02d      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049ee:	2bc0      	cmp	r3, #192	; 0xc0
 80049f0:	d825      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d018      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d821      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d007      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a02:	e01c      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a04:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	4a62      	ldr	r2, [pc, #392]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a10:	e01c      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a16:	3308      	adds	r3, #8
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 f928 	bl	8005c70 <RCCEx_PLL2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a26:	e011      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a2c:	3328      	adds	r3, #40	; 0x28
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 f9cf 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	4a4c      	ldr	r2, [pc, #304]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6513      	str	r3, [r2, #80]	; 0x50
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d053      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a9e:	d035      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa4:	d82e      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004aa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004aaa:	d031      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ab0:	d828      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab6:	d01a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abc:	d822      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac6:	d007      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ac8:	e01c      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aca:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ad6:	e01c      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004adc:	3308      	adds	r3, #8
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 f8c5 	bl	8005c70 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004aec:	e011      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	3328      	adds	r3, #40	; 0x28
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f96c 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b02:	e006      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004b46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d056      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b66:	d038      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b6c:	d831      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b72:	d034      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b78:	d82b      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7e:	d01d      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b84:	d825      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b90:	e01f      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4ba2      	ldr	r3, [pc, #648]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4aa1      	ldr	r2, [pc, #644]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004baa:	3308      	adds	r3, #8
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f001 f85e 	bl	8005c70 <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bba:	e011      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc0:	3328      	adds	r3, #40	; 0x28
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f905 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e006      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004be8:	4b8e      	ldr	r3, [pc, #568]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004bf8:	4a8a      	ldr	r2, [pc, #552]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfe:	e003      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d03a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	2b30      	cmp	r3, #48	; 0x30
 8004c30:	d01f      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c32:	2b30      	cmp	r3, #48	; 0x30
 8004c34:	d819      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d00c      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d815      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d019      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d111      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	4a76      	ldr	r2, [pc, #472]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c52:	e011      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 f807 	bl	8005c70 <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c68:	e006      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a65      	ldr	r2, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c94:	e003      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	d051      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc8:	d035      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cce:	d82e      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cd4:	d031      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004cd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cda:	d828      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce0:	d01a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce6:	d822      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004cf2:	e01c      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d00:	e01c      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d06:	3308      	adds	r3, #8
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 ffb0 	bl	8005c70 <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d16:	e011      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1c:	3328      	adds	r3, #40	; 0x28
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f857 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d2c:	e006      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d34:	e002      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d44:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	4a34      	ldr	r2, [pc, #208]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6513      	str	r3, [r2, #80]	; 0x50
 8004d58:	e003      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d056      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d033      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d92:	d82c      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d98:	d02f      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d9e:	d826      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da4:	d02b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004daa:	d820      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db0:	d012      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db6:	d81a      	bhi.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d022      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d115      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 ff50 	bl	8005c70 <RCCEx_PLL2_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dd6:	e015      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ddc:	3328      	adds	r3, #40	; 0x28
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fff7 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dec:	e00a      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004df4:	e006      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004df6:	bf00      	nop
 8004df8:	e004      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e002      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10d      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1a:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e20:	e006      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d055      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e5c:	d033      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e62:	d82c      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d02f      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d826      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e74:	d02b      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e7a:	d820      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e80:	d012      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e86:	d81a      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d022      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e90:	d115      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e96:	3308      	adds	r3, #8
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fee8 	bl	8005c70 <RCCEx_PLL2_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e015      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eac:	3328      	adds	r3, #40	; 0x28
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 ff8f 	bl	8005dd4 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ec4:	e006      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004edc:	4ba3      	ldr	r3, [pc, #652]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004eec:	4a9f      	ldr	r2, [pc, #636]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d037      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f26:	d00e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2c:	d816      	bhi.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f36:	d111      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f38:	4b8c      	ldr	r3, [pc, #560]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a8b      	ldr	r2, [pc, #556]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f44:	e00f      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fe8e 	bl	8005c70 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f5a:	e004      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f72:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	4a7b      	ldr	r2, [pc, #492]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	6513      	str	r3, [r2, #80]	; 0x50
 8004f82:	e003      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004fa2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d039      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d81c      	bhi.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004ff9 	.word	0x08004ff9
 8004fc0:	08004fcd 	.word	0x08004fcd
 8004fc4:	08004fdb 	.word	0x08004fdb
 8004fc8:	08004ff9 	.word	0x08004ff9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b67      	ldr	r3, [pc, #412]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	4a66      	ldr	r2, [pc, #408]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fd8:	e00f      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fe44 	bl	8005c70 <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fee:	e004      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005002:	4b5a      	ldr	r3, [pc, #360]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	f023 0103 	bic.w	r1, r3, #3
 800500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	4a56      	ldr	r2, [pc, #344]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005012:	430b      	orrs	r3, r1
 8005014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800501c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800502c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005030:	2300      	movs	r3, #0
 8005032:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005036:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	f000 809f 	beq.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005042:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4a      	ldr	r2, [pc, #296]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800504e:	f7fe f8a5 	bl	800319c <HAL_GetTick>
 8005052:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005056:	e00b      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005058:	f7fe f8a0 	bl	800319c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b64      	cmp	r3, #100	; 0x64
 8005066:	d903      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800506e:	e005      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ed      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800507c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005080:	2b00      	cmp	r3, #0
 8005082:	d179      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005084:	4b39      	ldr	r3, [pc, #228]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005090:	4053      	eors	r3, r2
 8005092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005096:	2b00      	cmp	r3, #0
 8005098:	d015      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800509a:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a6:	4b31      	ldr	r3, [pc, #196]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a30      	ldr	r2, [pc, #192]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b2:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	4a2d      	ldr	r2, [pc, #180]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050be:	4a2b      	ldr	r2, [pc, #172]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	d118      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fe f862 	bl	800319c <HAL_GetTick>
 80050d8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050dc:	e00d      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fe f85d 	bl	800319c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d903      	bls.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80050f8:	e005      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fa:	4b1c      	ldr	r3, [pc, #112]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0eb      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800510a:	2b00      	cmp	r3, #0
 800510c:	d129      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800510e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511e:	d10e      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800512c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005130:	091a      	lsrs	r2, r3, #4
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005134:	4013      	ands	r3, r2
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005138:	430b      	orrs	r3, r1
 800513a:	6113      	str	r3, [r2, #16]
 800513c:	e005      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005144:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005148:	6113      	str	r3, [r2, #16]
 800514a:	4b08      	ldr	r3, [pc, #32]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800514c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515a:	4a04      	ldr	r2, [pc, #16]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	430b      	orrs	r3, r1
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	e00e      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800516a:	e009      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800516c:	58024400 	.word	0x58024400
 8005170:	58024800 	.word	0x58024800
 8005174:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800517c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0301 	and.w	r3, r2, #1
 800518c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005196:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	f000 8089 	beq.w	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	2b28      	cmp	r3, #40	; 0x28
 80051aa:	d86b      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	0800528d 	.word	0x0800528d
 80051b8:	08005285 	.word	0x08005285
 80051bc:	08005285 	.word	0x08005285
 80051c0:	08005285 	.word	0x08005285
 80051c4:	08005285 	.word	0x08005285
 80051c8:	08005285 	.word	0x08005285
 80051cc:	08005285 	.word	0x08005285
 80051d0:	08005285 	.word	0x08005285
 80051d4:	08005259 	.word	0x08005259
 80051d8:	08005285 	.word	0x08005285
 80051dc:	08005285 	.word	0x08005285
 80051e0:	08005285 	.word	0x08005285
 80051e4:	08005285 	.word	0x08005285
 80051e8:	08005285 	.word	0x08005285
 80051ec:	08005285 	.word	0x08005285
 80051f0:	08005285 	.word	0x08005285
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	08005285 	.word	0x08005285
 80051fc:	08005285 	.word	0x08005285
 8005200:	08005285 	.word	0x08005285
 8005204:	08005285 	.word	0x08005285
 8005208:	08005285 	.word	0x08005285
 800520c:	08005285 	.word	0x08005285
 8005210:	08005285 	.word	0x08005285
 8005214:	0800528d 	.word	0x0800528d
 8005218:	08005285 	.word	0x08005285
 800521c:	08005285 	.word	0x08005285
 8005220:	08005285 	.word	0x08005285
 8005224:	08005285 	.word	0x08005285
 8005228:	08005285 	.word	0x08005285
 800522c:	08005285 	.word	0x08005285
 8005230:	08005285 	.word	0x08005285
 8005234:	0800528d 	.word	0x0800528d
 8005238:	08005285 	.word	0x08005285
 800523c:	08005285 	.word	0x08005285
 8005240:	08005285 	.word	0x08005285
 8005244:	08005285 	.word	0x08005285
 8005248:	08005285 	.word	0x08005285
 800524c:	08005285 	.word	0x08005285
 8005250:	08005285 	.word	0x08005285
 8005254:	0800528d 	.word	0x0800528d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525c:	3308      	adds	r3, #8
 800525e:	2101      	movs	r1, #1
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fd05 	bl	8005c70 <RCCEx_PLL2_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800526c:	e00f      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005272:	3328      	adds	r3, #40	; 0x28
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fdac 	bl	8005dd4 <RCCEx_PLL3_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005282:	e004      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800528a:	e000      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800528c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005296:	4bbf      	ldr	r3, [pc, #764]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a4:	4abb      	ldr	r2, [pc, #748]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	6553      	str	r3, [r2, #84]	; 0x54
 80052aa:	e003      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f002 0302 	and.w	r3, r2, #2
 80052c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80052ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80052ce:	460b      	mov	r3, r1
 80052d0:	4313      	orrs	r3, r2
 80052d2:	d041      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d824      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005331 	.word	0x08005331
 80052e8:	080052fd 	.word	0x080052fd
 80052ec:	08005313 	.word	0x08005313
 80052f0:	08005331 	.word	0x08005331
 80052f4:	08005331 	.word	0x08005331
 80052f8:	08005331 	.word	0x08005331
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005300:	3308      	adds	r3, #8
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fcb3 	bl	8005c70 <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005310:	e00f      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005316:	3328      	adds	r3, #40	; 0x28
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fd5a 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800533a:	4b96      	ldr	r3, [pc, #600]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f023 0107 	bic.w	r1, r3, #7
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005348:	4a92      	ldr	r2, [pc, #584]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800534a:	430b      	orrs	r3, r1
 800534c:	6553      	str	r3, [r2, #84]	; 0x54
 800534e:	e003      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 0304 	and.w	r3, r2, #4
 8005364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800536e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	d044      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005380:	2b05      	cmp	r3, #5
 8005382:	d825      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053d9 	.word	0x080053d9
 8005390:	080053a5 	.word	0x080053a5
 8005394:	080053bb 	.word	0x080053bb
 8005398:	080053d9 	.word	0x080053d9
 800539c:	080053d9 	.word	0x080053d9
 80053a0:	080053d9 	.word	0x080053d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a8:	3308      	adds	r3, #8
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc5f 	bl	8005c70 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053b8:	e00f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053be:	3328      	adds	r3, #40	; 0x28
 80053c0:	2101      	movs	r1, #1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fd06 	bl	8005dd4 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053ce:	e004      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053d6:	e000      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e2:	4b6c      	ldr	r3, [pc, #432]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e6:	f023 0107 	bic.w	r1, r3, #7
 80053ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f2:	4a68      	ldr	r2, [pc, #416]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	6593      	str	r3, [r2, #88]	; 0x58
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f002 0320 	and.w	r3, r2, #32
 800540e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d055      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800542e:	d033      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005434:	d82c      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d826      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005446:	d02b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800544c:	d820      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d012      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005458:	d81a      	bhi.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d115      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005468:	3308      	adds	r3, #8
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fbff 	bl	8005c70 <RCCEx_PLL2_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005478:	e015      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547e:	3328      	adds	r3, #40	; 0x28
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fca6 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800548e:	e00a      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005496:	e006      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005498:	bf00      	nop
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ae:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	4a35      	ldr	r2, [pc, #212]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6553      	str	r3, [r2, #84]	; 0x54
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80054da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d058      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80054fa:	d033      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80054fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005500:	d82c      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d02f      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550c:	d826      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800550e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005512:	d02b      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005518:	d820      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d012      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005524:	d81a      	bhi.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d022      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d115      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005534:	3308      	adds	r3, #8
 8005536:	2100      	movs	r1, #0
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fb99 	bl	8005c70 <RCCEx_PLL2_Config>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005544:	e015      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554a:	3328      	adds	r3, #40	; 0x28
 800554c:	2102      	movs	r1, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fc40 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800555a:	e00a      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005562:	e006      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005564:	bf00      	nop
 8005566:	e004      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005568:	bf00      	nop
 800556a:	e002      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800556c:	bf00      	nop
 800556e:	e000      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10e      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800558a:	4a02      	ldr	r2, [pc, #8]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800558c:	430b      	orrs	r3, r1
 800558e:	6593      	str	r3, [r2, #88]	; 0x58
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80055ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055ba:	460b      	mov	r3, r1
 80055bc:	4313      	orrs	r3, r2
 80055be:	d055      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80055c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055cc:	d033      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055d2:	d82c      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d8:	d02f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055de:	d826      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055e4:	d02b      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055ea:	d820      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f0:	d012      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80055f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f6:	d81a      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d022      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005600:	d115      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	3308      	adds	r3, #8
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fb30 	bl	8005c70 <RCCEx_PLL2_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005616:	e015      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800561c:	3328      	adds	r3, #40	; 0x28
 800561e:	2102      	movs	r1, #2
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fbd7 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800562c:	e00a      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005634:	e006      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005636:	bf00      	nop
 8005638:	e004      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800564c:	4ba1      	ldr	r3, [pc, #644]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800565c:	4a9d      	ldr	r2, [pc, #628]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800565e:	430b      	orrs	r3, r1
 8005660:	6593      	str	r3, [r2, #88]	; 0x58
 8005662:	e003      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005668:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 0308 	and.w	r3, r2, #8
 8005678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800567c:	2300      	movs	r3, #0
 800567e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005682:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005686:	460b      	mov	r3, r1
 8005688:	4313      	orrs	r3, r2
 800568a:	d01e      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d10c      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569e:	3328      	adds	r3, #40	; 0x28
 80056a0:	2102      	movs	r1, #2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fb96 	bl	8005dd4 <RCCEx_PLL3_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056b4:	4b87      	ldr	r3, [pc, #540]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	4a83      	ldr	r2, [pc, #524]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f002 0310 	and.w	r3, r2, #16
 80056d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056da:	2300      	movs	r3, #0
 80056dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80056e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80056e4:	460b      	mov	r3, r1
 80056e6:	4313      	orrs	r3, r2
 80056e8:	d01e      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f6:	d10c      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fc:	3328      	adds	r3, #40	; 0x28
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fb67 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005712:	4b70      	ldr	r3, [pc, #448]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005722:	4a6c      	ldr	r2, [pc, #432]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800573e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d03e      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005754:	d022      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800575a:	d81b      	bhi.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d00b      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005766:	e015      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576c:	3308      	adds	r3, #8
 800576e:	2100      	movs	r1, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa7d 	bl	8005c70 <RCCEx_PLL2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800577c:	e00f      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005782:	3328      	adds	r3, #40	; 0x28
 8005784:	2102      	movs	r1, #2
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb24 	bl	8005dd4 <RCCEx_PLL3_Config>
 800578c:	4603      	mov	r3, r0
 800578e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005792:	e004      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800579a:	e000      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800579c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10b      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a6:	4b4b      	ldr	r3, [pc, #300]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057b6:	4a47      	ldr	r2, [pc, #284]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6593      	str	r3, [r2, #88]	; 0x58
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80057d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80057d4:	2300      	movs	r3, #0
 80057d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d03b      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057ee:	d01f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80057f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057f4:	d818      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80057fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005800:	d007      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005802:	e011      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b33      	ldr	r3, [pc, #204]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005810:	e00f      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005816:	3328      	adds	r3, #40	; 0x28
 8005818:	2101      	movs	r1, #1
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fada 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584c:	430b      	orrs	r3, r1
 800584e:	6553      	str	r3, [r2, #84]	; 0x54
 8005850:	e003      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005866:	673b      	str	r3, [r7, #112]	; 0x70
 8005868:	2300      	movs	r3, #0
 800586a:	677b      	str	r3, [r7, #116]	; 0x74
 800586c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d034      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005884:	d007      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005886:	e011      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005888:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800588e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005894:	e00e      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589a:	3308      	adds	r3, #8
 800589c:	2102      	movs	r1, #2
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f9e6 	bl	8005c70 <RCCEx_PLL2_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058aa:	e003      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	4a02      	ldr	r2, [pc, #8]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80058ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ee:	2300      	movs	r3, #0
 80058f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d00c      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005900:	3328      	adds	r3, #40	; 0x28
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fa65 	bl	8005dd4 <RCCEx_PLL3_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005922:	663b      	str	r3, [r7, #96]	; 0x60
 8005924:	2300      	movs	r3, #0
 8005926:	667b      	str	r3, [r7, #100]	; 0x64
 8005928:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d038      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593e:	d018      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005944:	d811      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594a:	d014      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800594c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005950:	d80b      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d106      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4bc3      	ldr	r3, [pc, #780]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4ac2      	ldr	r2, [pc, #776]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005968:	e008      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005970:	e004      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800597a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005984:	4bb9      	ldr	r3, [pc, #740]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005988:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005994:	4ab5      	ldr	r2, [pc, #724]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005996:	430b      	orrs	r3, r1
 8005998:	6553      	str	r3, [r2, #84]	; 0x54
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80059b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80059b2:	2300      	movs	r3, #0
 80059b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059c0:	4baa      	ldr	r3, [pc, #680]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ce:	4aa7      	ldr	r2, [pc, #668]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80059e0:	653b      	str	r3, [r7, #80]	; 0x50
 80059e2:	2300      	movs	r3, #0
 80059e4:	657b      	str	r3, [r7, #84]	; 0x54
 80059e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80059ea:	460b      	mov	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059f0:	4b9e      	ldr	r3, [pc, #632]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a00:	4a9a      	ldr	r2, [pc, #616]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a02:	430b      	orrs	r3, r1
 8005a04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	2300      	movs	r3, #0
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a22:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a30:	4a8e      	ldr	r2, [pc, #568]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a42:	643b      	str	r3, [r7, #64]	; 0x40
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
 8005a48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d00e      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a52:	4b86      	ldr	r3, [pc, #536]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	4a85      	ldr	r2, [pc, #532]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a5c:	6113      	str	r3, [r2, #16]
 8005a5e:	4b83      	ldr	r3, [pc, #524]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a60:	6919      	ldr	r1, [r3, #16]
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a6a:	4a80      	ldr	r2, [pc, #512]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005a86:	460b      	mov	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a8c:	4b77      	ldr	r3, [pc, #476]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a90:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	4a74      	ldr	r2, [pc, #464]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005abc:	4b6b      	ldr	r3, [pc, #428]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	4a67      	ldr	r2, [pc, #412]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	2100      	movs	r1, #0
 8005adc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d011      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af2:	3308      	adds	r3, #8
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f8ba 	bl	8005c70 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6239      	str	r1, [r7, #32]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	d011      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b32:	3308      	adds	r3, #8
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f89a 	bl	8005c70 <RCCEx_PLL2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	61b9      	str	r1, [r7, #24]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d011      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b72:	3308      	adds	r3, #8
 8005b74:	2102      	movs	r1, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f87a 	bl	8005c70 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	6139      	str	r1, [r7, #16]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d011      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb2:	3328      	adds	r3, #40	; 0x28
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f90c 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d011      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf2:	3328      	adds	r3, #40	; 0x28
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f8ec 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d011      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c32:	3328      	adds	r3, #40	; 0x28
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f8cc 	bl	8005dd4 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005c52:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005c66:	46bd      	mov	sp, r7
 8005c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c6c:	58024400 	.word	0x58024400

08005c70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c7e:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d101      	bne.n	8005c8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e099      	b.n	8005dc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4e      	ldr	r2, [pc, #312]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fd fa7f 	bl	800319c <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ca0:	e008      	b.n	8005cb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ca2:	f7fd fa7b 	bl	800319c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e086      	b.n	8005dc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cb4:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f0      	bne.n	8005ca2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	493f      	ldr	r1, [pc, #252]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	628b      	str	r3, [r1, #40]	; 0x28
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	025b      	lsls	r3, r3, #9
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	061b      	lsls	r3, r3, #24
 8005d00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d04:	4931      	ldr	r1, [pc, #196]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d0a:	4b30      	ldr	r3, [pc, #192]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	492d      	ldr	r1, [pc, #180]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f023 0220 	bic.w	r2, r3, #32
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	4928      	ldr	r1, [pc, #160]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d2e:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <RCCEx_PLL2_Config+0x160>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	69d2      	ldr	r2, [r2, #28]
 8005d46:	00d2      	lsls	r2, r2, #3
 8005d48:	4920      	ldr	r1, [pc, #128]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d4e:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d54:	f043 0310 	orr.w	r3, r3, #16
 8005d58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d6c:	e00f      	b.n	8005d8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d80:	e005      	b.n	8005d8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9a:	f7fd f9ff 	bl	800319c <HAL_GetTick>
 8005d9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005da0:	e008      	b.n	8005db4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005da2:	f7fd f9fb 	bl	800319c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e006      	b.n	8005dc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <RCCEx_PLL2_Config+0x15c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	58024400 	.word	0x58024400
 8005dd0:	ffff0007 	.word	0xffff0007

08005dd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d101      	bne.n	8005df2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e099      	b.n	8005f26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005df2:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4e      	ldr	r2, [pc, #312]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfe:	f7fd f9cd 	bl	800319c <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e06:	f7fd f9c9 	bl	800319c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e086      	b.n	8005f26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e18:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e24:	4b42      	ldr	r3, [pc, #264]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	051b      	lsls	r3, r3, #20
 8005e32:	493f      	ldr	r1, [pc, #252]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	628b      	str	r3, [r1, #40]	; 0x28
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	025b      	lsls	r3, r3, #9
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e68:	4931      	ldr	r1, [pc, #196]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e6e:	4b30      	ldr	r3, [pc, #192]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	492d      	ldr	r1, [pc, #180]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	4928      	ldr	r1, [pc, #160]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e92:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <RCCEx_PLL3_Config+0x160>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	69d2      	ldr	r2, [r2, #28]
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	4920      	ldr	r1, [pc, #128]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ed0:	e00f      	b.n	8005ef2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d106      	bne.n	8005ee6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ed8:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ee4:	e005      	b.n	8005ef2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ee6:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efe:	f7fd f94d 	bl	800319c <HAL_GetTick>
 8005f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f06:	f7fd f949 	bl	800319c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <RCCEx_PLL3_Config+0x15c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	ffff0007 	.word	0xffff0007

08005f38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d071      	beq.n	800602e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fa fd6a 	bl	8000a38 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d050      	beq.n	800601c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	22ca      	movs	r2, #202	; 0xca
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2253      	movs	r2, #83	; 0x53
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa4a 	bl	8006424 <RTC_EnterInitMode>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d124      	bne.n	8005fe4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6899      	ldr	r1, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <HAL_RTC_Init+0x100>)
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6899      	ldr	r1, [r3, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	0419      	lsls	r1, r3, #16
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa56 	bl	800648c <RTC_ExitInitMode>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d113      	bne.n	8006012 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0203 	bic.w	r2, r2, #3
 8005ff8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24
 800601a:	e001      	b.n	8006020 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	ff8fffbf 	.word	0xff8fffbf

0800603c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800603c:	b590      	push	{r4, r7, lr}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_RTC_SetTime+0x1a>
 8006052:	2302      	movs	r3, #2
 8006054:	e089      	b.n	800616a <HAL_RTC_SetTime+0x12e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	22ca      	movs	r2, #202	; 0xca
 800606c:	625a      	str	r2, [r3, #36]	; 0x24
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2253      	movs	r2, #83	; 0x53
 8006074:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f9d4 	bl	8006424 <RTC_EnterInitMode>
 800607c:	4603      	mov	r3, r0
 800607e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006080:	7cfb      	ldrb	r3, [r7, #19]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d161      	bne.n	800614a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d126      	bne.n	80060da <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2200      	movs	r2, #0
 800609e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fa2f 	bl	8006508 <RTC_ByteToBcd2>
 80060aa:	4603      	mov	r3, r0
 80060ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fa28 	bl	8006508 <RTC_ByteToBcd2>
 80060b8:	4603      	mov	r3, r0
 80060ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	789b      	ldrb	r3, [r3, #2]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fa20 	bl	8006508 <RTC_ByteToBcd2>
 80060c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	78db      	ldrb	r3, [r3, #3]
 80060d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	e018      	b.n	800610c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006100:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	78db      	ldrb	r3, [r3, #3]
 8006106:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	4b18      	ldr	r3, [pc, #96]	; (8006174 <HAL_RTC_SetTime+0x138>)
 8006114:	400b      	ands	r3, r1
 8006116:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006126:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	431a      	orrs	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f9a3 	bl	800648c <RTC_ExitInitMode>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	22ff      	movs	r2, #255	; 0xff
 8006150:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	bd90      	pop	{r4, r7, pc}
 8006172:	bf00      	nop
 8006174:	007f7f7f 	.word	0x007f7f7f

08006178 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b22      	ldr	r3, [pc, #136]	; (800622c <HAL_RTC_GetTime+0xb4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	0d9b      	lsrs	r3, r3, #22
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11a      	bne.n	8006222 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f9a9 	bl	8006548 <RTC_Bcd2ToByte>
 80061f6:	4603      	mov	r3, r0
 80061f8:	461a      	mov	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f9a0 	bl	8006548 <RTC_Bcd2ToByte>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	789b      	ldrb	r3, [r3, #2]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 f997 	bl	8006548 <RTC_Bcd2ToByte>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	007f7f7f 	.word	0x007f7f7f

08006230 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_RTC_SetDate+0x1a>
 8006246:	2302      	movs	r3, #2
 8006248:	e073      	b.n	8006332 <HAL_RTC_SetDate+0x102>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10e      	bne.n	800627e <HAL_RTC_SetDate+0x4e>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d008      	beq.n	800627e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	b2db      	uxtb	r3, r3
 8006276:	330a      	adds	r3, #10
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11c      	bne.n	80062be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	78db      	ldrb	r3, [r3, #3]
 8006288:	4618      	mov	r0, r3
 800628a:	f000 f93d 	bl	8006508 <RTC_ByteToBcd2>
 800628e:	4603      	mov	r3, r0
 8006290:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 f936 	bl	8006508 <RTC_ByteToBcd2>
 800629c:	4603      	mov	r3, r0
 800629e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f92e 	bl	8006508 <RTC_ByteToBcd2>
 80062ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e00e      	b.n	80062dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	78db      	ldrb	r3, [r3, #3]
 80062c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80062d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	22ca      	movs	r2, #202	; 0xca
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2253      	movs	r2, #83	; 0x53
 80062ea:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f899 	bl	8006424 <RTC_EnterInitMode>
 80062f2:	4603      	mov	r3, r0
 80062f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <HAL_RTC_SetDate+0x10c>)
 8006304:	400b      	ands	r3, r1
 8006306:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f8bf 	bl	800648c <RTC_ExitInitMode>
 800630e:	4603      	mov	r3, r0
 8006310:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	22ff      	movs	r2, #255	; 0xff
 8006318:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006330:	7cfb      	ldrb	r3, [r7, #19]


}
 8006332:	4618      	mov	r0, r3
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	00ffff3f 	.word	0x00ffff3f

08006340 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <HAL_RTC_GetDate+0x98>)
 8006354:	4013      	ands	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	0c1b      	lsrs	r3, r3, #16
 800635c:	b2da      	uxtb	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	0b5b      	lsrs	r3, r3, #13
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11a      	bne.n	80063cc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	78db      	ldrb	r3, [r3, #3]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f8d4 	bl	8006548 <RTC_Bcd2ToByte>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f8cb 	bl	8006548 <RTC_Bcd2ToByte>
 80063b2:	4603      	mov	r3, r0
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	789b      	ldrb	r3, [r3, #2]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f8c2 	bl	8006548 <RTC_Bcd2ToByte>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	00ffff3f 	.word	0x00ffff3f

080063dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a0d      	ldr	r2, [pc, #52]	; (8006420 <HAL_RTC_WaitForSynchro+0x44>)
 80063ea:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80063ec:	f7fc fed6 	bl	800319c <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063f2:	e009      	b.n	8006408 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063f4:	f7fc fed2 	bl	800319c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006402:	d901      	bls.n	8006408 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e007      	b.n	8006418 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0ee      	beq.n	80063f4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	0003ff5f 	.word	0x0003ff5f

08006424 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d120      	bne.n	8006480 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f04f 32ff 	mov.w	r2, #4294967295
 8006446:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006448:	f7fc fea8 	bl	800319c <HAL_GetTick>
 800644c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800644e:	e00d      	b.n	800646c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006450:	f7fc fea4 	bl	800319c <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645e:	d905      	bls.n	800646c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <RTC_EnterInitMode+0x5c>
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d1e7      	bne.n	8006450 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8006498:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <RTC_ExitInitMode+0x78>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <RTC_ExitInitMode+0x78>)
 800649e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80064a4:	4b17      	ldr	r3, [pc, #92]	; (8006504 <RTC_ExitInitMode+0x78>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10c      	bne.n	80064ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff93 	bl	80063dc <HAL_RTC_WaitForSynchro>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01e      	beq.n	80064fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2203      	movs	r2, #3
 80064c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	73fb      	strb	r3, [r7, #15]
 80064c8:	e017      	b.n	80064fa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064ca:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <RTC_ExitInitMode+0x78>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4a0d      	ldr	r2, [pc, #52]	; (8006504 <RTC_ExitInitMode+0x78>)
 80064d0:	f023 0320 	bic.w	r3, r3, #32
 80064d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff ff80 	bl	80063dc <HAL_RTC_WaitForSynchro>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2203      	movs	r2, #3
 80064e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <RTC_ExitInitMode+0x78>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	4a04      	ldr	r2, [pc, #16]	; (8006504 <RTC_ExitInitMode+0x78>)
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	58004000 	.word	0x58004000

08006508 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800651a:	e005      	b.n	8006528 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	3b0a      	subs	r3, #10
 8006526:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	2b09      	cmp	r3, #9
 800652c:	d8f6      	bhi.n	800651c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	b2da      	uxtb	r2, r3
 8006536:	7afb      	ldrb	r3, [r7, #11]
 8006538:	4313      	orrs	r3, r2
 800653a:	b2db      	uxtb	r3, r3
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	091b      	lsrs	r3, r3, #4
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	0092      	lsls	r2, r2, #2
 800655c:	4413      	add	r3, r2
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	b2da      	uxtb	r2, r3
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	4413      	add	r3, r2
 800656e:	b2db      	uxtb	r3, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3350      	adds	r3, #80	; 0x50
 800658e:	617b      	str	r3, [r7, #20]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4413      	add	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3350      	adds	r3, #80	; 0x50
 80065bc:	60fb      	str	r3, [r7, #12]
#endif /* TAMP */

  tmp += (BackupRegister * 4U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e10f      	b.n	800680a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a87      	ldr	r2, [pc, #540]	; (8006814 <HAL_SPI_Init+0x23c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00f      	beq.n	800661a <HAL_SPI_Init+0x42>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a86      	ldr	r2, [pc, #536]	; (8006818 <HAL_SPI_Init+0x240>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00a      	beq.n	800661a <HAL_SPI_Init+0x42>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a84      	ldr	r2, [pc, #528]	; (800681c <HAL_SPI_Init+0x244>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d005      	beq.n	800661a <HAL_SPI_Init+0x42>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d901      	bls.n	800661a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e0f7      	b.n	800680a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fd5a 	bl	80070d4 <SPI_GetPacketSize>
 8006620:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a7b      	ldr	r2, [pc, #492]	; (8006814 <HAL_SPI_Init+0x23c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00c      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a79      	ldr	r2, [pc, #484]	; (8006818 <HAL_SPI_Init+0x240>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a78      	ldr	r2, [pc, #480]	; (800681c <HAL_SPI_Init+0x244>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Init+0x6e>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d811      	bhi.n	800666a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800664a:	4a72      	ldr	r2, [pc, #456]	; (8006814 <HAL_SPI_Init+0x23c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a70      	ldr	r2, [pc, #448]	; (8006818 <HAL_SPI_Init+0x240>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_SPI_Init+0x8c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a6f      	ldr	r2, [pc, #444]	; (800681c <HAL_SPI_Init+0x244>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d104      	bne.n	800666e <HAL_SPI_Init+0x96>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b10      	cmp	r3, #16
 8006668:	d901      	bls.n	800666e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e0cd      	b.n	800680a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fa fa62 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80066aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b4:	d119      	bne.n	80066ea <HAL_SPI_Init+0x112>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066be:	d103      	bne.n	80066c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10c      	bne.n	80066ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d8:	d107      	bne.n	80066ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <HAL_SPI_Init+0x13e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b06      	cmp	r3, #6
 80066fc:	d90b      	bls.n	8006716 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e007      	b.n	8006726 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006724:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	431a      	orrs	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006738:	ea42 0103 	orr.w	r1, r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	ea42 0103 	orr.w	r1, r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d113      	bne.n	80067c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40013000 	.word	0x40013000
 8006818:	40003800 	.word	0x40003800
 800681c:	40003c00 	.word	0x40003c00

08006820 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	4613      	mov	r3, r2
 800682e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3320      	adds	r3, #32
 8006836:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Transmit+0x2a>
 8006846:	2302      	movs	r3, #2
 8006848:	e1e1      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006852:	f7fc fca3 	bl	800319c <HAL_GetTick>
 8006856:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d007      	beq.n	8006874 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006864:	2302      	movs	r3, #2
 8006866:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006870:	7efb      	ldrb	r3, [r7, #27]
 8006872:	e1cc      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Transmit+0x60>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800688c:	7efb      	ldrb	r3, [r7, #27]
 800688e:	e1be      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2203      	movs	r2, #3
 8006894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	88fa      	ldrh	r2, [r7, #6]
 80068b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80068e0:	d108      	bne.n	80068f4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e009      	b.n	8006908 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006906:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	4b96      	ldr	r3, [pc, #600]	; (8006b68 <HAL_SPI_Transmit+0x348>)
 8006910:	4013      	ands	r3, r2
 8006912:	88f9      	ldrh	r1, [r7, #6]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	430b      	orrs	r3, r1
 800691a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006934:	d107      	bne.n	8006946 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	d947      	bls.n	80069de <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800694e:	e03f      	b.n	80069d0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d114      	bne.n	8006988 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006986:	e023      	b.n	80069d0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006988:	f7fc fc08 	bl	800319c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d803      	bhi.n	80069a0 <HAL_SPI_Transmit+0x180>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699e:	d102      	bne.n	80069a6 <HAL_SPI_Transmit+0x186>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d114      	bne.n	80069d0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fac6 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e11e      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1b9      	bne.n	8006950 <HAL_SPI_Transmit+0x130>
 80069dc:	e0f1      	b.n	8006bc2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b07      	cmp	r3, #7
 80069e4:	f240 80e6 	bls.w	8006bb4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80069e8:	e05d      	b.n	8006aa6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d132      	bne.n	8006a5e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d918      	bls.n	8006a36 <HAL_SPI_Transmit+0x216>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d014      	beq.n	8006a36 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b02      	subs	r3, #2
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a34:	e037      	b.n	8006aa6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	1c9a      	adds	r2, r3, #2
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a5c:	e023      	b.n	8006aa6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a5e:	f7fc fb9d 	bl	800319c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d803      	bhi.n	8006a76 <HAL_SPI_Transmit+0x256>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_Transmit+0x25c>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d114      	bne.n	8006aa6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fa5b 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0b3      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d19b      	bne.n	80069ea <HAL_SPI_Transmit+0x1ca>
 8006ab2:	e086      	b.n	8006bc2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d154      	bne.n	8006b6c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d918      	bls.n	8006b00 <HAL_SPI_Transmit+0x2e0>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d914      	bls.n	8006b00 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b04      	subs	r3, #4
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006afe:	e059      	b.n	8006bb4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d917      	bls.n	8006b3c <HAL_SPI_Transmit+0x31c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	881a      	ldrh	r2, [r3, #0]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b22:	1c9a      	adds	r2, r3, #2
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b02      	subs	r3, #2
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006b3a:	e03b      	b.n	8006bb4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3320      	adds	r3, #32
 8006b46:	7812      	ldrb	r2, [r2, #0]
 8006b48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006b66:	e025      	b.n	8006bb4 <HAL_SPI_Transmit+0x394>
 8006b68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b6c:	f7fc fb16 	bl	800319c <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d803      	bhi.n	8006b84 <HAL_SPI_Transmit+0x364>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d102      	bne.n	8006b8a <HAL_SPI_Transmit+0x36a>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d114      	bne.n	8006bb4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f9d4 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e02c      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f af79 	bne.w	8006ab4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2108      	movs	r1, #8
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa53 	bl	8007078 <SPI_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f9a5 	bl	8006f38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8006c0c:	7efb      	ldrb	r3, [r7, #27]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3720      	adds	r7, #32
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	4613      	mov	r3, r2
 8006c26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3330      	adds	r3, #48	; 0x30
 8006c32:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_SPI_Receive+0x2a>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e173      	b.n	8006f2a <HAL_SPI_Receive+0x312>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c4a:	f7fc faa7 	bl	800319c <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d007      	beq.n	8006c6c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c68:	7ffb      	ldrb	r3, [r7, #31]
 8006c6a:	e15e      	b.n	8006f2a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_SPI_Receive+0x60>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c84:	7ffb      	ldrb	r3, [r7, #31]
 8006c86:	e150      	b.n	8006f2a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	88fa      	ldrh	r2, [r7, #6]
 8006caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006cd8:	d108      	bne.n	8006cec <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e009      	b.n	8006d00 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006cfe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	4b8b      	ldr	r3, [pc, #556]	; (8006f34 <HAL_SPI_Receive+0x31c>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	88f9      	ldrh	r1, [r7, #6]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d2c:	d107      	bne.n	8006d3e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b0f      	cmp	r3, #15
 8006d44:	d948      	bls.n	8006dd8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006d46:	e040      	b.n	8006dca <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	f248 0308 	movw	r3, #32776	; 0x8008
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d014      	beq.n	8006d82 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006d80:	e023      	b.n	8006dca <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d82:	f7fc fa0b 	bl	800319c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d803      	bhi.n	8006d9a <HAL_SPI_Receive+0x182>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d102      	bne.n	8006da0 <HAL_SPI_Receive+0x188>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d114      	bne.n	8006dca <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f8c9 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0af      	b.n	8006f2a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1b8      	bne.n	8006d48 <HAL_SPI_Receive+0x130>
 8006dd6:	e095      	b.n	8006f04 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	f240 808b 	bls.w	8006ef8 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006de2:	e03f      	b.n	8006e64 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d114      	bne.n	8006e1c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	8812      	ldrh	r2, [r2, #0]
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006e1a:	e023      	b.n	8006e64 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e1c:	f7fc f9be 	bl	800319c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d803      	bhi.n	8006e34 <HAL_SPI_Receive+0x21c>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d102      	bne.n	8006e3a <HAL_SPI_Receive+0x222>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d114      	bne.n	8006e64 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f87c 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e062      	b.n	8006f2a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1b9      	bne.n	8006de4 <HAL_SPI_Receive+0x1cc>
 8006e70:	e048      	b.n	8006f04 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d117      	bne.n	8006eb0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006eae:	e023      	b.n	8006ef8 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb0:	f7fc f974 	bl	800319c <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d803      	bhi.n	8006ec8 <HAL_SPI_Receive+0x2b0>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_Receive+0x2b6>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d114      	bne.n	8006ef8 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f832 	bl	8006f38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e018      	b.n	8006f2a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1b6      	bne.n	8006e72 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f817 	bl	8006f38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8006f28:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	ffff0000 	.word	0xffff0000

08006f38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0208 	orr.w	r2, r2, #8
 8006f56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0210 	orr.w	r2, r2, #16
 8006f66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6919      	ldr	r1, [r3, #16]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <SPI_CloseTransfer+0x13c>)
 8006f84:	400b      	ands	r3, r1
 8006f86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d014      	beq.n	8006fce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0220 	orr.w	r2, r2, #32
 8006fcc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d014      	beq.n	8007004 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00f      	beq.n	8007004 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fea:	f043 0204 	orr.w	r2, r3, #4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007002:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00f      	beq.n	800702e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007014:	f043 0201 	orr.w	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699a      	ldr	r2, [r3, #24]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800702c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00f      	beq.n	8007058 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800703e:	f043 0208 	orr.w	r2, r3, #8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007056:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	fffffc90 	.word	0xfffffc90

08007078 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007088:	e010      	b.n	80070ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800708a:	f7fc f887 	bl	800319c <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d803      	bhi.n	80070a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d102      	bne.n	80070a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e00f      	b.n	80070cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695a      	ldr	r2, [r3, #20]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4013      	ands	r3, r2
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d0df      	beq.n	800708a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	3307      	adds	r3, #7
 80070f2:	08db      	lsrs	r3, r3, #3
 80070f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e049      	b.n	80071b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7f9 fee3 	bl	8000efc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	4610      	mov	r0, r2
 800714a:	f000 f949 	bl	80073e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e0ff      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b14      	cmp	r3, #20
 80071e2:	f200 80f0 	bhi.w	80073c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	08007241 	.word	0x08007241
 80071f0:	080073c7 	.word	0x080073c7
 80071f4:	080073c7 	.word	0x080073c7
 80071f8:	080073c7 	.word	0x080073c7
 80071fc:	08007281 	.word	0x08007281
 8007200:	080073c7 	.word	0x080073c7
 8007204:	080073c7 	.word	0x080073c7
 8007208:	080073c7 	.word	0x080073c7
 800720c:	080072c3 	.word	0x080072c3
 8007210:	080073c7 	.word	0x080073c7
 8007214:	080073c7 	.word	0x080073c7
 8007218:	080073c7 	.word	0x080073c7
 800721c:	08007303 	.word	0x08007303
 8007220:	080073c7 	.word	0x080073c7
 8007224:	080073c7 	.word	0x080073c7
 8007228:	080073c7 	.word	0x080073c7
 800722c:	08007345 	.word	0x08007345
 8007230:	080073c7 	.word	0x080073c7
 8007234:	080073c7 	.word	0x080073c7
 8007238:	080073c7 	.word	0x080073c7
 800723c:	08007385 	.word	0x08007385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f964 	bl	8007514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0208 	orr.w	r2, r2, #8
 800725a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0204 	bic.w	r2, r2, #4
 800726a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6999      	ldr	r1, [r3, #24]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	619a      	str	r2, [r3, #24]
      break;
 800727e:	e0a5      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 f9d4 	bl	8007634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800729a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6999      	ldr	r1, [r3, #24]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	021a      	lsls	r2, r3, #8
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	619a      	str	r2, [r3, #24]
      break;
 80072c0:	e084      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fa3d 	bl	8007748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0208 	orr.w	r2, r2, #8
 80072dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 0204 	bic.w	r2, r2, #4
 80072ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69d9      	ldr	r1, [r3, #28]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	61da      	str	r2, [r3, #28]
      break;
 8007300:	e064      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 faa5 	bl	8007858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800731c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69d9      	ldr	r1, [r3, #28]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	021a      	lsls	r2, r3, #8
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	61da      	str	r2, [r3, #28]
      break;
 8007342:	e043      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 faee 	bl	800792c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0208 	orr.w	r2, r2, #8
 800735e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0204 	bic.w	r2, r2, #4
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007382:	e023      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fb32 	bl	80079f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800739e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	021a      	lsls	r2, r3, #8
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073c4:	e002      	b.n	80073cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a40      	ldr	r2, [pc, #256]	; (80074f4 <TIM_Base_SetConfig+0x114>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d00f      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a3d      	ldr	r2, [pc, #244]	; (80074f8 <TIM_Base_SetConfig+0x118>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3c      	ldr	r2, [pc, #240]	; (80074fc <TIM_Base_SetConfig+0x11c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a3b      	ldr	r2, [pc, #236]	; (8007500 <TIM_Base_SetConfig+0x120>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a3a      	ldr	r2, [pc, #232]	; (8007504 <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d108      	bne.n	8007432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a2f      	ldr	r2, [pc, #188]	; (80074f4 <TIM_Base_SetConfig+0x114>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01f      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d01b      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a2c      	ldr	r2, [pc, #176]	; (80074f8 <TIM_Base_SetConfig+0x118>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d017      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2b      	ldr	r2, [pc, #172]	; (80074fc <TIM_Base_SetConfig+0x11c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d013      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a2a      	ldr	r2, [pc, #168]	; (8007500 <TIM_Base_SetConfig+0x120>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00f      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a29      	ldr	r2, [pc, #164]	; (8007504 <TIM_Base_SetConfig+0x124>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00b      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a28      	ldr	r2, [pc, #160]	; (8007508 <TIM_Base_SetConfig+0x128>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d007      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a27      	ldr	r2, [pc, #156]	; (800750c <TIM_Base_SetConfig+0x12c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_Base_SetConfig+0x9a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a26      	ldr	r2, [pc, #152]	; (8007510 <TIM_Base_SetConfig+0x130>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d108      	bne.n	800748c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <TIM_Base_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00f      	beq.n	80074d8 <TIM_Base_SetConfig+0xf8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a12      	ldr	r2, [pc, #72]	; (8007504 <TIM_Base_SetConfig+0x124>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00b      	beq.n	80074d8 <TIM_Base_SetConfig+0xf8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a11      	ldr	r2, [pc, #68]	; (8007508 <TIM_Base_SetConfig+0x128>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d007      	beq.n	80074d8 <TIM_Base_SetConfig+0xf8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a10      	ldr	r2, [pc, #64]	; (800750c <TIM_Base_SetConfig+0x12c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d003      	beq.n	80074d8 <TIM_Base_SetConfig+0xf8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <TIM_Base_SetConfig+0x130>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d103      	bne.n	80074e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	615a      	str	r2, [r3, #20]
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40010400 	.word	0x40010400
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800

08007514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4b37      	ldr	r3, [pc, #220]	; (800761c <TIM_OC1_SetConfig+0x108>)
 8007540:	4013      	ands	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <TIM_OC1_SetConfig+0x10c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00f      	beq.n	8007590 <TIM_OC1_SetConfig+0x7c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <TIM_OC1_SetConfig+0x110>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_OC1_SetConfig+0x7c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <TIM_OC1_SetConfig+0x114>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_OC1_SetConfig+0x7c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <TIM_OC1_SetConfig+0x118>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_OC1_SetConfig+0x7c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a29      	ldr	r2, [pc, #164]	; (8007630 <TIM_OC1_SetConfig+0x11c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10c      	bne.n	80075aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0308 	bic.w	r3, r3, #8
 8007596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f023 0304 	bic.w	r3, r3, #4
 80075a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <TIM_OC1_SetConfig+0x10c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_OC1_SetConfig+0xbe>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1b      	ldr	r2, [pc, #108]	; (8007624 <TIM_OC1_SetConfig+0x110>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_OC1_SetConfig+0xbe>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	; (8007628 <TIM_OC1_SetConfig+0x114>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_OC1_SetConfig+0xbe>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a19      	ldr	r2, [pc, #100]	; (800762c <TIM_OC1_SetConfig+0x118>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_OC1_SetConfig+0xbe>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a18      	ldr	r2, [pc, #96]	; (8007630 <TIM_OC1_SetConfig+0x11c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d111      	bne.n	80075f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	621a      	str	r2, [r3, #32]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	fffeff8f 	.word	0xfffeff8f
 8007620:	40010000 	.word	0x40010000
 8007624:	40010400 	.word	0x40010400
 8007628:	40014000 	.word	0x40014000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800

08007634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f023 0210 	bic.w	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4b34      	ldr	r3, [pc, #208]	; (8007730 <TIM_OC2_SetConfig+0xfc>)
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0320 	bic.w	r3, r3, #32
 800767e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a29      	ldr	r2, [pc, #164]	; (8007734 <TIM_OC2_SetConfig+0x100>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d003      	beq.n	800769c <TIM_OC2_SetConfig+0x68>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a28      	ldr	r2, [pc, #160]	; (8007738 <TIM_OC2_SetConfig+0x104>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d10d      	bne.n	80076b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <TIM_OC2_SetConfig+0x100>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00f      	beq.n	80076e0 <TIM_OC2_SetConfig+0xac>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <TIM_OC2_SetConfig+0x104>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00b      	beq.n	80076e0 <TIM_OC2_SetConfig+0xac>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1c      	ldr	r2, [pc, #112]	; (800773c <TIM_OC2_SetConfig+0x108>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <TIM_OC2_SetConfig+0xac>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <TIM_OC2_SetConfig+0x10c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_OC2_SetConfig+0xac>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <TIM_OC2_SetConfig+0x110>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d113      	bne.n	8007708 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	feff8fff 	.word	0xfeff8fff
 8007734:	40010000 	.word	0x40010000
 8007738:	40010400 	.word	0x40010400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800

08007748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4b33      	ldr	r3, [pc, #204]	; (8007840 <TIM_OC3_SetConfig+0xf8>)
 8007774:	4013      	ands	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a28      	ldr	r2, [pc, #160]	; (8007844 <TIM_OC3_SetConfig+0xfc>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_OC3_SetConfig+0x66>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a27      	ldr	r2, [pc, #156]	; (8007848 <TIM_OC3_SetConfig+0x100>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10d      	bne.n	80077ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <TIM_OC3_SetConfig+0xfc>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00f      	beq.n	80077f2 <TIM_OC3_SetConfig+0xaa>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <TIM_OC3_SetConfig+0x100>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <TIM_OC3_SetConfig+0xaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <TIM_OC3_SetConfig+0x104>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d007      	beq.n	80077f2 <TIM_OC3_SetConfig+0xaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <TIM_OC3_SetConfig+0x108>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_OC3_SetConfig+0xaa>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <TIM_OC3_SetConfig+0x10c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d113      	bne.n	800781a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	fffeff8f 	.word	0xfffeff8f
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800

08007858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <TIM_OC4_SetConfig+0xbc>)
 8007884:	4013      	ands	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800788e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	031b      	lsls	r3, r3, #12
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a19      	ldr	r2, [pc, #100]	; (8007918 <TIM_OC4_SetConfig+0xc0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00f      	beq.n	80078d8 <TIM_OC4_SetConfig+0x80>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a18      	ldr	r2, [pc, #96]	; (800791c <TIM_OC4_SetConfig+0xc4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00b      	beq.n	80078d8 <TIM_OC4_SetConfig+0x80>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a17      	ldr	r2, [pc, #92]	; (8007920 <TIM_OC4_SetConfig+0xc8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d007      	beq.n	80078d8 <TIM_OC4_SetConfig+0x80>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a16      	ldr	r2, [pc, #88]	; (8007924 <TIM_OC4_SetConfig+0xcc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_OC4_SetConfig+0x80>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <TIM_OC4_SetConfig+0xd0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d109      	bne.n	80078ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	019b      	lsls	r3, r3, #6
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	feff8fff 	.word	0xfeff8fff
 8007918:	40010000 	.word	0x40010000
 800791c:	40010400 	.word	0x40010400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800

0800792c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4b21      	ldr	r3, [pc, #132]	; (80079dc <TIM_OC5_SetConfig+0xb0>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800796c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <TIM_OC5_SetConfig+0xb4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_OC5_SetConfig+0x76>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <TIM_OC5_SetConfig+0xb8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_OC5_SetConfig+0x76>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <TIM_OC5_SetConfig+0xbc>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_OC5_SetConfig+0x76>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a15      	ldr	r2, [pc, #84]	; (80079ec <TIM_OC5_SetConfig+0xc0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_OC5_SetConfig+0x76>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <TIM_OC5_SetConfig+0xc4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d109      	bne.n	80079b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	fffeff8f 	.word	0xfffeff8f
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40010400 	.word	0x40010400
 80079e8:	40014000 	.word	0x40014000
 80079ec:	40014400 	.word	0x40014400
 80079f0:	40014800 	.word	0x40014800

080079f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <TIM_OC6_SetConfig+0xb4>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	051b      	lsls	r3, r3, #20
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a19      	ldr	r2, [pc, #100]	; (8007aac <TIM_OC6_SetConfig+0xb8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00f      	beq.n	8007a6c <TIM_OC6_SetConfig+0x78>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <TIM_OC6_SetConfig+0xbc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_OC6_SetConfig+0x78>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <TIM_OC6_SetConfig+0xc0>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC6_SetConfig+0x78>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	; (8007ab8 <TIM_OC6_SetConfig+0xc4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC6_SetConfig+0x78>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	; (8007abc <TIM_OC6_SetConfig+0xc8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d109      	bne.n	8007a80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	feff8fff 	.word	0xfeff8fff
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <HAL_TIMEx_PWMN_Start+0x24>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	bf14      	ite	ne
 8007adc:	2301      	movne	r3, #1
 8007ade:	2300      	moveq	r3, #0
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	e022      	b.n	8007b2a <HAL_TIMEx_PWMN_Start+0x6a>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d109      	bne.n	8007afe <HAL_TIMEx_PWMN_Start+0x3e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	e015      	b.n	8007b2a <HAL_TIMEx_PWMN_Start+0x6a>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d109      	bne.n	8007b18 <HAL_TIMEx_PWMN_Start+0x58>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	bf14      	ite	ne
 8007b10:	2301      	movne	r3, #1
 8007b12:	2300      	moveq	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	e008      	b.n	8007b2a <HAL_TIMEx_PWMN_Start+0x6a>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	bf14      	ite	ne
 8007b24:	2301      	movne	r3, #1
 8007b26:	2300      	moveq	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e073      	b.n	8007c1a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d104      	bne.n	8007b42 <HAL_TIMEx_PWMN_Start+0x82>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b40:	e013      	b.n	8007b6a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d104      	bne.n	8007b52 <HAL_TIMEx_PWMN_Start+0x92>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b50:	e00b      	b.n	8007b6a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d104      	bne.n	8007b62 <HAL_TIMEx_PWMN_Start+0xa2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b60:	e003      	b.n	8007b6a <HAL_TIMEx_PWMN_Start+0xaa>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2204      	movs	r2, #4
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 f972 	bl	8007e5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a25      	ldr	r2, [pc, #148]	; (8007c24 <HAL_TIMEx_PWMN_Start+0x164>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d022      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d01d      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <HAL_TIMEx_PWMN_Start+0x168>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d018      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d013      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1e      	ldr	r2, [pc, #120]	; (8007c30 <HAL_TIMEx_PWMN_Start+0x170>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <HAL_TIMEx_PWMN_Start+0x174>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d009      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1b      	ldr	r2, [pc, #108]	; (8007c38 <HAL_TIMEx_PWMN_Start+0x178>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_TIMEx_PWMN_Start+0x118>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1a      	ldr	r2, [pc, #104]	; (8007c3c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d115      	bne.n	8007c04 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <HAL_TIMEx_PWMN_Start+0x180>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b06      	cmp	r3, #6
 8007be8:	d015      	beq.n	8007c16 <HAL_TIMEx_PWMN_Start+0x156>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf0:	d011      	beq.n	8007c16 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c02:	e008      	b.n	8007c16 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e000      	b.n	8007c18 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	40010400 	.word	0x40010400
 8007c38:	40001800 	.word	0x40001800
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	00010007 	.word	0x00010007

08007c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d101      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c58:	2302      	movs	r3, #2
 8007c5a:	e06d      	b.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a30      	ldr	r2, [pc, #192]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a2f      	ldr	r2, [pc, #188]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d108      	bne.n	8007ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a20      	ldr	r2, [pc, #128]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d022      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cce:	d01d      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1d      	ldr	r2, [pc, #116]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d018      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1c      	ldr	r2, [pc, #112]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d013      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00e      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d009      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a15      	ldr	r2, [pc, #84]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d10c      	bne.n	8007d26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40010400 	.word	0x40010400
 8007d4c:	40000400 	.word	0x40000400
 8007d50:	40000800 	.word	0x40000800
 8007d54:	40000c00 	.word	0x40000c00
 8007d58:	40001800 	.word	0x40001800
 8007d5c:	40014000 	.word	0x40014000

08007d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e065      	b.n	8007e48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d115      	bne.n	8007e36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	051b      	lsls	r3, r3, #20
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40010400 	.word	0x40010400

08007e5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	2204      	movs	r2, #4
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1a      	ldr	r2, [r3, #32]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	401a      	ands	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1a      	ldr	r2, [r3, #32]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	fa01 f303 	lsl.w	r3, r1, r3
 8007e94:	431a      	orrs	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <siprintf>:
 8007ea8:	b40e      	push	{r1, r2, r3}
 8007eaa:	b500      	push	{lr}
 8007eac:	b09c      	sub	sp, #112	; 0x70
 8007eae:	ab1d      	add	r3, sp, #116	; 0x74
 8007eb0:	9002      	str	r0, [sp, #8]
 8007eb2:	9006      	str	r0, [sp, #24]
 8007eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb8:	4809      	ldr	r0, [pc, #36]	; (8007ee0 <siprintf+0x38>)
 8007eba:	9107      	str	r1, [sp, #28]
 8007ebc:	9104      	str	r1, [sp, #16]
 8007ebe:	4909      	ldr	r1, [pc, #36]	; (8007ee4 <siprintf+0x3c>)
 8007ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec4:	9105      	str	r1, [sp, #20]
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	a902      	add	r1, sp, #8
 8007ecc:	f000 f992 	bl	80081f4 <_svfiprintf_r>
 8007ed0:	9b02      	ldr	r3, [sp, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	b01c      	add	sp, #112	; 0x70
 8007ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007edc:	b003      	add	sp, #12
 8007ede:	4770      	bx	lr
 8007ee0:	240000ec 	.word	0x240000ec
 8007ee4:	ffff0208 	.word	0xffff0208

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <__errno>:
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <__errno+0x8>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	240000ec 	.word	0x240000ec

08007f04 <__libc_init_array>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4d0d      	ldr	r5, [pc, #52]	; (8007f3c <__libc_init_array+0x38>)
 8007f08:	4c0d      	ldr	r4, [pc, #52]	; (8007f40 <__libc_init_array+0x3c>)
 8007f0a:	1b64      	subs	r4, r4, r5
 8007f0c:	10a4      	asrs	r4, r4, #2
 8007f0e:	2600      	movs	r6, #0
 8007f10:	42a6      	cmp	r6, r4
 8007f12:	d109      	bne.n	8007f28 <__libc_init_array+0x24>
 8007f14:	4d0b      	ldr	r5, [pc, #44]	; (8007f44 <__libc_init_array+0x40>)
 8007f16:	4c0c      	ldr	r4, [pc, #48]	; (8007f48 <__libc_init_array+0x44>)
 8007f18:	f001 fa56 	bl	80093c8 <_init>
 8007f1c:	1b64      	subs	r4, r4, r5
 8007f1e:	10a4      	asrs	r4, r4, #2
 8007f20:	2600      	movs	r6, #0
 8007f22:	42a6      	cmp	r6, r4
 8007f24:	d105      	bne.n	8007f32 <__libc_init_array+0x2e>
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f2c:	4798      	blx	r3
 8007f2e:	3601      	adds	r6, #1
 8007f30:	e7ee      	b.n	8007f10 <__libc_init_array+0xc>
 8007f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f36:	4798      	blx	r3
 8007f38:	3601      	adds	r6, #1
 8007f3a:	e7f2      	b.n	8007f22 <__libc_init_array+0x1e>
 8007f3c:	080104d8 	.word	0x080104d8
 8007f40:	080104d8 	.word	0x080104d8
 8007f44:	080104d8 	.word	0x080104d8
 8007f48:	080104dc 	.word	0x080104dc

08007f4c <__retarget_lock_acquire_recursive>:
 8007f4c:	4770      	bx	lr

08007f4e <__retarget_lock_release_recursive>:
 8007f4e:	4770      	bx	lr

08007f50 <_free_r>:
 8007f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d044      	beq.n	8007fe0 <_free_r+0x90>
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f62:	bfb8      	it	lt
 8007f64:	18e4      	addlt	r4, r4, r3
 8007f66:	f000 f8df 	bl	8008128 <__malloc_lock>
 8007f6a:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <_free_r+0x94>)
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	6813      	ldr	r3, [r2, #0]
 8007f70:	b933      	cbnz	r3, 8007f80 <_free_r+0x30>
 8007f72:	6063      	str	r3, [r4, #4]
 8007f74:	6014      	str	r4, [r2, #0]
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f7c:	f000 b8da 	b.w	8008134 <__malloc_unlock>
 8007f80:	42a3      	cmp	r3, r4
 8007f82:	d908      	bls.n	8007f96 <_free_r+0x46>
 8007f84:	6825      	ldr	r5, [r4, #0]
 8007f86:	1961      	adds	r1, r4, r5
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf01      	itttt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	1949      	addeq	r1, r1, r5
 8007f92:	6021      	streq	r1, [r4, #0]
 8007f94:	e7ed      	b.n	8007f72 <_free_r+0x22>
 8007f96:	461a      	mov	r2, r3
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	b10b      	cbz	r3, 8007fa0 <_free_r+0x50>
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	d9fa      	bls.n	8007f96 <_free_r+0x46>
 8007fa0:	6811      	ldr	r1, [r2, #0]
 8007fa2:	1855      	adds	r5, r2, r1
 8007fa4:	42a5      	cmp	r5, r4
 8007fa6:	d10b      	bne.n	8007fc0 <_free_r+0x70>
 8007fa8:	6824      	ldr	r4, [r4, #0]
 8007faa:	4421      	add	r1, r4
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	42a3      	cmp	r3, r4
 8007fb0:	6011      	str	r1, [r2, #0]
 8007fb2:	d1e0      	bne.n	8007f76 <_free_r+0x26>
 8007fb4:	681c      	ldr	r4, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	6053      	str	r3, [r2, #4]
 8007fba:	440c      	add	r4, r1
 8007fbc:	6014      	str	r4, [r2, #0]
 8007fbe:	e7da      	b.n	8007f76 <_free_r+0x26>
 8007fc0:	d902      	bls.n	8007fc8 <_free_r+0x78>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	e7d6      	b.n	8007f76 <_free_r+0x26>
 8007fc8:	6825      	ldr	r5, [r4, #0]
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf04      	itt	eq
 8007fd0:	6819      	ldreq	r1, [r3, #0]
 8007fd2:	685b      	ldreq	r3, [r3, #4]
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	bf04      	itt	eq
 8007fd8:	1949      	addeq	r1, r1, r5
 8007fda:	6021      	streq	r1, [r4, #0]
 8007fdc:	6054      	str	r4, [r2, #4]
 8007fde:	e7ca      	b.n	8007f76 <_free_r+0x26>
 8007fe0:	b003      	add	sp, #12
 8007fe2:	bd30      	pop	{r4, r5, pc}
 8007fe4:	2400089c 	.word	0x2400089c

08007fe8 <sbrk_aligned>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	4e0e      	ldr	r6, [pc, #56]	; (8008024 <sbrk_aligned+0x3c>)
 8007fec:	460c      	mov	r4, r1
 8007fee:	6831      	ldr	r1, [r6, #0]
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	b911      	cbnz	r1, 8007ffa <sbrk_aligned+0x12>
 8007ff4:	f000 fba6 	bl	8008744 <_sbrk_r>
 8007ff8:	6030      	str	r0, [r6, #0]
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 fba1 	bl	8008744 <_sbrk_r>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d00a      	beq.n	800801c <sbrk_aligned+0x34>
 8008006:	1cc4      	adds	r4, r0, #3
 8008008:	f024 0403 	bic.w	r4, r4, #3
 800800c:	42a0      	cmp	r0, r4
 800800e:	d007      	beq.n	8008020 <sbrk_aligned+0x38>
 8008010:	1a21      	subs	r1, r4, r0
 8008012:	4628      	mov	r0, r5
 8008014:	f000 fb96 	bl	8008744 <_sbrk_r>
 8008018:	3001      	adds	r0, #1
 800801a:	d101      	bne.n	8008020 <sbrk_aligned+0x38>
 800801c:	f04f 34ff 	mov.w	r4, #4294967295
 8008020:	4620      	mov	r0, r4
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	240008a0 	.word	0x240008a0

08008028 <_malloc_r>:
 8008028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800802c:	1ccd      	adds	r5, r1, #3
 800802e:	f025 0503 	bic.w	r5, r5, #3
 8008032:	3508      	adds	r5, #8
 8008034:	2d0c      	cmp	r5, #12
 8008036:	bf38      	it	cc
 8008038:	250c      	movcc	r5, #12
 800803a:	2d00      	cmp	r5, #0
 800803c:	4607      	mov	r7, r0
 800803e:	db01      	blt.n	8008044 <_malloc_r+0x1c>
 8008040:	42a9      	cmp	r1, r5
 8008042:	d905      	bls.n	8008050 <_malloc_r+0x28>
 8008044:	230c      	movs	r3, #12
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	2600      	movs	r6, #0
 800804a:	4630      	mov	r0, r6
 800804c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008124 <_malloc_r+0xfc>
 8008054:	f000 f868 	bl	8008128 <__malloc_lock>
 8008058:	f8d8 3000 	ldr.w	r3, [r8]
 800805c:	461c      	mov	r4, r3
 800805e:	bb5c      	cbnz	r4, 80080b8 <_malloc_r+0x90>
 8008060:	4629      	mov	r1, r5
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff ffc0 	bl	8007fe8 <sbrk_aligned>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	4604      	mov	r4, r0
 800806c:	d155      	bne.n	800811a <_malloc_r+0xf2>
 800806e:	f8d8 4000 	ldr.w	r4, [r8]
 8008072:	4626      	mov	r6, r4
 8008074:	2e00      	cmp	r6, #0
 8008076:	d145      	bne.n	8008104 <_malloc_r+0xdc>
 8008078:	2c00      	cmp	r4, #0
 800807a:	d048      	beq.n	800810e <_malloc_r+0xe6>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	4631      	mov	r1, r6
 8008080:	4638      	mov	r0, r7
 8008082:	eb04 0903 	add.w	r9, r4, r3
 8008086:	f000 fb5d 	bl	8008744 <_sbrk_r>
 800808a:	4581      	cmp	r9, r0
 800808c:	d13f      	bne.n	800810e <_malloc_r+0xe6>
 800808e:	6821      	ldr	r1, [r4, #0]
 8008090:	1a6d      	subs	r5, r5, r1
 8008092:	4629      	mov	r1, r5
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff ffa7 	bl	8007fe8 <sbrk_aligned>
 800809a:	3001      	adds	r0, #1
 800809c:	d037      	beq.n	800810e <_malloc_r+0xe6>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	442b      	add	r3, r5
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	f8d8 3000 	ldr.w	r3, [r8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d038      	beq.n	800811e <_malloc_r+0xf6>
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	42a2      	cmp	r2, r4
 80080b0:	d12b      	bne.n	800810a <_malloc_r+0xe2>
 80080b2:	2200      	movs	r2, #0
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	e00f      	b.n	80080d8 <_malloc_r+0xb0>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	1b52      	subs	r2, r2, r5
 80080bc:	d41f      	bmi.n	80080fe <_malloc_r+0xd6>
 80080be:	2a0b      	cmp	r2, #11
 80080c0:	d917      	bls.n	80080f2 <_malloc_r+0xca>
 80080c2:	1961      	adds	r1, r4, r5
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	6025      	str	r5, [r4, #0]
 80080c8:	bf18      	it	ne
 80080ca:	6059      	strne	r1, [r3, #4]
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	bf08      	it	eq
 80080d0:	f8c8 1000 	streq.w	r1, [r8]
 80080d4:	5162      	str	r2, [r4, r5]
 80080d6:	604b      	str	r3, [r1, #4]
 80080d8:	4638      	mov	r0, r7
 80080da:	f104 060b 	add.w	r6, r4, #11
 80080de:	f000 f829 	bl	8008134 <__malloc_unlock>
 80080e2:	f026 0607 	bic.w	r6, r6, #7
 80080e6:	1d23      	adds	r3, r4, #4
 80080e8:	1af2      	subs	r2, r6, r3
 80080ea:	d0ae      	beq.n	800804a <_malloc_r+0x22>
 80080ec:	1b9b      	subs	r3, r3, r6
 80080ee:	50a3      	str	r3, [r4, r2]
 80080f0:	e7ab      	b.n	800804a <_malloc_r+0x22>
 80080f2:	42a3      	cmp	r3, r4
 80080f4:	6862      	ldr	r2, [r4, #4]
 80080f6:	d1dd      	bne.n	80080b4 <_malloc_r+0x8c>
 80080f8:	f8c8 2000 	str.w	r2, [r8]
 80080fc:	e7ec      	b.n	80080d8 <_malloc_r+0xb0>
 80080fe:	4623      	mov	r3, r4
 8008100:	6864      	ldr	r4, [r4, #4]
 8008102:	e7ac      	b.n	800805e <_malloc_r+0x36>
 8008104:	4634      	mov	r4, r6
 8008106:	6876      	ldr	r6, [r6, #4]
 8008108:	e7b4      	b.n	8008074 <_malloc_r+0x4c>
 800810a:	4613      	mov	r3, r2
 800810c:	e7cc      	b.n	80080a8 <_malloc_r+0x80>
 800810e:	230c      	movs	r3, #12
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	4638      	mov	r0, r7
 8008114:	f000 f80e 	bl	8008134 <__malloc_unlock>
 8008118:	e797      	b.n	800804a <_malloc_r+0x22>
 800811a:	6025      	str	r5, [r4, #0]
 800811c:	e7dc      	b.n	80080d8 <_malloc_r+0xb0>
 800811e:	605b      	str	r3, [r3, #4]
 8008120:	deff      	udf	#255	; 0xff
 8008122:	bf00      	nop
 8008124:	2400089c 	.word	0x2400089c

08008128 <__malloc_lock>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__malloc_lock+0x8>)
 800812a:	f7ff bf0f 	b.w	8007f4c <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	24000898 	.word	0x24000898

08008134 <__malloc_unlock>:
 8008134:	4801      	ldr	r0, [pc, #4]	; (800813c <__malloc_unlock+0x8>)
 8008136:	f7ff bf0a 	b.w	8007f4e <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	24000898 	.word	0x24000898

08008140 <__ssputs_r>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	688e      	ldr	r6, [r1, #8]
 8008146:	461f      	mov	r7, r3
 8008148:	42be      	cmp	r6, r7
 800814a:	680b      	ldr	r3, [r1, #0]
 800814c:	4682      	mov	sl, r0
 800814e:	460c      	mov	r4, r1
 8008150:	4690      	mov	r8, r2
 8008152:	d82c      	bhi.n	80081ae <__ssputs_r+0x6e>
 8008154:	898a      	ldrh	r2, [r1, #12]
 8008156:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800815a:	d026      	beq.n	80081aa <__ssputs_r+0x6a>
 800815c:	6965      	ldr	r5, [r4, #20]
 800815e:	6909      	ldr	r1, [r1, #16]
 8008160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008164:	eba3 0901 	sub.w	r9, r3, r1
 8008168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800816c:	1c7b      	adds	r3, r7, #1
 800816e:	444b      	add	r3, r9
 8008170:	106d      	asrs	r5, r5, #1
 8008172:	429d      	cmp	r5, r3
 8008174:	bf38      	it	cc
 8008176:	461d      	movcc	r5, r3
 8008178:	0553      	lsls	r3, r2, #21
 800817a:	d527      	bpl.n	80081cc <__ssputs_r+0x8c>
 800817c:	4629      	mov	r1, r5
 800817e:	f7ff ff53 	bl	8008028 <_malloc_r>
 8008182:	4606      	mov	r6, r0
 8008184:	b360      	cbz	r0, 80081e0 <__ssputs_r+0xa0>
 8008186:	6921      	ldr	r1, [r4, #16]
 8008188:	464a      	mov	r2, r9
 800818a:	f000 faeb 	bl	8008764 <memcpy>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	6126      	str	r6, [r4, #16]
 800819c:	6165      	str	r5, [r4, #20]
 800819e:	444e      	add	r6, r9
 80081a0:	eba5 0509 	sub.w	r5, r5, r9
 80081a4:	6026      	str	r6, [r4, #0]
 80081a6:	60a5      	str	r5, [r4, #8]
 80081a8:	463e      	mov	r6, r7
 80081aa:	42be      	cmp	r6, r7
 80081ac:	d900      	bls.n	80081b0 <__ssputs_r+0x70>
 80081ae:	463e      	mov	r6, r7
 80081b0:	6820      	ldr	r0, [r4, #0]
 80081b2:	4632      	mov	r2, r6
 80081b4:	4641      	mov	r1, r8
 80081b6:	f000 faab 	bl	8008710 <memmove>
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	1b9b      	subs	r3, r3, r6
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	4433      	add	r3, r6
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	2000      	movs	r0, #0
 80081c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081cc:	462a      	mov	r2, r5
 80081ce:	f000 fad7 	bl	8008780 <_realloc_r>
 80081d2:	4606      	mov	r6, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1e0      	bne.n	800819a <__ssputs_r+0x5a>
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	4650      	mov	r0, sl
 80081dc:	f7ff feb8 	bl	8007f50 <_free_r>
 80081e0:	230c      	movs	r3, #12
 80081e2:	f8ca 3000 	str.w	r3, [sl]
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	e7e9      	b.n	80081c8 <__ssputs_r+0x88>

080081f4 <_svfiprintf_r>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4698      	mov	r8, r3
 80081fa:	898b      	ldrh	r3, [r1, #12]
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	b09d      	sub	sp, #116	; 0x74
 8008200:	4607      	mov	r7, r0
 8008202:	460d      	mov	r5, r1
 8008204:	4614      	mov	r4, r2
 8008206:	d50e      	bpl.n	8008226 <_svfiprintf_r+0x32>
 8008208:	690b      	ldr	r3, [r1, #16]
 800820a:	b963      	cbnz	r3, 8008226 <_svfiprintf_r+0x32>
 800820c:	2140      	movs	r1, #64	; 0x40
 800820e:	f7ff ff0b 	bl	8008028 <_malloc_r>
 8008212:	6028      	str	r0, [r5, #0]
 8008214:	6128      	str	r0, [r5, #16]
 8008216:	b920      	cbnz	r0, 8008222 <_svfiprintf_r+0x2e>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e0d0      	b.n	80083c4 <_svfiprintf_r+0x1d0>
 8008222:	2340      	movs	r3, #64	; 0x40
 8008224:	616b      	str	r3, [r5, #20]
 8008226:	2300      	movs	r3, #0
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	2320      	movs	r3, #32
 800822c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008230:	f8cd 800c 	str.w	r8, [sp, #12]
 8008234:	2330      	movs	r3, #48	; 0x30
 8008236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083dc <_svfiprintf_r+0x1e8>
 800823a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823e:	f04f 0901 	mov.w	r9, #1
 8008242:	4623      	mov	r3, r4
 8008244:	469a      	mov	sl, r3
 8008246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800824a:	b10a      	cbz	r2, 8008250 <_svfiprintf_r+0x5c>
 800824c:	2a25      	cmp	r2, #37	; 0x25
 800824e:	d1f9      	bne.n	8008244 <_svfiprintf_r+0x50>
 8008250:	ebba 0b04 	subs.w	fp, sl, r4
 8008254:	d00b      	beq.n	800826e <_svfiprintf_r+0x7a>
 8008256:	465b      	mov	r3, fp
 8008258:	4622      	mov	r2, r4
 800825a:	4629      	mov	r1, r5
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ff6f 	bl	8008140 <__ssputs_r>
 8008262:	3001      	adds	r0, #1
 8008264:	f000 80a9 	beq.w	80083ba <_svfiprintf_r+0x1c6>
 8008268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800826a:	445a      	add	r2, fp
 800826c:	9209      	str	r2, [sp, #36]	; 0x24
 800826e:	f89a 3000 	ldrb.w	r3, [sl]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80a1 	beq.w	80083ba <_svfiprintf_r+0x1c6>
 8008278:	2300      	movs	r3, #0
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008282:	f10a 0a01 	add.w	sl, sl, #1
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800828e:	931a      	str	r3, [sp, #104]	; 0x68
 8008290:	4654      	mov	r4, sl
 8008292:	2205      	movs	r2, #5
 8008294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008298:	4850      	ldr	r0, [pc, #320]	; (80083dc <_svfiprintf_r+0x1e8>)
 800829a:	f7f8 f821 	bl	80002e0 <memchr>
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	b9d8      	cbnz	r0, 80082da <_svfiprintf_r+0xe6>
 80082a2:	06d0      	lsls	r0, r2, #27
 80082a4:	bf44      	itt	mi
 80082a6:	2320      	movmi	r3, #32
 80082a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ac:	0711      	lsls	r1, r2, #28
 80082ae:	bf44      	itt	mi
 80082b0:	232b      	movmi	r3, #43	; 0x2b
 80082b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b6:	f89a 3000 	ldrb.w	r3, [sl]
 80082ba:	2b2a      	cmp	r3, #42	; 0x2a
 80082bc:	d015      	beq.n	80082ea <_svfiprintf_r+0xf6>
 80082be:	9a07      	ldr	r2, [sp, #28]
 80082c0:	4654      	mov	r4, sl
 80082c2:	2000      	movs	r0, #0
 80082c4:	f04f 0c0a 	mov.w	ip, #10
 80082c8:	4621      	mov	r1, r4
 80082ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ce:	3b30      	subs	r3, #48	; 0x30
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d94d      	bls.n	8008370 <_svfiprintf_r+0x17c>
 80082d4:	b1b0      	cbz	r0, 8008304 <_svfiprintf_r+0x110>
 80082d6:	9207      	str	r2, [sp, #28]
 80082d8:	e014      	b.n	8008304 <_svfiprintf_r+0x110>
 80082da:	eba0 0308 	sub.w	r3, r0, r8
 80082de:	fa09 f303 	lsl.w	r3, r9, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	46a2      	mov	sl, r4
 80082e8:	e7d2      	b.n	8008290 <_svfiprintf_r+0x9c>
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	1d19      	adds	r1, r3, #4
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	9103      	str	r1, [sp, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfbb      	ittet	lt
 80082f6:	425b      	neglt	r3, r3
 80082f8:	f042 0202 	orrlt.w	r2, r2, #2
 80082fc:	9307      	strge	r3, [sp, #28]
 80082fe:	9307      	strlt	r3, [sp, #28]
 8008300:	bfb8      	it	lt
 8008302:	9204      	strlt	r2, [sp, #16]
 8008304:	7823      	ldrb	r3, [r4, #0]
 8008306:	2b2e      	cmp	r3, #46	; 0x2e
 8008308:	d10c      	bne.n	8008324 <_svfiprintf_r+0x130>
 800830a:	7863      	ldrb	r3, [r4, #1]
 800830c:	2b2a      	cmp	r3, #42	; 0x2a
 800830e:	d134      	bne.n	800837a <_svfiprintf_r+0x186>
 8008310:	9b03      	ldr	r3, [sp, #12]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	9203      	str	r2, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfb8      	it	lt
 800831c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008320:	3402      	adds	r4, #2
 8008322:	9305      	str	r3, [sp, #20]
 8008324:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083ec <_svfiprintf_r+0x1f8>
 8008328:	7821      	ldrb	r1, [r4, #0]
 800832a:	2203      	movs	r2, #3
 800832c:	4650      	mov	r0, sl
 800832e:	f7f7 ffd7 	bl	80002e0 <memchr>
 8008332:	b138      	cbz	r0, 8008344 <_svfiprintf_r+0x150>
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	eba0 000a 	sub.w	r0, r0, sl
 800833a:	2240      	movs	r2, #64	; 0x40
 800833c:	4082      	lsls	r2, r0
 800833e:	4313      	orrs	r3, r2
 8008340:	3401      	adds	r4, #1
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008348:	4825      	ldr	r0, [pc, #148]	; (80083e0 <_svfiprintf_r+0x1ec>)
 800834a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800834e:	2206      	movs	r2, #6
 8008350:	f7f7 ffc6 	bl	80002e0 <memchr>
 8008354:	2800      	cmp	r0, #0
 8008356:	d038      	beq.n	80083ca <_svfiprintf_r+0x1d6>
 8008358:	4b22      	ldr	r3, [pc, #136]	; (80083e4 <_svfiprintf_r+0x1f0>)
 800835a:	bb1b      	cbnz	r3, 80083a4 <_svfiprintf_r+0x1b0>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	3307      	adds	r3, #7
 8008360:	f023 0307 	bic.w	r3, r3, #7
 8008364:	3308      	adds	r3, #8
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	4433      	add	r3, r6
 800836c:	9309      	str	r3, [sp, #36]	; 0x24
 800836e:	e768      	b.n	8008242 <_svfiprintf_r+0x4e>
 8008370:	fb0c 3202 	mla	r2, ip, r2, r3
 8008374:	460c      	mov	r4, r1
 8008376:	2001      	movs	r0, #1
 8008378:	e7a6      	b.n	80082c8 <_svfiprintf_r+0xd4>
 800837a:	2300      	movs	r3, #0
 800837c:	3401      	adds	r4, #1
 800837e:	9305      	str	r3, [sp, #20]
 8008380:	4619      	mov	r1, r3
 8008382:	f04f 0c0a 	mov.w	ip, #10
 8008386:	4620      	mov	r0, r4
 8008388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800838c:	3a30      	subs	r2, #48	; 0x30
 800838e:	2a09      	cmp	r2, #9
 8008390:	d903      	bls.n	800839a <_svfiprintf_r+0x1a6>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0c6      	beq.n	8008324 <_svfiprintf_r+0x130>
 8008396:	9105      	str	r1, [sp, #20]
 8008398:	e7c4      	b.n	8008324 <_svfiprintf_r+0x130>
 800839a:	fb0c 2101 	mla	r1, ip, r1, r2
 800839e:	4604      	mov	r4, r0
 80083a0:	2301      	movs	r3, #1
 80083a2:	e7f0      	b.n	8008386 <_svfiprintf_r+0x192>
 80083a4:	ab03      	add	r3, sp, #12
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	462a      	mov	r2, r5
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <_svfiprintf_r+0x1f4>)
 80083ac:	a904      	add	r1, sp, #16
 80083ae:	4638      	mov	r0, r7
 80083b0:	f3af 8000 	nop.w
 80083b4:	1c42      	adds	r2, r0, #1
 80083b6:	4606      	mov	r6, r0
 80083b8:	d1d6      	bne.n	8008368 <_svfiprintf_r+0x174>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af2d 	bmi.w	800821c <_svfiprintf_r+0x28>
 80083c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c4:	b01d      	add	sp, #116	; 0x74
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ca:	ab03      	add	r3, sp, #12
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	462a      	mov	r2, r5
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <_svfiprintf_r+0x1f4>)
 80083d2:	a904      	add	r1, sp, #16
 80083d4:	4638      	mov	r0, r7
 80083d6:	f000 f879 	bl	80084cc <_printf_i>
 80083da:	e7eb      	b.n	80083b4 <_svfiprintf_r+0x1c0>
 80083dc:	080102cd 	.word	0x080102cd
 80083e0:	080102d7 	.word	0x080102d7
 80083e4:	00000000 	.word	0x00000000
 80083e8:	08008141 	.word	0x08008141
 80083ec:	080102d3 	.word	0x080102d3

080083f0 <_printf_common>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	4616      	mov	r6, r2
 80083f6:	4699      	mov	r9, r3
 80083f8:	688a      	ldr	r2, [r1, #8]
 80083fa:	690b      	ldr	r3, [r1, #16]
 80083fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008400:	4293      	cmp	r3, r2
 8008402:	bfb8      	it	lt
 8008404:	4613      	movlt	r3, r2
 8008406:	6033      	str	r3, [r6, #0]
 8008408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800840c:	4607      	mov	r7, r0
 800840e:	460c      	mov	r4, r1
 8008410:	b10a      	cbz	r2, 8008416 <_printf_common+0x26>
 8008412:	3301      	adds	r3, #1
 8008414:	6033      	str	r3, [r6, #0]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	0699      	lsls	r1, r3, #26
 800841a:	bf42      	ittt	mi
 800841c:	6833      	ldrmi	r3, [r6, #0]
 800841e:	3302      	addmi	r3, #2
 8008420:	6033      	strmi	r3, [r6, #0]
 8008422:	6825      	ldr	r5, [r4, #0]
 8008424:	f015 0506 	ands.w	r5, r5, #6
 8008428:	d106      	bne.n	8008438 <_printf_common+0x48>
 800842a:	f104 0a19 	add.w	sl, r4, #25
 800842e:	68e3      	ldr	r3, [r4, #12]
 8008430:	6832      	ldr	r2, [r6, #0]
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc26      	bgt.n	8008486 <_printf_common+0x96>
 8008438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800843c:	1e13      	subs	r3, r2, #0
 800843e:	6822      	ldr	r2, [r4, #0]
 8008440:	bf18      	it	ne
 8008442:	2301      	movne	r3, #1
 8008444:	0692      	lsls	r2, r2, #26
 8008446:	d42b      	bmi.n	80084a0 <_printf_common+0xb0>
 8008448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844c:	4649      	mov	r1, r9
 800844e:	4638      	mov	r0, r7
 8008450:	47c0      	blx	r8
 8008452:	3001      	adds	r0, #1
 8008454:	d01e      	beq.n	8008494 <_printf_common+0xa4>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	2b04      	cmp	r3, #4
 8008460:	bf02      	ittt	eq
 8008462:	68e5      	ldreq	r5, [r4, #12]
 8008464:	6833      	ldreq	r3, [r6, #0]
 8008466:	1aed      	subeq	r5, r5, r3
 8008468:	68a3      	ldr	r3, [r4, #8]
 800846a:	bf0c      	ite	eq
 800846c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008470:	2500      	movne	r5, #0
 8008472:	4293      	cmp	r3, r2
 8008474:	bfc4      	itt	gt
 8008476:	1a9b      	subgt	r3, r3, r2
 8008478:	18ed      	addgt	r5, r5, r3
 800847a:	2600      	movs	r6, #0
 800847c:	341a      	adds	r4, #26
 800847e:	42b5      	cmp	r5, r6
 8008480:	d11a      	bne.n	80084b8 <_printf_common+0xc8>
 8008482:	2000      	movs	r0, #0
 8008484:	e008      	b.n	8008498 <_printf_common+0xa8>
 8008486:	2301      	movs	r3, #1
 8008488:	4652      	mov	r2, sl
 800848a:	4649      	mov	r1, r9
 800848c:	4638      	mov	r0, r7
 800848e:	47c0      	blx	r8
 8008490:	3001      	adds	r0, #1
 8008492:	d103      	bne.n	800849c <_printf_common+0xac>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849c:	3501      	adds	r5, #1
 800849e:	e7c6      	b.n	800842e <_printf_common+0x3e>
 80084a0:	18e1      	adds	r1, r4, r3
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	2030      	movs	r0, #48	; 0x30
 80084a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084aa:	4422      	add	r2, r4
 80084ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b4:	3302      	adds	r3, #2
 80084b6:	e7c7      	b.n	8008448 <_printf_common+0x58>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4622      	mov	r2, r4
 80084bc:	4649      	mov	r1, r9
 80084be:	4638      	mov	r0, r7
 80084c0:	47c0      	blx	r8
 80084c2:	3001      	adds	r0, #1
 80084c4:	d0e6      	beq.n	8008494 <_printf_common+0xa4>
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7d9      	b.n	800847e <_printf_common+0x8e>
	...

080084cc <_printf_i>:
 80084cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	7e0f      	ldrb	r7, [r1, #24]
 80084d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d4:	2f78      	cmp	r7, #120	; 0x78
 80084d6:	4691      	mov	r9, r2
 80084d8:	4680      	mov	r8, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	469a      	mov	sl, r3
 80084de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084e2:	d807      	bhi.n	80084f4 <_printf_i+0x28>
 80084e4:	2f62      	cmp	r7, #98	; 0x62
 80084e6:	d80a      	bhi.n	80084fe <_printf_i+0x32>
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	f000 80d4 	beq.w	8008696 <_printf_i+0x1ca>
 80084ee:	2f58      	cmp	r7, #88	; 0x58
 80084f0:	f000 80c0 	beq.w	8008674 <_printf_i+0x1a8>
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084fc:	e03a      	b.n	8008574 <_printf_i+0xa8>
 80084fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008502:	2b15      	cmp	r3, #21
 8008504:	d8f6      	bhi.n	80084f4 <_printf_i+0x28>
 8008506:	a101      	add	r1, pc, #4	; (adr r1, 800850c <_printf_i+0x40>)
 8008508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800850c:	08008565 	.word	0x08008565
 8008510:	08008579 	.word	0x08008579
 8008514:	080084f5 	.word	0x080084f5
 8008518:	080084f5 	.word	0x080084f5
 800851c:	080084f5 	.word	0x080084f5
 8008520:	080084f5 	.word	0x080084f5
 8008524:	08008579 	.word	0x08008579
 8008528:	080084f5 	.word	0x080084f5
 800852c:	080084f5 	.word	0x080084f5
 8008530:	080084f5 	.word	0x080084f5
 8008534:	080084f5 	.word	0x080084f5
 8008538:	0800867d 	.word	0x0800867d
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008637 	.word	0x08008637
 8008544:	080084f5 	.word	0x080084f5
 8008548:	080084f5 	.word	0x080084f5
 800854c:	0800869f 	.word	0x0800869f
 8008550:	080084f5 	.word	0x080084f5
 8008554:	080085a5 	.word	0x080085a5
 8008558:	080084f5 	.word	0x080084f5
 800855c:	080084f5 	.word	0x080084f5
 8008560:	0800863f 	.word	0x0800863f
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	1d1a      	adds	r2, r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	602a      	str	r2, [r5, #0]
 800856c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008574:	2301      	movs	r3, #1
 8008576:	e09f      	b.n	80086b8 <_printf_i+0x1ec>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	682b      	ldr	r3, [r5, #0]
 800857c:	0607      	lsls	r7, r0, #24
 800857e:	f103 0104 	add.w	r1, r3, #4
 8008582:	6029      	str	r1, [r5, #0]
 8008584:	d501      	bpl.n	800858a <_printf_i+0xbe>
 8008586:	681e      	ldr	r6, [r3, #0]
 8008588:	e003      	b.n	8008592 <_printf_i+0xc6>
 800858a:	0646      	lsls	r6, r0, #25
 800858c:	d5fb      	bpl.n	8008586 <_printf_i+0xba>
 800858e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008592:	2e00      	cmp	r6, #0
 8008594:	da03      	bge.n	800859e <_printf_i+0xd2>
 8008596:	232d      	movs	r3, #45	; 0x2d
 8008598:	4276      	negs	r6, r6
 800859a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859e:	485a      	ldr	r0, [pc, #360]	; (8008708 <_printf_i+0x23c>)
 80085a0:	230a      	movs	r3, #10
 80085a2:	e012      	b.n	80085ca <_printf_i+0xfe>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	6029      	str	r1, [r5, #0]
 80085ac:	0605      	lsls	r5, r0, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xe8>
 80085b0:	681e      	ldr	r6, [r3, #0]
 80085b2:	e002      	b.n	80085ba <_printf_i+0xee>
 80085b4:	0641      	lsls	r1, r0, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xe4>
 80085b8:	881e      	ldrh	r6, [r3, #0]
 80085ba:	4853      	ldr	r0, [pc, #332]	; (8008708 <_printf_i+0x23c>)
 80085bc:	2f6f      	cmp	r7, #111	; 0x6f
 80085be:	bf0c      	ite	eq
 80085c0:	2308      	moveq	r3, #8
 80085c2:	230a      	movne	r3, #10
 80085c4:	2100      	movs	r1, #0
 80085c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ca:	6865      	ldr	r5, [r4, #4]
 80085cc:	60a5      	str	r5, [r4, #8]
 80085ce:	2d00      	cmp	r5, #0
 80085d0:	bfa2      	ittt	ge
 80085d2:	6821      	ldrge	r1, [r4, #0]
 80085d4:	f021 0104 	bicge.w	r1, r1, #4
 80085d8:	6021      	strge	r1, [r4, #0]
 80085da:	b90e      	cbnz	r6, 80085e0 <_printf_i+0x114>
 80085dc:	2d00      	cmp	r5, #0
 80085de:	d04b      	beq.n	8008678 <_printf_i+0x1ac>
 80085e0:	4615      	mov	r5, r2
 80085e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e6:	fb03 6711 	mls	r7, r3, r1, r6
 80085ea:	5dc7      	ldrb	r7, [r0, r7]
 80085ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085f0:	4637      	mov	r7, r6
 80085f2:	42bb      	cmp	r3, r7
 80085f4:	460e      	mov	r6, r1
 80085f6:	d9f4      	bls.n	80085e2 <_printf_i+0x116>
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d10b      	bne.n	8008614 <_printf_i+0x148>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07de      	lsls	r6, r3, #31
 8008600:	d508      	bpl.n	8008614 <_printf_i+0x148>
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6861      	ldr	r1, [r4, #4]
 8008606:	4299      	cmp	r1, r3
 8008608:	bfde      	ittt	le
 800860a:	2330      	movle	r3, #48	; 0x30
 800860c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008614:	1b52      	subs	r2, r2, r5
 8008616:	6122      	str	r2, [r4, #16]
 8008618:	f8cd a000 	str.w	sl, [sp]
 800861c:	464b      	mov	r3, r9
 800861e:	aa03      	add	r2, sp, #12
 8008620:	4621      	mov	r1, r4
 8008622:	4640      	mov	r0, r8
 8008624:	f7ff fee4 	bl	80083f0 <_printf_common>
 8008628:	3001      	adds	r0, #1
 800862a:	d14a      	bne.n	80086c2 <_printf_i+0x1f6>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b004      	add	sp, #16
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	f043 0320 	orr.w	r3, r3, #32
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	4833      	ldr	r0, [pc, #204]	; (800870c <_printf_i+0x240>)
 8008640:	2778      	movs	r7, #120	; 0x78
 8008642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	061f      	lsls	r7, r3, #24
 800864c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008650:	d402      	bmi.n	8008658 <_printf_i+0x18c>
 8008652:	065f      	lsls	r7, r3, #25
 8008654:	bf48      	it	mi
 8008656:	b2b6      	uxthmi	r6, r6
 8008658:	07df      	lsls	r7, r3, #31
 800865a:	bf48      	it	mi
 800865c:	f043 0320 	orrmi.w	r3, r3, #32
 8008660:	6029      	str	r1, [r5, #0]
 8008662:	bf48      	it	mi
 8008664:	6023      	strmi	r3, [r4, #0]
 8008666:	b91e      	cbnz	r6, 8008670 <_printf_i+0x1a4>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	2310      	movs	r3, #16
 8008672:	e7a7      	b.n	80085c4 <_printf_i+0xf8>
 8008674:	4824      	ldr	r0, [pc, #144]	; (8008708 <_printf_i+0x23c>)
 8008676:	e7e4      	b.n	8008642 <_printf_i+0x176>
 8008678:	4615      	mov	r5, r2
 800867a:	e7bd      	b.n	80085f8 <_printf_i+0x12c>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	6826      	ldr	r6, [r4, #0]
 8008680:	6961      	ldr	r1, [r4, #20]
 8008682:	1d18      	adds	r0, r3, #4
 8008684:	6028      	str	r0, [r5, #0]
 8008686:	0635      	lsls	r5, r6, #24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	d501      	bpl.n	8008690 <_printf_i+0x1c4>
 800868c:	6019      	str	r1, [r3, #0]
 800868e:	e002      	b.n	8008696 <_printf_i+0x1ca>
 8008690:	0670      	lsls	r0, r6, #25
 8008692:	d5fb      	bpl.n	800868c <_printf_i+0x1c0>
 8008694:	8019      	strh	r1, [r3, #0]
 8008696:	2300      	movs	r3, #0
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	4615      	mov	r5, r2
 800869c:	e7bc      	b.n	8008618 <_printf_i+0x14c>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	6862      	ldr	r2, [r4, #4]
 80086a8:	2100      	movs	r1, #0
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7f7 fe18 	bl	80002e0 <memchr>
 80086b0:	b108      	cbz	r0, 80086b6 <_printf_i+0x1ea>
 80086b2:	1b40      	subs	r0, r0, r5
 80086b4:	6060      	str	r0, [r4, #4]
 80086b6:	6863      	ldr	r3, [r4, #4]
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	2300      	movs	r3, #0
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c0:	e7aa      	b.n	8008618 <_printf_i+0x14c>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4649      	mov	r1, r9
 80086c8:	4640      	mov	r0, r8
 80086ca:	47d0      	blx	sl
 80086cc:	3001      	adds	r0, #1
 80086ce:	d0ad      	beq.n	800862c <_printf_i+0x160>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	079b      	lsls	r3, r3, #30
 80086d4:	d413      	bmi.n	80086fe <_printf_i+0x232>
 80086d6:	68e0      	ldr	r0, [r4, #12]
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	4298      	cmp	r0, r3
 80086dc:	bfb8      	it	lt
 80086de:	4618      	movlt	r0, r3
 80086e0:	e7a6      	b.n	8008630 <_printf_i+0x164>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4632      	mov	r2, r6
 80086e6:	4649      	mov	r1, r9
 80086e8:	4640      	mov	r0, r8
 80086ea:	47d0      	blx	sl
 80086ec:	3001      	adds	r0, #1
 80086ee:	d09d      	beq.n	800862c <_printf_i+0x160>
 80086f0:	3501      	adds	r5, #1
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	9903      	ldr	r1, [sp, #12]
 80086f6:	1a5b      	subs	r3, r3, r1
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dcf2      	bgt.n	80086e2 <_printf_i+0x216>
 80086fc:	e7eb      	b.n	80086d6 <_printf_i+0x20a>
 80086fe:	2500      	movs	r5, #0
 8008700:	f104 0619 	add.w	r6, r4, #25
 8008704:	e7f5      	b.n	80086f2 <_printf_i+0x226>
 8008706:	bf00      	nop
 8008708:	080102de 	.word	0x080102de
 800870c:	080102ef 	.word	0x080102ef

08008710 <memmove>:
 8008710:	4288      	cmp	r0, r1
 8008712:	b510      	push	{r4, lr}
 8008714:	eb01 0402 	add.w	r4, r1, r2
 8008718:	d902      	bls.n	8008720 <memmove+0x10>
 800871a:	4284      	cmp	r4, r0
 800871c:	4623      	mov	r3, r4
 800871e:	d807      	bhi.n	8008730 <memmove+0x20>
 8008720:	1e43      	subs	r3, r0, #1
 8008722:	42a1      	cmp	r1, r4
 8008724:	d008      	beq.n	8008738 <memmove+0x28>
 8008726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800872a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800872e:	e7f8      	b.n	8008722 <memmove+0x12>
 8008730:	4402      	add	r2, r0
 8008732:	4601      	mov	r1, r0
 8008734:	428a      	cmp	r2, r1
 8008736:	d100      	bne.n	800873a <memmove+0x2a>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800873e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008742:	e7f7      	b.n	8008734 <memmove+0x24>

08008744 <_sbrk_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d06      	ldr	r5, [pc, #24]	; (8008760 <_sbrk_r+0x1c>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	602b      	str	r3, [r5, #0]
 8008750:	f7f8 faac 	bl	8000cac <_sbrk>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_sbrk_r+0x1a>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_sbrk_r+0x1a>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	24000894 	.word	0x24000894

08008764 <memcpy>:
 8008764:	440a      	add	r2, r1
 8008766:	4291      	cmp	r1, r2
 8008768:	f100 33ff 	add.w	r3, r0, #4294967295
 800876c:	d100      	bne.n	8008770 <memcpy+0xc>
 800876e:	4770      	bx	lr
 8008770:	b510      	push	{r4, lr}
 8008772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800877a:	4291      	cmp	r1, r2
 800877c:	d1f9      	bne.n	8008772 <memcpy+0xe>
 800877e:	bd10      	pop	{r4, pc}

08008780 <_realloc_r>:
 8008780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008784:	4680      	mov	r8, r0
 8008786:	4614      	mov	r4, r2
 8008788:	460e      	mov	r6, r1
 800878a:	b921      	cbnz	r1, 8008796 <_realloc_r+0x16>
 800878c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	4611      	mov	r1, r2
 8008792:	f7ff bc49 	b.w	8008028 <_malloc_r>
 8008796:	b92a      	cbnz	r2, 80087a4 <_realloc_r+0x24>
 8008798:	f7ff fbda 	bl	8007f50 <_free_r>
 800879c:	4625      	mov	r5, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a4:	f000 f81b 	bl	80087de <_malloc_usable_size_r>
 80087a8:	4284      	cmp	r4, r0
 80087aa:	4607      	mov	r7, r0
 80087ac:	d802      	bhi.n	80087b4 <_realloc_r+0x34>
 80087ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087b2:	d812      	bhi.n	80087da <_realloc_r+0x5a>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7ff fc36 	bl	8008028 <_malloc_r>
 80087bc:	4605      	mov	r5, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0ed      	beq.n	800879e <_realloc_r+0x1e>
 80087c2:	42bc      	cmp	r4, r7
 80087c4:	4622      	mov	r2, r4
 80087c6:	4631      	mov	r1, r6
 80087c8:	bf28      	it	cs
 80087ca:	463a      	movcs	r2, r7
 80087cc:	f7ff ffca 	bl	8008764 <memcpy>
 80087d0:	4631      	mov	r1, r6
 80087d2:	4640      	mov	r0, r8
 80087d4:	f7ff fbbc 	bl	8007f50 <_free_r>
 80087d8:	e7e1      	b.n	800879e <_realloc_r+0x1e>
 80087da:	4635      	mov	r5, r6
 80087dc:	e7df      	b.n	800879e <_realloc_r+0x1e>

080087de <_malloc_usable_size_r>:
 80087de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e2:	1f18      	subs	r0, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfbc      	itt	lt
 80087e8:	580b      	ldrlt	r3, [r1, r0]
 80087ea:	18c0      	addlt	r0, r0, r3
 80087ec:	4770      	bx	lr
	...

080087f0 <sin>:
 80087f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f2:	eeb0 7b40 	vmov.f64	d7, d0
 80087f6:	ee17 3a90 	vmov	r3, s15
 80087fa:	4a21      	ldr	r2, [pc, #132]	; (8008880 <sin+0x90>)
 80087fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008800:	4293      	cmp	r3, r2
 8008802:	dc07      	bgt.n	8008814 <sin+0x24>
 8008804:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008878 <sin+0x88>
 8008808:	2000      	movs	r0, #0
 800880a:	b005      	add	sp, #20
 800880c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008810:	f000 b8a6 	b.w	8008960 <__kernel_sin>
 8008814:	4a1b      	ldr	r2, [pc, #108]	; (8008884 <sin+0x94>)
 8008816:	4293      	cmp	r3, r2
 8008818:	dd04      	ble.n	8008824 <sin+0x34>
 800881a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800881e:	b005      	add	sp, #20
 8008820:	f85d fb04 	ldr.w	pc, [sp], #4
 8008824:	4668      	mov	r0, sp
 8008826:	f000 f8f3 	bl	8008a10 <__ieee754_rem_pio2>
 800882a:	f000 0003 	and.w	r0, r0, #3
 800882e:	2801      	cmp	r0, #1
 8008830:	d00a      	beq.n	8008848 <sin+0x58>
 8008832:	2802      	cmp	r0, #2
 8008834:	d00f      	beq.n	8008856 <sin+0x66>
 8008836:	b9c0      	cbnz	r0, 800886a <sin+0x7a>
 8008838:	ed9d 1b02 	vldr	d1, [sp, #8]
 800883c:	ed9d 0b00 	vldr	d0, [sp]
 8008840:	2001      	movs	r0, #1
 8008842:	f000 f88d 	bl	8008960 <__kernel_sin>
 8008846:	e7ea      	b.n	800881e <sin+0x2e>
 8008848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800884c:	ed9d 0b00 	vldr	d0, [sp]
 8008850:	f000 f81a 	bl	8008888 <__kernel_cos>
 8008854:	e7e3      	b.n	800881e <sin+0x2e>
 8008856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800885a:	ed9d 0b00 	vldr	d0, [sp]
 800885e:	2001      	movs	r0, #1
 8008860:	f000 f87e 	bl	8008960 <__kernel_sin>
 8008864:	eeb1 0b40 	vneg.f64	d0, d0
 8008868:	e7d9      	b.n	800881e <sin+0x2e>
 800886a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800886e:	ed9d 0b00 	vldr	d0, [sp]
 8008872:	f000 f809 	bl	8008888 <__kernel_cos>
 8008876:	e7f5      	b.n	8008864 <sin+0x74>
	...
 8008880:	3fe921fb 	.word	0x3fe921fb
 8008884:	7fefffff 	.word	0x7fefffff

08008888 <__kernel_cos>:
 8008888:	ee10 1a90 	vmov	r1, s1
 800888c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008894:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008898:	da05      	bge.n	80088a6 <__kernel_cos+0x1e>
 800889a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800889e:	ee17 3a90 	vmov	r3, s15
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d03d      	beq.n	8008922 <__kernel_cos+0x9a>
 80088a6:	ee20 5b00 	vmul.f64	d5, d0, d0
 80088aa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80088ae:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8008928 <__kernel_cos+0xa0>
 80088b2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8008930 <__kernel_cos+0xa8>
 80088b6:	eea5 4b07 	vfma.f64	d4, d5, d7
 80088ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008938 <__kernel_cos+0xb0>
 80088be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80088c2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8008940 <__kernel_cos+0xb8>
 80088c6:	eea7 4b05 	vfma.f64	d4, d7, d5
 80088ca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008948 <__kernel_cos+0xc0>
 80088ce:	4b22      	ldr	r3, [pc, #136]	; (8008958 <__kernel_cos+0xd0>)
 80088d0:	eea4 7b05 	vfma.f64	d7, d4, d5
 80088d4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8008950 <__kernel_cos+0xc8>
 80088d8:	4299      	cmp	r1, r3
 80088da:	eea7 4b05 	vfma.f64	d4, d7, d5
 80088de:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80088e2:	ee24 4b05 	vmul.f64	d4, d4, d5
 80088e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80088ea:	eea5 1b04 	vfma.f64	d1, d5, d4
 80088ee:	dc04      	bgt.n	80088fa <__kernel_cos+0x72>
 80088f0:	ee37 7b41 	vsub.f64	d7, d7, d1
 80088f4:	ee36 0b47 	vsub.f64	d0, d6, d7
 80088f8:	4770      	bx	lr
 80088fa:	4b18      	ldr	r3, [pc, #96]	; (800895c <__kernel_cos+0xd4>)
 80088fc:	4299      	cmp	r1, r3
 80088fe:	dc0d      	bgt.n	800891c <__kernel_cos+0x94>
 8008900:	2200      	movs	r2, #0
 8008902:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008906:	ec43 2b15 	vmov	d5, r2, r3
 800890a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800890e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008912:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008916:	ee30 0b47 	vsub.f64	d0, d0, d7
 800891a:	4770      	bx	lr
 800891c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008920:	e7f3      	b.n	800890a <__kernel_cos+0x82>
 8008922:	eeb0 0b46 	vmov.f64	d0, d6
 8008926:	4770      	bx	lr
 8008928:	be8838d4 	.word	0xbe8838d4
 800892c:	bda8fae9 	.word	0xbda8fae9
 8008930:	bdb4b1c4 	.word	0xbdb4b1c4
 8008934:	3e21ee9e 	.word	0x3e21ee9e
 8008938:	809c52ad 	.word	0x809c52ad
 800893c:	be927e4f 	.word	0xbe927e4f
 8008940:	19cb1590 	.word	0x19cb1590
 8008944:	3efa01a0 	.word	0x3efa01a0
 8008948:	16c15177 	.word	0x16c15177
 800894c:	bf56c16c 	.word	0xbf56c16c
 8008950:	5555554c 	.word	0x5555554c
 8008954:	3fa55555 	.word	0x3fa55555
 8008958:	3fd33332 	.word	0x3fd33332
 800895c:	3fe90000 	.word	0x3fe90000

08008960 <__kernel_sin>:
 8008960:	ee10 3a90 	vmov	r3, s1
 8008964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008968:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800896c:	da04      	bge.n	8008978 <__kernel_sin+0x18>
 800896e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008972:	ee17 3a90 	vmov	r3, s15
 8008976:	b35b      	cbz	r3, 80089d0 <__kernel_sin+0x70>
 8008978:	ee20 6b00 	vmul.f64	d6, d0, d0
 800897c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008980:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80089d8 <__kernel_sin+0x78>
 8008984:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80089e0 <__kernel_sin+0x80>
 8008988:	eea6 4b07 	vfma.f64	d4, d6, d7
 800898c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80089e8 <__kernel_sin+0x88>
 8008990:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008994:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80089f0 <__kernel_sin+0x90>
 8008998:	eea7 4b06 	vfma.f64	d4, d7, d6
 800899c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80089f8 <__kernel_sin+0x98>
 80089a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80089a4:	b930      	cbnz	r0, 80089b4 <__kernel_sin+0x54>
 80089a6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008a00 <__kernel_sin+0xa0>
 80089aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 80089ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 80089b2:	4770      	bx	lr
 80089b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80089b8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80089bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80089c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80089c4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008a08 <__kernel_sin+0xa8>
 80089c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80089cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	f3af 8000 	nop.w
 80089d8:	5acfd57c 	.word	0x5acfd57c
 80089dc:	3de5d93a 	.word	0x3de5d93a
 80089e0:	8a2b9ceb 	.word	0x8a2b9ceb
 80089e4:	be5ae5e6 	.word	0xbe5ae5e6
 80089e8:	57b1fe7d 	.word	0x57b1fe7d
 80089ec:	3ec71de3 	.word	0x3ec71de3
 80089f0:	19c161d5 	.word	0x19c161d5
 80089f4:	bf2a01a0 	.word	0xbf2a01a0
 80089f8:	1110f8a6 	.word	0x1110f8a6
 80089fc:	3f811111 	.word	0x3f811111
 8008a00:	55555549 	.word	0x55555549
 8008a04:	bfc55555 	.word	0xbfc55555
 8008a08:	55555549 	.word	0x55555549
 8008a0c:	3fc55555 	.word	0x3fc55555

08008a10 <__ieee754_rem_pio2>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	eeb0 7b40 	vmov.f64	d7, d0
 8008a16:	ee17 5a90 	vmov	r5, s15
 8008a1a:	4b99      	ldr	r3, [pc, #612]	; (8008c80 <__ieee754_rem_pio2+0x270>)
 8008a1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a20:	429e      	cmp	r6, r3
 8008a22:	b088      	sub	sp, #32
 8008a24:	4604      	mov	r4, r0
 8008a26:	dc07      	bgt.n	8008a38 <__ieee754_rem_pio2+0x28>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	ed84 0b00 	vstr	d0, [r4]
 8008a30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008a34:	2000      	movs	r0, #0
 8008a36:	e01b      	b.n	8008a70 <__ieee754_rem_pio2+0x60>
 8008a38:	4b92      	ldr	r3, [pc, #584]	; (8008c84 <__ieee754_rem_pio2+0x274>)
 8008a3a:	429e      	cmp	r6, r3
 8008a3c:	dc3b      	bgt.n	8008ab6 <__ieee754_rem_pio2+0xa6>
 8008a3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8008c40 <__ieee754_rem_pio2+0x230>
 8008a48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008a4c:	dd19      	ble.n	8008a82 <__ieee754_rem_pio2+0x72>
 8008a4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008a52:	429e      	cmp	r6, r3
 8008a54:	d00e      	beq.n	8008a74 <__ieee754_rem_pio2+0x64>
 8008a56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008c48 <__ieee754_rem_pio2+0x238>
 8008a5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008a5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008a62:	ed84 5b00 	vstr	d5, [r4]
 8008a66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8008a6e:	2001      	movs	r0, #1
 8008a70:	b008      	add	sp, #32
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008c50 <__ieee754_rem_pio2+0x240>
 8008a78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008c58 <__ieee754_rem_pio2+0x248>
 8008a80:	e7eb      	b.n	8008a5a <__ieee754_rem_pio2+0x4a>
 8008a82:	429e      	cmp	r6, r3
 8008a84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008a88:	d00e      	beq.n	8008aa8 <__ieee754_rem_pio2+0x98>
 8008a8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008c48 <__ieee754_rem_pio2+0x238>
 8008a8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008a92:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008a96:	ed84 5b00 	vstr	d5, [r4]
 8008a9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	ed84 7b02 	vstr	d7, [r4, #8]
 8008aa6:	e7e3      	b.n	8008a70 <__ieee754_rem_pio2+0x60>
 8008aa8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008c50 <__ieee754_rem_pio2+0x240>
 8008aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008ab0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008c58 <__ieee754_rem_pio2+0x248>
 8008ab4:	e7eb      	b.n	8008a8e <__ieee754_rem_pio2+0x7e>
 8008ab6:	4b74      	ldr	r3, [pc, #464]	; (8008c88 <__ieee754_rem_pio2+0x278>)
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	dc70      	bgt.n	8008b9e <__ieee754_rem_pio2+0x18e>
 8008abc:	f000 f8ec 	bl	8008c98 <fabs>
 8008ac0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008ac4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008c60 <__ieee754_rem_pio2+0x250>
 8008ac8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008acc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008ad0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008ad4:	ee17 0a90 	vmov	r0, s15
 8008ad8:	eeb1 4b45 	vneg.f64	d4, d5
 8008adc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008c40 <__ieee754_rem_pio2+0x230>
 8008ae0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008ae4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008c48 <__ieee754_rem_pio2+0x238>
 8008ae8:	281f      	cmp	r0, #31
 8008aea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008aee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008af2:	dc08      	bgt.n	8008b06 <__ieee754_rem_pio2+0xf6>
 8008af4:	4b65      	ldr	r3, [pc, #404]	; (8008c8c <__ieee754_rem_pio2+0x27c>)
 8008af6:	1e42      	subs	r2, r0, #1
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	42b3      	cmp	r3, r6
 8008afe:	d002      	beq.n	8008b06 <__ieee754_rem_pio2+0xf6>
 8008b00:	ed84 6b00 	vstr	d6, [r4]
 8008b04:	e024      	b.n	8008b50 <__ieee754_rem_pio2+0x140>
 8008b06:	ee16 3a90 	vmov	r3, s13
 8008b0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008b0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008b18:	ddf2      	ble.n	8008b00 <__ieee754_rem_pio2+0xf0>
 8008b1a:	eeb0 6b40 	vmov.f64	d6, d0
 8008b1e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8008c50 <__ieee754_rem_pio2+0x240>
 8008b22:	eea4 6b03 	vfma.f64	d6, d4, d3
 8008b26:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008b2a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008b2e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008c58 <__ieee754_rem_pio2+0x248>
 8008b32:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008b36:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008b3a:	ee13 3a90 	vmov	r3, s7
 8008b3e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b31      	cmp	r3, #49	; 0x31
 8008b46:	dc17      	bgt.n	8008b78 <__ieee754_rem_pio2+0x168>
 8008b48:	eeb0 0b46 	vmov.f64	d0, d6
 8008b4c:	ed84 3b00 	vstr	d3, [r4]
 8008b50:	ed94 6b00 	vldr	d6, [r4]
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008b5a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008b5e:	ed84 0b02 	vstr	d0, [r4, #8]
 8008b62:	da85      	bge.n	8008a70 <__ieee754_rem_pio2+0x60>
 8008b64:	eeb1 6b46 	vneg.f64	d6, d6
 8008b68:	eeb1 0b40 	vneg.f64	d0, d0
 8008b6c:	ed84 6b00 	vstr	d6, [r4]
 8008b70:	ed84 0b02 	vstr	d0, [r4, #8]
 8008b74:	4240      	negs	r0, r0
 8008b76:	e77b      	b.n	8008a70 <__ieee754_rem_pio2+0x60>
 8008b78:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8008c68 <__ieee754_rem_pio2+0x258>
 8008b7c:	eeb0 0b46 	vmov.f64	d0, d6
 8008b80:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008b84:	ee36 6b40 	vsub.f64	d6, d6, d0
 8008b88:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008b8c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8008c70 <__ieee754_rem_pio2+0x260>
 8008b90:	eeb0 7b46 	vmov.f64	d7, d6
 8008b94:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8008b98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008b9c:	e7b0      	b.n	8008b00 <__ieee754_rem_pio2+0xf0>
 8008b9e:	4b3c      	ldr	r3, [pc, #240]	; (8008c90 <__ieee754_rem_pio2+0x280>)
 8008ba0:	429e      	cmp	r6, r3
 8008ba2:	dd06      	ble.n	8008bb2 <__ieee754_rem_pio2+0x1a2>
 8008ba4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008ba8:	ed80 7b02 	vstr	d7, [r0, #8]
 8008bac:	ed80 7b00 	vstr	d7, [r0]
 8008bb0:	e740      	b.n	8008a34 <__ieee754_rem_pio2+0x24>
 8008bb2:	1532      	asrs	r2, r6, #20
 8008bb4:	ee10 0a10 	vmov	r0, s0
 8008bb8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008bbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008bc0:	ec41 0b17 	vmov	d7, r0, r1
 8008bc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008bc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008c78 <__ieee754_rem_pio2+0x268>
 8008bcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008bd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008bdc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008be0:	a808      	add	r0, sp, #32
 8008be2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008be6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008bee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008bf2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bf6:	2103      	movs	r1, #3
 8008bf8:	ed30 7b02 	vldmdb	r0!, {d7}
 8008bfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	460b      	mov	r3, r1
 8008c06:	f101 31ff 	add.w	r1, r1, #4294967295
 8008c0a:	d0f5      	beq.n	8008bf8 <__ieee754_rem_pio2+0x1e8>
 8008c0c:	4921      	ldr	r1, [pc, #132]	; (8008c94 <__ieee754_rem_pio2+0x284>)
 8008c0e:	9101      	str	r1, [sp, #4]
 8008c10:	2102      	movs	r1, #2
 8008c12:	9100      	str	r1, [sp, #0]
 8008c14:	a802      	add	r0, sp, #8
 8008c16:	4621      	mov	r1, r4
 8008c18:	f000 f84a 	bl	8008cb0 <__kernel_rem_pio2>
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	f6bf af27 	bge.w	8008a70 <__ieee754_rem_pio2+0x60>
 8008c22:	ed94 7b00 	vldr	d7, [r4]
 8008c26:	eeb1 7b47 	vneg.f64	d7, d7
 8008c2a:	ed84 7b00 	vstr	d7, [r4]
 8008c2e:	ed94 7b02 	vldr	d7, [r4, #8]
 8008c32:	eeb1 7b47 	vneg.f64	d7, d7
 8008c36:	ed84 7b02 	vstr	d7, [r4, #8]
 8008c3a:	e79b      	b.n	8008b74 <__ieee754_rem_pio2+0x164>
 8008c3c:	f3af 8000 	nop.w
 8008c40:	54400000 	.word	0x54400000
 8008c44:	3ff921fb 	.word	0x3ff921fb
 8008c48:	1a626331 	.word	0x1a626331
 8008c4c:	3dd0b461 	.word	0x3dd0b461
 8008c50:	1a600000 	.word	0x1a600000
 8008c54:	3dd0b461 	.word	0x3dd0b461
 8008c58:	2e037073 	.word	0x2e037073
 8008c5c:	3ba3198a 	.word	0x3ba3198a
 8008c60:	6dc9c883 	.word	0x6dc9c883
 8008c64:	3fe45f30 	.word	0x3fe45f30
 8008c68:	2e000000 	.word	0x2e000000
 8008c6c:	3ba3198a 	.word	0x3ba3198a
 8008c70:	252049c1 	.word	0x252049c1
 8008c74:	397b839a 	.word	0x397b839a
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	41700000 	.word	0x41700000
 8008c80:	3fe921fb 	.word	0x3fe921fb
 8008c84:	4002d97b 	.word	0x4002d97b
 8008c88:	413921fb 	.word	0x413921fb
 8008c8c:	08010300 	.word	0x08010300
 8008c90:	7fefffff 	.word	0x7fefffff
 8008c94:	08010380 	.word	0x08010380

08008c98 <fabs>:
 8008c98:	ec51 0b10 	vmov	r0, r1, d0
 8008c9c:	ee10 2a10 	vmov	r2, s0
 8008ca0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ca4:	ec43 2b10 	vmov	d0, r2, r3
 8008ca8:	4770      	bx	lr
 8008caa:	0000      	movs	r0, r0
 8008cac:	0000      	movs	r0, r0
	...

08008cb0 <__kernel_rem_pio2>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	ed2d 8b06 	vpush	{d8-d10}
 8008cb8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	9002      	str	r0, [sp, #8]
 8008cc0:	49c3      	ldr	r1, [pc, #780]	; (8008fd0 <__kernel_rem_pio2+0x320>)
 8008cc2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008cca:	9901      	ldr	r1, [sp, #4]
 8008ccc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008cce:	f112 0f14 	cmn.w	r2, #20
 8008cd2:	bfa8      	it	ge
 8008cd4:	1ed0      	subge	r0, r2, #3
 8008cd6:	f101 3aff 	add.w	sl, r1, #4294967295
 8008cda:	bfaa      	itet	ge
 8008cdc:	2418      	movge	r4, #24
 8008cde:	2000      	movlt	r0, #0
 8008ce0:	fb90 f0f4 	sdivge	r0, r0, r4
 8008ce4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8008fb8 <__kernel_rem_pio2+0x308>
 8008ce8:	f06f 0417 	mvn.w	r4, #23
 8008cec:	fb00 4404 	mla	r4, r0, r4, r4
 8008cf0:	eba0 060a 	sub.w	r6, r0, sl
 8008cf4:	4414      	add	r4, r2
 8008cf6:	eb09 0c0a 	add.w	ip, r9, sl
 8008cfa:	ad1a      	add	r5, sp, #104	; 0x68
 8008cfc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008d00:	2200      	movs	r2, #0
 8008d02:	4562      	cmp	r2, ip
 8008d04:	dd10      	ble.n	8008d28 <__kernel_rem_pio2+0x78>
 8008d06:	9a01      	ldr	r2, [sp, #4]
 8008d08:	a91a      	add	r1, sp, #104	; 0x68
 8008d0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008d0e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8008d12:	f04f 0c00 	mov.w	ip, #0
 8008d16:	45cc      	cmp	ip, r9
 8008d18:	dc26      	bgt.n	8008d68 <__kernel_rem_pio2+0xb8>
 8008d1a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8008fb8 <__kernel_rem_pio2+0x308>
 8008d1e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008d22:	4616      	mov	r6, r2
 8008d24:	2500      	movs	r5, #0
 8008d26:	e015      	b.n	8008d54 <__kernel_rem_pio2+0xa4>
 8008d28:	42d6      	cmn	r6, r2
 8008d2a:	d409      	bmi.n	8008d40 <__kernel_rem_pio2+0x90>
 8008d2c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8008d30:	ee07 1a90 	vmov	s15, r1
 8008d34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008d38:	eca5 7b02 	vstmia	r5!, {d7}
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	e7e0      	b.n	8008d02 <__kernel_rem_pio2+0x52>
 8008d40:	eeb0 7b46 	vmov.f64	d7, d6
 8008d44:	e7f8      	b.n	8008d38 <__kernel_rem_pio2+0x88>
 8008d46:	ecbe 5b02 	vldmia	lr!, {d5}
 8008d4a:	ed96 6b00 	vldr	d6, [r6]
 8008d4e:	3501      	adds	r5, #1
 8008d50:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008d54:	4555      	cmp	r5, sl
 8008d56:	f1a6 0608 	sub.w	r6, r6, #8
 8008d5a:	ddf4      	ble.n	8008d46 <__kernel_rem_pio2+0x96>
 8008d5c:	eca8 7b02 	vstmia	r8!, {d7}
 8008d60:	f10c 0c01 	add.w	ip, ip, #1
 8008d64:	3208      	adds	r2, #8
 8008d66:	e7d6      	b.n	8008d16 <__kernel_rem_pio2+0x66>
 8008d68:	aa06      	add	r2, sp, #24
 8008d6a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008fc0 <__kernel_rem_pio2+0x310>
 8008d6e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008fc8 <__kernel_rem_pio2+0x318>
 8008d72:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8008d76:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008d7a:	9204      	str	r2, [sp, #16]
 8008d7c:	9303      	str	r3, [sp, #12]
 8008d7e:	464d      	mov	r5, r9
 8008d80:	00eb      	lsls	r3, r5, #3
 8008d82:	9305      	str	r3, [sp, #20]
 8008d84:	ab92      	add	r3, sp, #584	; 0x248
 8008d86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008d8a:	f10d 0b18 	add.w	fp, sp, #24
 8008d8e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008d90:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008d94:	465e      	mov	r6, fp
 8008d96:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	f1a2 0208 	sub.w	r2, r2, #8
 8008da2:	dc48      	bgt.n	8008e36 <__kernel_rem_pio2+0x186>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fa17 	bl	80091d8 <scalbn>
 8008daa:	eeb0 8b40 	vmov.f64	d8, d0
 8008dae:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008db2:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008db6:	f000 fa8f 	bl	80092d8 <floor>
 8008dba:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008dbe:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008dc2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	ee17 8a90 	vmov	r8, s15
 8008dcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dd0:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008dd4:	dd41      	ble.n	8008e5a <__kernel_rem_pio2+0x1aa>
 8008dd6:	1e68      	subs	r0, r5, #1
 8008dd8:	ab06      	add	r3, sp, #24
 8008dda:	f1c4 0c18 	rsb	ip, r4, #24
 8008dde:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008de2:	fa46 f20c 	asr.w	r2, r6, ip
 8008de6:	4490      	add	r8, r2
 8008de8:	fa02 f20c 	lsl.w	r2, r2, ip
 8008dec:	1ab6      	subs	r6, r6, r2
 8008dee:	f1c4 0217 	rsb	r2, r4, #23
 8008df2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8008df6:	4116      	asrs	r6, r2
 8008df8:	2e00      	cmp	r6, #0
 8008dfa:	dd3d      	ble.n	8008e78 <__kernel_rem_pio2+0x1c8>
 8008dfc:	f04f 0c00 	mov.w	ip, #0
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	4660      	mov	r0, ip
 8008e06:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008e0a:	4565      	cmp	r5, ip
 8008e0c:	dc6a      	bgt.n	8008ee4 <__kernel_rem_pio2+0x234>
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	dd04      	ble.n	8008e1c <__kernel_rem_pio2+0x16c>
 8008e12:	2c01      	cmp	r4, #1
 8008e14:	d07b      	beq.n	8008f0e <__kernel_rem_pio2+0x25e>
 8008e16:	2c02      	cmp	r4, #2
 8008e18:	f000 8083 	beq.w	8008f22 <__kernel_rem_pio2+0x272>
 8008e1c:	2e02      	cmp	r6, #2
 8008e1e:	d12b      	bne.n	8008e78 <__kernel_rem_pio2+0x1c8>
 8008e20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008e24:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008e28:	b330      	cbz	r0, 8008e78 <__kernel_rem_pio2+0x1c8>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f9d4 	bl	80091d8 <scalbn>
 8008e30:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008e34:	e020      	b.n	8008e78 <__kernel_rem_pio2+0x1c8>
 8008e36:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008e3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008e3e:	3801      	subs	r0, #1
 8008e40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008e44:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008e48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008e4c:	eca6 0a01 	vstmia	r6!, {s0}
 8008e50:	ed92 0b00 	vldr	d0, [r2]
 8008e54:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008e58:	e7a0      	b.n	8008d9c <__kernel_rem_pio2+0xec>
 8008e5a:	d105      	bne.n	8008e68 <__kernel_rem_pio2+0x1b8>
 8008e5c:	1e6a      	subs	r2, r5, #1
 8008e5e:	ab06      	add	r3, sp, #24
 8008e60:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008e64:	15f6      	asrs	r6, r6, #23
 8008e66:	e7c7      	b.n	8008df8 <__kernel_rem_pio2+0x148>
 8008e68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008e6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e74:	da34      	bge.n	8008ee0 <__kernel_rem_pio2+0x230>
 8008e76:	2600      	movs	r6, #0
 8008e78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e80:	f040 80aa 	bne.w	8008fd8 <__kernel_rem_pio2+0x328>
 8008e84:	f105 3bff 	add.w	fp, r5, #4294967295
 8008e88:	4658      	mov	r0, fp
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4548      	cmp	r0, r9
 8008e8e:	da50      	bge.n	8008f32 <__kernel_rem_pio2+0x282>
 8008e90:	2a00      	cmp	r2, #0
 8008e92:	d06b      	beq.n	8008f6c <__kernel_rem_pio2+0x2bc>
 8008e94:	ab06      	add	r3, sp, #24
 8008e96:	3c18      	subs	r4, #24
 8008e98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8087 	beq.w	8008fb0 <__kernel_rem_pio2+0x300>
 8008ea2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f996 	bl	80091d8 <scalbn>
 8008eac:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8008fc0 <__kernel_rem_pio2+0x310>
 8008eb0:	f10b 0201 	add.w	r2, fp, #1
 8008eb4:	a96a      	add	r1, sp, #424	; 0x1a8
 8008eb6:	00d3      	lsls	r3, r2, #3
 8008eb8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008ebc:	465a      	mov	r2, fp
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	f280 80b8 	bge.w	8009034 <__kernel_rem_pio2+0x384>
 8008ec4:	465a      	mov	r2, fp
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	f2c0 80d6 	blt.w	8009078 <__kernel_rem_pio2+0x3c8>
 8008ecc:	a96a      	add	r1, sp, #424	; 0x1a8
 8008ece:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8008ed2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8008fb8 <__kernel_rem_pio2+0x308>
 8008ed6:	4d3f      	ldr	r5, [pc, #252]	; (8008fd4 <__kernel_rem_pio2+0x324>)
 8008ed8:	2000      	movs	r0, #0
 8008eda:	ebab 0102 	sub.w	r1, fp, r2
 8008ede:	e0c0      	b.n	8009062 <__kernel_rem_pio2+0x3b2>
 8008ee0:	2602      	movs	r6, #2
 8008ee2:	e78b      	b.n	8008dfc <__kernel_rem_pio2+0x14c>
 8008ee4:	f8db 2000 	ldr.w	r2, [fp]
 8008ee8:	b958      	cbnz	r0, 8008f02 <__kernel_rem_pio2+0x252>
 8008eea:	b122      	cbz	r2, 8008ef6 <__kernel_rem_pio2+0x246>
 8008eec:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008ef0:	f8cb 2000 	str.w	r2, [fp]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f10c 0c01 	add.w	ip, ip, #1
 8008efa:	f10b 0b04 	add.w	fp, fp, #4
 8008efe:	4610      	mov	r0, r2
 8008f00:	e783      	b.n	8008e0a <__kernel_rem_pio2+0x15a>
 8008f02:	ebae 0202 	sub.w	r2, lr, r2
 8008f06:	f8cb 2000 	str.w	r2, [fp]
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	e7f3      	b.n	8008ef6 <__kernel_rem_pio2+0x246>
 8008f0e:	f105 3cff 	add.w	ip, r5, #4294967295
 8008f12:	ab06      	add	r3, sp, #24
 8008f14:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008f18:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008f1c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8008f20:	e77c      	b.n	8008e1c <__kernel_rem_pio2+0x16c>
 8008f22:	f105 3cff 	add.w	ip, r5, #4294967295
 8008f26:	ab06      	add	r3, sp, #24
 8008f28:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008f2c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008f30:	e7f4      	b.n	8008f1c <__kernel_rem_pio2+0x26c>
 8008f32:	ab06      	add	r3, sp, #24
 8008f34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008f38:	3801      	subs	r0, #1
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	e7a6      	b.n	8008e8c <__kernel_rem_pio2+0x1dc>
 8008f3e:	3201      	adds	r2, #1
 8008f40:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	d0fa      	beq.n	8008f3e <__kernel_rem_pio2+0x28e>
 8008f48:	9b05      	ldr	r3, [sp, #20]
 8008f4a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008f4e:	eb0d 0003 	add.w	r0, sp, r3
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	18ee      	adds	r6, r5, r3
 8008f56:	ab1a      	add	r3, sp, #104	; 0x68
 8008f58:	f105 0c01 	add.w	ip, r5, #1
 8008f5c:	3898      	subs	r0, #152	; 0x98
 8008f5e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f62:	442a      	add	r2, r5
 8008f64:	4562      	cmp	r2, ip
 8008f66:	da04      	bge.n	8008f72 <__kernel_rem_pio2+0x2c2>
 8008f68:	4615      	mov	r5, r2
 8008f6a:	e709      	b.n	8008d80 <__kernel_rem_pio2+0xd0>
 8008f6c:	9804      	ldr	r0, [sp, #16]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	e7e6      	b.n	8008f40 <__kernel_rem_pio2+0x290>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008f78:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f86:	2500      	movs	r5, #0
 8008f88:	eca6 7b02 	vstmia	r6!, {d7}
 8008f8c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8008fb8 <__kernel_rem_pio2+0x308>
 8008f90:	46b0      	mov	r8, r6
 8008f92:	4555      	cmp	r5, sl
 8008f94:	dd04      	ble.n	8008fa0 <__kernel_rem_pio2+0x2f0>
 8008f96:	eca0 7b02 	vstmia	r0!, {d7}
 8008f9a:	f10c 0c01 	add.w	ip, ip, #1
 8008f9e:	e7e1      	b.n	8008f64 <__kernel_rem_pio2+0x2b4>
 8008fa0:	ecbe 5b02 	vldmia	lr!, {d5}
 8008fa4:	ed38 6b02 	vldmdb	r8!, {d6}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008fae:	e7f0      	b.n	8008f92 <__kernel_rem_pio2+0x2e2>
 8008fb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fb4:	e76e      	b.n	8008e94 <__kernel_rem_pio2+0x1e4>
 8008fb6:	bf00      	nop
	...
 8008fc4:	3e700000 	.word	0x3e700000
 8008fc8:	00000000 	.word	0x00000000
 8008fcc:	41700000 	.word	0x41700000
 8008fd0:	080104c8 	.word	0x080104c8
 8008fd4:	08010488 	.word	0x08010488
 8008fd8:	4260      	negs	r0, r4
 8008fda:	eeb0 0b48 	vmov.f64	d0, d8
 8008fde:	f000 f8fb 	bl	80091d8 <scalbn>
 8008fe2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80091c0 <__kernel_rem_pio2+0x510>
 8008fe6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fee:	db18      	blt.n	8009022 <__kernel_rem_pio2+0x372>
 8008ff0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80091c8 <__kernel_rem_pio2+0x518>
 8008ff4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008ff8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008ffc:	aa06      	add	r2, sp, #24
 8008ffe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009002:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009006:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800900a:	f105 0b01 	add.w	fp, r5, #1
 800900e:	ee10 3a10 	vmov	r3, s0
 8009012:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009016:	ee17 3a10 	vmov	r3, s14
 800901a:	3418      	adds	r4, #24
 800901c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8009020:	e73f      	b.n	8008ea2 <__kernel_rem_pio2+0x1f2>
 8009022:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009026:	aa06      	add	r2, sp, #24
 8009028:	ee10 3a10 	vmov	r3, s0
 800902c:	46ab      	mov	fp, r5
 800902e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009032:	e736      	b.n	8008ea2 <__kernel_rem_pio2+0x1f2>
 8009034:	a806      	add	r0, sp, #24
 8009036:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800903a:	9001      	str	r0, [sp, #4]
 800903c:	ee07 0a90 	vmov	s15, r0
 8009040:	3a01      	subs	r2, #1
 8009042:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009046:	ee27 7b00 	vmul.f64	d7, d7, d0
 800904a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800904e:	ed21 7b02 	vstmdb	r1!, {d7}
 8009052:	e734      	b.n	8008ebe <__kernel_rem_pio2+0x20e>
 8009054:	ecb5 5b02 	vldmia	r5!, {d5}
 8009058:	ecb4 6b02 	vldmia	r4!, {d6}
 800905c:	3001      	adds	r0, #1
 800905e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009062:	4548      	cmp	r0, r9
 8009064:	dc01      	bgt.n	800906a <__kernel_rem_pio2+0x3ba>
 8009066:	4288      	cmp	r0, r1
 8009068:	ddf4      	ble.n	8009054 <__kernel_rem_pio2+0x3a4>
 800906a:	a842      	add	r0, sp, #264	; 0x108
 800906c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009070:	ed81 7b00 	vstr	d7, [r1]
 8009074:	3a01      	subs	r2, #1
 8009076:	e726      	b.n	8008ec6 <__kernel_rem_pio2+0x216>
 8009078:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800907a:	2a02      	cmp	r2, #2
 800907c:	dc0a      	bgt.n	8009094 <__kernel_rem_pio2+0x3e4>
 800907e:	2a00      	cmp	r2, #0
 8009080:	dc2e      	bgt.n	80090e0 <__kernel_rem_pio2+0x430>
 8009082:	d047      	beq.n	8009114 <__kernel_rem_pio2+0x464>
 8009084:	f008 0007 	and.w	r0, r8, #7
 8009088:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800908c:	ecbd 8b06 	vpop	{d8-d10}
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8009096:	2a03      	cmp	r2, #3
 8009098:	d1f4      	bne.n	8009084 <__kernel_rem_pio2+0x3d4>
 800909a:	a942      	add	r1, sp, #264	; 0x108
 800909c:	f1a3 0208 	sub.w	r2, r3, #8
 80090a0:	440a      	add	r2, r1
 80090a2:	4611      	mov	r1, r2
 80090a4:	4658      	mov	r0, fp
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f1a1 0108 	sub.w	r1, r1, #8
 80090ac:	dc55      	bgt.n	800915a <__kernel_rem_pio2+0x4aa>
 80090ae:	4659      	mov	r1, fp
 80090b0:	2901      	cmp	r1, #1
 80090b2:	f1a2 0208 	sub.w	r2, r2, #8
 80090b6:	dc60      	bgt.n	800917a <__kernel_rem_pio2+0x4ca>
 80090b8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80091d0 <__kernel_rem_pio2+0x520>
 80090bc:	aa42      	add	r2, sp, #264	; 0x108
 80090be:	4413      	add	r3, r2
 80090c0:	f1bb 0f01 	cmp.w	fp, #1
 80090c4:	dc69      	bgt.n	800919a <__kernel_rem_pio2+0x4ea>
 80090c6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80090ca:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80090ce:	2e00      	cmp	r6, #0
 80090d0:	d16a      	bne.n	80091a8 <__kernel_rem_pio2+0x4f8>
 80090d2:	ed87 5b00 	vstr	d5, [r7]
 80090d6:	ed87 6b02 	vstr	d6, [r7, #8]
 80090da:	ed87 7b04 	vstr	d7, [r7, #16]
 80090de:	e7d1      	b.n	8009084 <__kernel_rem_pio2+0x3d4>
 80090e0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80091d0 <__kernel_rem_pio2+0x520>
 80090e4:	aa42      	add	r2, sp, #264	; 0x108
 80090e6:	4413      	add	r3, r2
 80090e8:	465a      	mov	r2, fp
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	da26      	bge.n	800913c <__kernel_rem_pio2+0x48c>
 80090ee:	b35e      	cbz	r6, 8009148 <__kernel_rem_pio2+0x498>
 80090f0:	eeb1 7b46 	vneg.f64	d7, d6
 80090f4:	ed87 7b00 	vstr	d7, [r7]
 80090f8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80090fc:	aa44      	add	r2, sp, #272	; 0x110
 80090fe:	2301      	movs	r3, #1
 8009100:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009104:	459b      	cmp	fp, r3
 8009106:	da22      	bge.n	800914e <__kernel_rem_pio2+0x49e>
 8009108:	b10e      	cbz	r6, 800910e <__kernel_rem_pio2+0x45e>
 800910a:	eeb1 7b47 	vneg.f64	d7, d7
 800910e:	ed87 7b02 	vstr	d7, [r7, #8]
 8009112:	e7b7      	b.n	8009084 <__kernel_rem_pio2+0x3d4>
 8009114:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80091d0 <__kernel_rem_pio2+0x520>
 8009118:	aa42      	add	r2, sp, #264	; 0x108
 800911a:	4413      	add	r3, r2
 800911c:	f1bb 0f00 	cmp.w	fp, #0
 8009120:	da05      	bge.n	800912e <__kernel_rem_pio2+0x47e>
 8009122:	b10e      	cbz	r6, 8009128 <__kernel_rem_pio2+0x478>
 8009124:	eeb1 7b47 	vneg.f64	d7, d7
 8009128:	ed87 7b00 	vstr	d7, [r7]
 800912c:	e7aa      	b.n	8009084 <__kernel_rem_pio2+0x3d4>
 800912e:	ed33 6b02 	vldmdb	r3!, {d6}
 8009132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009136:	ee37 7b06 	vadd.f64	d7, d7, d6
 800913a:	e7ef      	b.n	800911c <__kernel_rem_pio2+0x46c>
 800913c:	ed33 7b02 	vldmdb	r3!, {d7}
 8009140:	3a01      	subs	r2, #1
 8009142:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009146:	e7d0      	b.n	80090ea <__kernel_rem_pio2+0x43a>
 8009148:	eeb0 7b46 	vmov.f64	d7, d6
 800914c:	e7d2      	b.n	80090f4 <__kernel_rem_pio2+0x444>
 800914e:	ecb2 6b02 	vldmia	r2!, {d6}
 8009152:	3301      	adds	r3, #1
 8009154:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009158:	e7d4      	b.n	8009104 <__kernel_rem_pio2+0x454>
 800915a:	ed91 7b00 	vldr	d7, [r1]
 800915e:	ed91 5b02 	vldr	d5, [r1, #8]
 8009162:	3801      	subs	r0, #1
 8009164:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009168:	ee37 7b46 	vsub.f64	d7, d7, d6
 800916c:	ed81 6b00 	vstr	d6, [r1]
 8009170:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009174:	ed81 7b02 	vstr	d7, [r1, #8]
 8009178:	e795      	b.n	80090a6 <__kernel_rem_pio2+0x3f6>
 800917a:	ed92 7b00 	vldr	d7, [r2]
 800917e:	ed92 5b02 	vldr	d5, [r2, #8]
 8009182:	3901      	subs	r1, #1
 8009184:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009188:	ee37 7b46 	vsub.f64	d7, d7, d6
 800918c:	ed82 6b00 	vstr	d6, [r2]
 8009190:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009194:	ed82 7b02 	vstr	d7, [r2, #8]
 8009198:	e78a      	b.n	80090b0 <__kernel_rem_pio2+0x400>
 800919a:	ed33 6b02 	vldmdb	r3!, {d6}
 800919e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80091a6:	e78b      	b.n	80090c0 <__kernel_rem_pio2+0x410>
 80091a8:	eeb1 5b45 	vneg.f64	d5, d5
 80091ac:	eeb1 6b46 	vneg.f64	d6, d6
 80091b0:	ed87 5b00 	vstr	d5, [r7]
 80091b4:	eeb1 7b47 	vneg.f64	d7, d7
 80091b8:	ed87 6b02 	vstr	d6, [r7, #8]
 80091bc:	e78d      	b.n	80090da <__kernel_rem_pio2+0x42a>
 80091be:	bf00      	nop
 80091c0:	00000000 	.word	0x00000000
 80091c4:	41700000 	.word	0x41700000
 80091c8:	00000000 	.word	0x00000000
 80091cc:	3e700000 	.word	0x3e700000
	...

080091d8 <scalbn>:
 80091d8:	ee10 1a90 	vmov	r1, s1
 80091dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80091e0:	b98b      	cbnz	r3, 8009206 <scalbn+0x2e>
 80091e2:	ee10 3a10 	vmov	r3, s0
 80091e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80091ea:	4319      	orrs	r1, r3
 80091ec:	d00a      	beq.n	8009204 <scalbn+0x2c>
 80091ee:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80092a0 <scalbn+0xc8>
 80091f2:	4b37      	ldr	r3, [pc, #220]	; (80092d0 <scalbn+0xf8>)
 80091f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80091f8:	4298      	cmp	r0, r3
 80091fa:	da0b      	bge.n	8009214 <scalbn+0x3c>
 80091fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80092a8 <scalbn+0xd0>
 8009200:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009204:	4770      	bx	lr
 8009206:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800920a:	4293      	cmp	r3, r2
 800920c:	d107      	bne.n	800921e <scalbn+0x46>
 800920e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009212:	4770      	bx	lr
 8009214:	ee10 1a90 	vmov	r1, s1
 8009218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800921c:	3b36      	subs	r3, #54	; 0x36
 800921e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009222:	4290      	cmp	r0, r2
 8009224:	dd0d      	ble.n	8009242 <scalbn+0x6a>
 8009226:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80092b0 <scalbn+0xd8>
 800922a:	ee10 3a90 	vmov	r3, s1
 800922e:	eeb0 6b47 	vmov.f64	d6, d7
 8009232:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80092b8 <scalbn+0xe0>
 8009236:	2b00      	cmp	r3, #0
 8009238:	fe27 7b05 	vselge.f64	d7, d7, d5
 800923c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009240:	4770      	bx	lr
 8009242:	4418      	add	r0, r3
 8009244:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8009248:	4298      	cmp	r0, r3
 800924a:	dcec      	bgt.n	8009226 <scalbn+0x4e>
 800924c:	2800      	cmp	r0, #0
 800924e:	dd0a      	ble.n	8009266 <scalbn+0x8e>
 8009250:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009254:	ec53 2b10 	vmov	r2, r3, d0
 8009258:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800925c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009260:	ec43 2b10 	vmov	d0, r2, r3
 8009264:	4770      	bx	lr
 8009266:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800926a:	da09      	bge.n	8009280 <scalbn+0xa8>
 800926c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80092a8 <scalbn+0xd0>
 8009270:	ee10 3a90 	vmov	r3, s1
 8009274:	eeb0 6b47 	vmov.f64	d6, d7
 8009278:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80092c0 <scalbn+0xe8>
 800927c:	2b00      	cmp	r3, #0
 800927e:	e7db      	b.n	8009238 <scalbn+0x60>
 8009280:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009284:	ec53 2b10 	vmov	r2, r3, d0
 8009288:	3036      	adds	r0, #54	; 0x36
 800928a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800928e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8009292:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80092c8 <scalbn+0xf0>
 8009296:	ec43 2b10 	vmov	d0, r2, r3
 800929a:	e7b1      	b.n	8009200 <scalbn+0x28>
 800929c:	f3af 8000 	nop.w
 80092a0:	00000000 	.word	0x00000000
 80092a4:	43500000 	.word	0x43500000
 80092a8:	c2f8f359 	.word	0xc2f8f359
 80092ac:	01a56e1f 	.word	0x01a56e1f
 80092b0:	8800759c 	.word	0x8800759c
 80092b4:	7e37e43c 	.word	0x7e37e43c
 80092b8:	8800759c 	.word	0x8800759c
 80092bc:	fe37e43c 	.word	0xfe37e43c
 80092c0:	c2f8f359 	.word	0xc2f8f359
 80092c4:	81a56e1f 	.word	0x81a56e1f
 80092c8:	00000000 	.word	0x00000000
 80092cc:	3c900000 	.word	0x3c900000
 80092d0:	ffff3cb0 	.word	0xffff3cb0
 80092d4:	00000000 	.word	0x00000000

080092d8 <floor>:
 80092d8:	ee10 1a90 	vmov	r1, s1
 80092dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092e0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80092e4:	2b13      	cmp	r3, #19
 80092e6:	b530      	push	{r4, r5, lr}
 80092e8:	ee10 0a10 	vmov	r0, s0
 80092ec:	ee10 5a10 	vmov	r5, s0
 80092f0:	dc31      	bgt.n	8009356 <floor+0x7e>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da15      	bge.n	8009322 <floor+0x4a>
 80092f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80093b8 <floor+0xe0>
 80092fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80092fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009306:	dd07      	ble.n	8009318 <floor+0x40>
 8009308:	2900      	cmp	r1, #0
 800930a:	da4e      	bge.n	80093aa <floor+0xd2>
 800930c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009310:	4308      	orrs	r0, r1
 8009312:	d04d      	beq.n	80093b0 <floor+0xd8>
 8009314:	492a      	ldr	r1, [pc, #168]	; (80093c0 <floor+0xe8>)
 8009316:	2000      	movs	r0, #0
 8009318:	460b      	mov	r3, r1
 800931a:	4602      	mov	r2, r0
 800931c:	ec43 2b10 	vmov	d0, r2, r3
 8009320:	e020      	b.n	8009364 <floor+0x8c>
 8009322:	4a28      	ldr	r2, [pc, #160]	; (80093c4 <floor+0xec>)
 8009324:	411a      	asrs	r2, r3
 8009326:	ea01 0402 	and.w	r4, r1, r2
 800932a:	4304      	orrs	r4, r0
 800932c:	d01a      	beq.n	8009364 <floor+0x8c>
 800932e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80093b8 <floor+0xe0>
 8009332:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009336:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933e:	ddeb      	ble.n	8009318 <floor+0x40>
 8009340:	2900      	cmp	r1, #0
 8009342:	bfbe      	ittt	lt
 8009344:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009348:	fa40 f303 	asrlt.w	r3, r0, r3
 800934c:	18c9      	addlt	r1, r1, r3
 800934e:	ea21 0102 	bic.w	r1, r1, r2
 8009352:	2000      	movs	r0, #0
 8009354:	e7e0      	b.n	8009318 <floor+0x40>
 8009356:	2b33      	cmp	r3, #51	; 0x33
 8009358:	dd05      	ble.n	8009366 <floor+0x8e>
 800935a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800935e:	d101      	bne.n	8009364 <floor+0x8c>
 8009360:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009364:	bd30      	pop	{r4, r5, pc}
 8009366:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800936a:	f04f 32ff 	mov.w	r2, #4294967295
 800936e:	40e2      	lsrs	r2, r4
 8009370:	4210      	tst	r0, r2
 8009372:	d0f7      	beq.n	8009364 <floor+0x8c>
 8009374:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80093b8 <floor+0xe0>
 8009378:	ee30 0b07 	vadd.f64	d0, d0, d7
 800937c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009384:	ddc8      	ble.n	8009318 <floor+0x40>
 8009386:	2900      	cmp	r1, #0
 8009388:	da02      	bge.n	8009390 <floor+0xb8>
 800938a:	2b14      	cmp	r3, #20
 800938c:	d103      	bne.n	8009396 <floor+0xbe>
 800938e:	3101      	adds	r1, #1
 8009390:	ea20 0002 	bic.w	r0, r0, r2
 8009394:	e7c0      	b.n	8009318 <floor+0x40>
 8009396:	2401      	movs	r4, #1
 8009398:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800939c:	fa04 f303 	lsl.w	r3, r4, r3
 80093a0:	4418      	add	r0, r3
 80093a2:	4285      	cmp	r5, r0
 80093a4:	bf88      	it	hi
 80093a6:	1909      	addhi	r1, r1, r4
 80093a8:	e7f2      	b.n	8009390 <floor+0xb8>
 80093aa:	2000      	movs	r0, #0
 80093ac:	4601      	mov	r1, r0
 80093ae:	e7b3      	b.n	8009318 <floor+0x40>
 80093b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80093b4:	e7b0      	b.n	8009318 <floor+0x40>
 80093b6:	bf00      	nop
 80093b8:	8800759c 	.word	0x8800759c
 80093bc:	7e37e43c 	.word	0x7e37e43c
 80093c0:	bff00000 	.word	0xbff00000
 80093c4:	000fffff 	.word	0x000fffff

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
